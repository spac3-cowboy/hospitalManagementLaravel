/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js":
/*!***************************************************************!*\
  !*** ./node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   FrameElement: () => (/* binding */ FrameElement),
/* harmony export */   FrameLoadingStyle: () => (/* binding */ FrameLoadingStyle),
/* harmony export */   FrameRenderer: () => (/* binding */ FrameRenderer),
/* harmony export */   PageRenderer: () => (/* binding */ PageRenderer),
/* harmony export */   PageSnapshot: () => (/* binding */ PageSnapshot),
/* harmony export */   StreamActions: () => (/* binding */ StreamActions),
/* harmony export */   StreamElement: () => (/* binding */ StreamElement),
/* harmony export */   StreamSourceElement: () => (/* binding */ StreamSourceElement),
/* harmony export */   cache: () => (/* binding */ cache),
/* harmony export */   clearCache: () => (/* binding */ clearCache),
/* harmony export */   connectStreamSource: () => (/* binding */ connectStreamSource),
/* harmony export */   disconnectStreamSource: () => (/* binding */ disconnectStreamSource),
/* harmony export */   navigator: () => (/* binding */ navigator$1),
/* harmony export */   registerAdapter: () => (/* binding */ registerAdapter),
/* harmony export */   renderStreamMessage: () => (/* binding */ renderStreamMessage),
/* harmony export */   session: () => (/* binding */ session),
/* harmony export */   setConfirmMethod: () => (/* binding */ setConfirmMethod),
/* harmony export */   setFormMode: () => (/* binding */ setFormMode),
/* harmony export */   setProgressBarDelay: () => (/* binding */ setProgressBarDelay),
/* harmony export */   start: () => (/* binding */ start),
/* harmony export */   visit: () => (/* binding */ visit)
/* harmony export */ });
/*
Turbo 7.3.0
Copyright Â© 2023 37signals LLC
 */
(function () {
    if (window.Reflect === undefined ||
        window.customElements === undefined ||
        window.customElements.polyfillWrapFlushCallback) {
        return;
    }
    const BuiltInHTMLElement = HTMLElement;
    const wrapperForTheName = {
        HTMLElement: function HTMLElement() {
            return Reflect.construct(BuiltInHTMLElement, [], this.constructor);
        },
    };
    window.HTMLElement = wrapperForTheName["HTMLElement"];
    HTMLElement.prototype = BuiltInHTMLElement.prototype;
    HTMLElement.prototype.constructor = HTMLElement;
    Object.setPrototypeOf(HTMLElement, BuiltInHTMLElement);
})();

/**
 * The MIT License (MIT)
 * 
 * Copyright (c) 2019 Javan Makhmali
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

(function(prototype) {
  if (typeof prototype.requestSubmit == "function") return

  prototype.requestSubmit = function(submitter) {
    if (submitter) {
      validateSubmitter(submitter, this);
      submitter.click();
    } else {
      submitter = document.createElement("input");
      submitter.type = "submit";
      submitter.hidden = true;
      this.appendChild(submitter);
      submitter.click();
      this.removeChild(submitter);
    }
  };

  function validateSubmitter(submitter, form) {
    submitter instanceof HTMLElement || raise(TypeError, "parameter 1 is not of type 'HTMLElement'");
    submitter.type == "submit" || raise(TypeError, "The specified element is not a submit button");
    submitter.form == form || raise(DOMException, "The specified element is not owned by this form element", "NotFoundError");
  }

  function raise(errorConstructor, message, name) {
    throw new errorConstructor("Failed to execute 'requestSubmit' on 'HTMLFormElement': " + message + ".", name)
  }
})(HTMLFormElement.prototype);

const submittersByForm = new WeakMap();
function findSubmitterFromClickTarget(target) {
    const element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;
    const candidate = element ? element.closest("input, button") : null;
    return (candidate === null || candidate === void 0 ? void 0 : candidate.type) == "submit" ? candidate : null;
}
function clickCaptured(event) {
    const submitter = findSubmitterFromClickTarget(event.target);
    if (submitter && submitter.form) {
        submittersByForm.set(submitter.form, submitter);
    }
}
(function () {
    if ("submitter" in Event.prototype)
        return;
    let prototype = window.Event.prototype;
    if ("SubmitEvent" in window && /Apple Computer/.test(navigator.vendor)) {
        prototype = window.SubmitEvent.prototype;
    }
    else if ("SubmitEvent" in window) {
        return;
    }
    addEventListener("click", clickCaptured, true);
    Object.defineProperty(prototype, "submitter", {
        get() {
            if (this.type == "submit" && this.target instanceof HTMLFormElement) {
                return submittersByForm.get(this.target);
            }
        },
    });
})();

var FrameLoadingStyle;
(function (FrameLoadingStyle) {
    FrameLoadingStyle["eager"] = "eager";
    FrameLoadingStyle["lazy"] = "lazy";
})(FrameLoadingStyle || (FrameLoadingStyle = {}));
class FrameElement extends HTMLElement {
    static get observedAttributes() {
        return ["disabled", "complete", "loading", "src"];
    }
    constructor() {
        super();
        this.loaded = Promise.resolve();
        this.delegate = new FrameElement.delegateConstructor(this);
    }
    connectedCallback() {
        this.delegate.connect();
    }
    disconnectedCallback() {
        this.delegate.disconnect();
    }
    reload() {
        return this.delegate.sourceURLReloaded();
    }
    attributeChangedCallback(name) {
        if (name == "loading") {
            this.delegate.loadingStyleChanged();
        }
        else if (name == "complete") {
            this.delegate.completeChanged();
        }
        else if (name == "src") {
            this.delegate.sourceURLChanged();
        }
        else {
            this.delegate.disabledChanged();
        }
    }
    get src() {
        return this.getAttribute("src");
    }
    set src(value) {
        if (value) {
            this.setAttribute("src", value);
        }
        else {
            this.removeAttribute("src");
        }
    }
    get loading() {
        return frameLoadingStyleFromString(this.getAttribute("loading") || "");
    }
    set loading(value) {
        if (value) {
            this.setAttribute("loading", value);
        }
        else {
            this.removeAttribute("loading");
        }
    }
    get disabled() {
        return this.hasAttribute("disabled");
    }
    set disabled(value) {
        if (value) {
            this.setAttribute("disabled", "");
        }
        else {
            this.removeAttribute("disabled");
        }
    }
    get autoscroll() {
        return this.hasAttribute("autoscroll");
    }
    set autoscroll(value) {
        if (value) {
            this.setAttribute("autoscroll", "");
        }
        else {
            this.removeAttribute("autoscroll");
        }
    }
    get complete() {
        return !this.delegate.isLoading;
    }
    get isActive() {
        return this.ownerDocument === document && !this.isPreview;
    }
    get isPreview() {
        var _a, _b;
        return (_b = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.documentElement) === null || _b === void 0 ? void 0 : _b.hasAttribute("data-turbo-preview");
    }
}
function frameLoadingStyleFromString(style) {
    switch (style.toLowerCase()) {
        case "lazy":
            return FrameLoadingStyle.lazy;
        default:
            return FrameLoadingStyle.eager;
    }
}

function expandURL(locatable) {
    return new URL(locatable.toString(), document.baseURI);
}
function getAnchor(url) {
    let anchorMatch;
    if (url.hash) {
        return url.hash.slice(1);
    }
    else if ((anchorMatch = url.href.match(/#(.*)$/))) {
        return anchorMatch[1];
    }
}
function getAction(form, submitter) {
    const action = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formaction")) || form.getAttribute("action") || form.action;
    return expandURL(action);
}
function getExtension(url) {
    return (getLastPathComponent(url).match(/\.[^.]*$/) || [])[0] || "";
}
function isHTML(url) {
    return !!getExtension(url).match(/^(?:|\.(?:htm|html|xhtml|php))$/);
}
function isPrefixedBy(baseURL, url) {
    const prefix = getPrefix(url);
    return baseURL.href === expandURL(prefix).href || baseURL.href.startsWith(prefix);
}
function locationIsVisitable(location, rootLocation) {
    return isPrefixedBy(location, rootLocation) && isHTML(location);
}
function getRequestURL(url) {
    const anchor = getAnchor(url);
    return anchor != null ? url.href.slice(0, -(anchor.length + 1)) : url.href;
}
function toCacheKey(url) {
    return getRequestURL(url);
}
function urlsAreEqual(left, right) {
    return expandURL(left).href == expandURL(right).href;
}
function getPathComponents(url) {
    return url.pathname.split("/").slice(1);
}
function getLastPathComponent(url) {
    return getPathComponents(url).slice(-1)[0];
}
function getPrefix(url) {
    return addTrailingSlash(url.origin + url.pathname);
}
function addTrailingSlash(value) {
    return value.endsWith("/") ? value : value + "/";
}

class FetchResponse {
    constructor(response) {
        this.response = response;
    }
    get succeeded() {
        return this.response.ok;
    }
    get failed() {
        return !this.succeeded;
    }
    get clientError() {
        return this.statusCode >= 400 && this.statusCode <= 499;
    }
    get serverError() {
        return this.statusCode >= 500 && this.statusCode <= 599;
    }
    get redirected() {
        return this.response.redirected;
    }
    get location() {
        return expandURL(this.response.url);
    }
    get isHTML() {
        return this.contentType && this.contentType.match(/^(?:text\/([^\s;,]+\b)?html|application\/xhtml\+xml)\b/);
    }
    get statusCode() {
        return this.response.status;
    }
    get contentType() {
        return this.header("Content-Type");
    }
    get responseText() {
        return this.response.clone().text();
    }
    get responseHTML() {
        if (this.isHTML) {
            return this.response.clone().text();
        }
        else {
            return Promise.resolve(undefined);
        }
    }
    header(name) {
        return this.response.headers.get(name);
    }
}

function activateScriptElement(element) {
    if (element.getAttribute("data-turbo-eval") == "false") {
        return element;
    }
    else {
        const createdScriptElement = document.createElement("script");
        const cspNonce = getMetaContent("csp-nonce");
        if (cspNonce) {
            createdScriptElement.nonce = cspNonce;
        }
        createdScriptElement.textContent = element.textContent;
        createdScriptElement.async = false;
        copyElementAttributes(createdScriptElement, element);
        return createdScriptElement;
    }
}
function copyElementAttributes(destinationElement, sourceElement) {
    for (const { name, value } of sourceElement.attributes) {
        destinationElement.setAttribute(name, value);
    }
}
function createDocumentFragment(html) {
    const template = document.createElement("template");
    template.innerHTML = html;
    return template.content;
}
function dispatch(eventName, { target, cancelable, detail } = {}) {
    const event = new CustomEvent(eventName, {
        cancelable,
        bubbles: true,
        composed: true,
        detail,
    });
    if (target && target.isConnected) {
        target.dispatchEvent(event);
    }
    else {
        document.documentElement.dispatchEvent(event);
    }
    return event;
}
function nextAnimationFrame() {
    return new Promise((resolve) => requestAnimationFrame(() => resolve()));
}
function nextEventLoopTick() {
    return new Promise((resolve) => setTimeout(() => resolve(), 0));
}
function nextMicrotask() {
    return Promise.resolve();
}
function parseHTMLDocument(html = "") {
    return new DOMParser().parseFromString(html, "text/html");
}
function unindent(strings, ...values) {
    const lines = interpolate(strings, values).replace(/^\n/, "").split("\n");
    const match = lines[0].match(/^\s+/);
    const indent = match ? match[0].length : 0;
    return lines.map((line) => line.slice(indent)).join("\n");
}
function interpolate(strings, values) {
    return strings.reduce((result, string, i) => {
        const value = values[i] == undefined ? "" : values[i];
        return result + string + value;
    }, "");
}
function uuid() {
    return Array.from({ length: 36 })
        .map((_, i) => {
        if (i == 8 || i == 13 || i == 18 || i == 23) {
            return "-";
        }
        else if (i == 14) {
            return "4";
        }
        else if (i == 19) {
            return (Math.floor(Math.random() * 4) + 8).toString(16);
        }
        else {
            return Math.floor(Math.random() * 15).toString(16);
        }
    })
        .join("");
}
function getAttribute(attributeName, ...elements) {
    for (const value of elements.map((element) => element === null || element === void 0 ? void 0 : element.getAttribute(attributeName))) {
        if (typeof value == "string")
            return value;
    }
    return null;
}
function hasAttribute(attributeName, ...elements) {
    return elements.some((element) => element && element.hasAttribute(attributeName));
}
function markAsBusy(...elements) {
    for (const element of elements) {
        if (element.localName == "turbo-frame") {
            element.setAttribute("busy", "");
        }
        element.setAttribute("aria-busy", "true");
    }
}
function clearBusyState(...elements) {
    for (const element of elements) {
        if (element.localName == "turbo-frame") {
            element.removeAttribute("busy");
        }
        element.removeAttribute("aria-busy");
    }
}
function waitForLoad(element, timeoutInMilliseconds = 2000) {
    return new Promise((resolve) => {
        const onComplete = () => {
            element.removeEventListener("error", onComplete);
            element.removeEventListener("load", onComplete);
            resolve();
        };
        element.addEventListener("load", onComplete, { once: true });
        element.addEventListener("error", onComplete, { once: true });
        setTimeout(resolve, timeoutInMilliseconds);
    });
}
function getHistoryMethodForAction(action) {
    switch (action) {
        case "replace":
            return history.replaceState;
        case "advance":
        case "restore":
            return history.pushState;
    }
}
function isAction(action) {
    return action == "advance" || action == "replace" || action == "restore";
}
function getVisitAction(...elements) {
    const action = getAttribute("data-turbo-action", ...elements);
    return isAction(action) ? action : null;
}
function getMetaElement(name) {
    return document.querySelector(`meta[name="${name}"]`);
}
function getMetaContent(name) {
    const element = getMetaElement(name);
    return element && element.content;
}
function setMetaContent(name, content) {
    let element = getMetaElement(name);
    if (!element) {
        element = document.createElement("meta");
        element.setAttribute("name", name);
        document.head.appendChild(element);
    }
    element.setAttribute("content", content);
    return element;
}
function findClosestRecursively(element, selector) {
    var _a;
    if (element instanceof Element) {
        return (element.closest(selector) ||
            findClosestRecursively(element.assignedSlot || ((_a = element.getRootNode()) === null || _a === void 0 ? void 0 : _a.host), selector));
    }
}

var FetchMethod;
(function (FetchMethod) {
    FetchMethod[FetchMethod["get"] = 0] = "get";
    FetchMethod[FetchMethod["post"] = 1] = "post";
    FetchMethod[FetchMethod["put"] = 2] = "put";
    FetchMethod[FetchMethod["patch"] = 3] = "patch";
    FetchMethod[FetchMethod["delete"] = 4] = "delete";
})(FetchMethod || (FetchMethod = {}));
function fetchMethodFromString(method) {
    switch (method.toLowerCase()) {
        case "get":
            return FetchMethod.get;
        case "post":
            return FetchMethod.post;
        case "put":
            return FetchMethod.put;
        case "patch":
            return FetchMethod.patch;
        case "delete":
            return FetchMethod.delete;
    }
}
class FetchRequest {
    constructor(delegate, method, location, body = new URLSearchParams(), target = null) {
        this.abortController = new AbortController();
        this.resolveRequestPromise = (_value) => { };
        this.delegate = delegate;
        this.method = method;
        this.headers = this.defaultHeaders;
        this.body = body;
        this.url = location;
        this.target = target;
    }
    get location() {
        return this.url;
    }
    get params() {
        return this.url.searchParams;
    }
    get entries() {
        return this.body ? Array.from(this.body.entries()) : [];
    }
    cancel() {
        this.abortController.abort();
    }
    async perform() {
        const { fetchOptions } = this;
        this.delegate.prepareRequest(this);
        await this.allowRequestToBeIntercepted(fetchOptions);
        try {
            this.delegate.requestStarted(this);
            const response = await fetch(this.url.href, fetchOptions);
            return await this.receive(response);
        }
        catch (error) {
            if (error.name !== "AbortError") {
                if (this.willDelegateErrorHandling(error)) {
                    this.delegate.requestErrored(this, error);
                }
                throw error;
            }
        }
        finally {
            this.delegate.requestFinished(this);
        }
    }
    async receive(response) {
        const fetchResponse = new FetchResponse(response);
        const event = dispatch("turbo:before-fetch-response", {
            cancelable: true,
            detail: { fetchResponse },
            target: this.target,
        });
        if (event.defaultPrevented) {
            this.delegate.requestPreventedHandlingResponse(this, fetchResponse);
        }
        else if (fetchResponse.succeeded) {
            this.delegate.requestSucceededWithResponse(this, fetchResponse);
        }
        else {
            this.delegate.requestFailedWithResponse(this, fetchResponse);
        }
        return fetchResponse;
    }
    get fetchOptions() {
        var _a;
        return {
            method: FetchMethod[this.method].toUpperCase(),
            credentials: "same-origin",
            headers: this.headers,
            redirect: "follow",
            body: this.isSafe ? null : this.body,
            signal: this.abortSignal,
            referrer: (_a = this.delegate.referrer) === null || _a === void 0 ? void 0 : _a.href,
        };
    }
    get defaultHeaders() {
        return {
            Accept: "text/html, application/xhtml+xml",
        };
    }
    get isSafe() {
        return this.method === FetchMethod.get;
    }
    get abortSignal() {
        return this.abortController.signal;
    }
    acceptResponseType(mimeType) {
        this.headers["Accept"] = [mimeType, this.headers["Accept"]].join(", ");
    }
    async allowRequestToBeIntercepted(fetchOptions) {
        const requestInterception = new Promise((resolve) => (this.resolveRequestPromise = resolve));
        const event = dispatch("turbo:before-fetch-request", {
            cancelable: true,
            detail: {
                fetchOptions,
                url: this.url,
                resume: this.resolveRequestPromise,
            },
            target: this.target,
        });
        if (event.defaultPrevented)
            await requestInterception;
    }
    willDelegateErrorHandling(error) {
        const event = dispatch("turbo:fetch-request-error", {
            target: this.target,
            cancelable: true,
            detail: { request: this, error: error },
        });
        return !event.defaultPrevented;
    }
}

class AppearanceObserver {
    constructor(delegate, element) {
        this.started = false;
        this.intersect = (entries) => {
            const lastEntry = entries.slice(-1)[0];
            if (lastEntry === null || lastEntry === void 0 ? void 0 : lastEntry.isIntersecting) {
                this.delegate.elementAppearedInViewport(this.element);
            }
        };
        this.delegate = delegate;
        this.element = element;
        this.intersectionObserver = new IntersectionObserver(this.intersect);
    }
    start() {
        if (!this.started) {
            this.started = true;
            this.intersectionObserver.observe(this.element);
        }
    }
    stop() {
        if (this.started) {
            this.started = false;
            this.intersectionObserver.unobserve(this.element);
        }
    }
}

class StreamMessage {
    static wrap(message) {
        if (typeof message == "string") {
            return new this(createDocumentFragment(message));
        }
        else {
            return message;
        }
    }
    constructor(fragment) {
        this.fragment = importStreamElements(fragment);
    }
}
StreamMessage.contentType = "text/vnd.turbo-stream.html";
function importStreamElements(fragment) {
    for (const element of fragment.querySelectorAll("turbo-stream")) {
        const streamElement = document.importNode(element, true);
        for (const inertScriptElement of streamElement.templateElement.content.querySelectorAll("script")) {
            inertScriptElement.replaceWith(activateScriptElement(inertScriptElement));
        }
        element.replaceWith(streamElement);
    }
    return fragment;
}

var FormSubmissionState;
(function (FormSubmissionState) {
    FormSubmissionState[FormSubmissionState["initialized"] = 0] = "initialized";
    FormSubmissionState[FormSubmissionState["requesting"] = 1] = "requesting";
    FormSubmissionState[FormSubmissionState["waiting"] = 2] = "waiting";
    FormSubmissionState[FormSubmissionState["receiving"] = 3] = "receiving";
    FormSubmissionState[FormSubmissionState["stopping"] = 4] = "stopping";
    FormSubmissionState[FormSubmissionState["stopped"] = 5] = "stopped";
})(FormSubmissionState || (FormSubmissionState = {}));
var FormEnctype;
(function (FormEnctype) {
    FormEnctype["urlEncoded"] = "application/x-www-form-urlencoded";
    FormEnctype["multipart"] = "multipart/form-data";
    FormEnctype["plain"] = "text/plain";
})(FormEnctype || (FormEnctype = {}));
function formEnctypeFromString(encoding) {
    switch (encoding.toLowerCase()) {
        case FormEnctype.multipart:
            return FormEnctype.multipart;
        case FormEnctype.plain:
            return FormEnctype.plain;
        default:
            return FormEnctype.urlEncoded;
    }
}
class FormSubmission {
    static confirmMethod(message, _element, _submitter) {
        return Promise.resolve(confirm(message));
    }
    constructor(delegate, formElement, submitter, mustRedirect = false) {
        this.state = FormSubmissionState.initialized;
        this.delegate = delegate;
        this.formElement = formElement;
        this.submitter = submitter;
        this.formData = buildFormData(formElement, submitter);
        this.location = expandURL(this.action);
        if (this.method == FetchMethod.get) {
            mergeFormDataEntries(this.location, [...this.body.entries()]);
        }
        this.fetchRequest = new FetchRequest(this, this.method, this.location, this.body, this.formElement);
        this.mustRedirect = mustRedirect;
    }
    get method() {
        var _a;
        const method = ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formmethod")) || this.formElement.getAttribute("method") || "";
        return fetchMethodFromString(method.toLowerCase()) || FetchMethod.get;
    }
    get action() {
        var _a;
        const formElementAction = typeof this.formElement.action === "string" ? this.formElement.action : null;
        if ((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.hasAttribute("formaction")) {
            return this.submitter.getAttribute("formaction") || "";
        }
        else {
            return this.formElement.getAttribute("action") || formElementAction || "";
        }
    }
    get body() {
        if (this.enctype == FormEnctype.urlEncoded || this.method == FetchMethod.get) {
            return new URLSearchParams(this.stringFormData);
        }
        else {
            return this.formData;
        }
    }
    get enctype() {
        var _a;
        return formEnctypeFromString(((_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("formenctype")) || this.formElement.enctype);
    }
    get isSafe() {
        return this.fetchRequest.isSafe;
    }
    get stringFormData() {
        return [...this.formData].reduce((entries, [name, value]) => {
            return entries.concat(typeof value == "string" ? [[name, value]] : []);
        }, []);
    }
    async start() {
        const { initialized, requesting } = FormSubmissionState;
        const confirmationMessage = getAttribute("data-turbo-confirm", this.submitter, this.formElement);
        if (typeof confirmationMessage === "string") {
            const answer = await FormSubmission.confirmMethod(confirmationMessage, this.formElement, this.submitter);
            if (!answer) {
                return;
            }
        }
        if (this.state == initialized) {
            this.state = requesting;
            return this.fetchRequest.perform();
        }
    }
    stop() {
        const { stopping, stopped } = FormSubmissionState;
        if (this.state != stopping && this.state != stopped) {
            this.state = stopping;
            this.fetchRequest.cancel();
            return true;
        }
    }
    prepareRequest(request) {
        if (!request.isSafe) {
            const token = getCookieValue(getMetaContent("csrf-param")) || getMetaContent("csrf-token");
            if (token) {
                request.headers["X-CSRF-Token"] = token;
            }
        }
        if (this.requestAcceptsTurboStreamResponse(request)) {
            request.acceptResponseType(StreamMessage.contentType);
        }
    }
    requestStarted(_request) {
        var _a;
        this.state = FormSubmissionState.waiting;
        (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.setAttribute("disabled", "");
        this.setSubmitsWith();
        dispatch("turbo:submit-start", {
            target: this.formElement,
            detail: { formSubmission: this },
        });
        this.delegate.formSubmissionStarted(this);
    }
    requestPreventedHandlingResponse(request, response) {
        this.result = { success: response.succeeded, fetchResponse: response };
    }
    requestSucceededWithResponse(request, response) {
        if (response.clientError || response.serverError) {
            this.delegate.formSubmissionFailedWithResponse(this, response);
        }
        else if (this.requestMustRedirect(request) && responseSucceededWithoutRedirect(response)) {
            const error = new Error("Form responses must redirect to another location");
            this.delegate.formSubmissionErrored(this, error);
        }
        else {
            this.state = FormSubmissionState.receiving;
            this.result = { success: true, fetchResponse: response };
            this.delegate.formSubmissionSucceededWithResponse(this, response);
        }
    }
    requestFailedWithResponse(request, response) {
        this.result = { success: false, fetchResponse: response };
        this.delegate.formSubmissionFailedWithResponse(this, response);
    }
    requestErrored(request, error) {
        this.result = { success: false, error };
        this.delegate.formSubmissionErrored(this, error);
    }
    requestFinished(_request) {
        var _a;
        this.state = FormSubmissionState.stopped;
        (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.removeAttribute("disabled");
        this.resetSubmitterText();
        dispatch("turbo:submit-end", {
            target: this.formElement,
            detail: Object.assign({ formSubmission: this }, this.result),
        });
        this.delegate.formSubmissionFinished(this);
    }
    setSubmitsWith() {
        if (!this.submitter || !this.submitsWith)
            return;
        if (this.submitter.matches("button")) {
            this.originalSubmitText = this.submitter.innerHTML;
            this.submitter.innerHTML = this.submitsWith;
        }
        else if (this.submitter.matches("input")) {
            const input = this.submitter;
            this.originalSubmitText = input.value;
            input.value = this.submitsWith;
        }
    }
    resetSubmitterText() {
        if (!this.submitter || !this.originalSubmitText)
            return;
        if (this.submitter.matches("button")) {
            this.submitter.innerHTML = this.originalSubmitText;
        }
        else if (this.submitter.matches("input")) {
            const input = this.submitter;
            input.value = this.originalSubmitText;
        }
    }
    requestMustRedirect(request) {
        return !request.isSafe && this.mustRedirect;
    }
    requestAcceptsTurboStreamResponse(request) {
        return !request.isSafe || hasAttribute("data-turbo-stream", this.submitter, this.formElement);
    }
    get submitsWith() {
        var _a;
        return (_a = this.submitter) === null || _a === void 0 ? void 0 : _a.getAttribute("data-turbo-submits-with");
    }
}
function buildFormData(formElement, submitter) {
    const formData = new FormData(formElement);
    const name = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("name");
    const value = submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("value");
    if (name) {
        formData.append(name, value || "");
    }
    return formData;
}
function getCookieValue(cookieName) {
    if (cookieName != null) {
        const cookies = document.cookie ? document.cookie.split("; ") : [];
        const cookie = cookies.find((cookie) => cookie.startsWith(cookieName));
        if (cookie) {
            const value = cookie.split("=").slice(1).join("=");
            return value ? decodeURIComponent(value) : undefined;
        }
    }
}
function responseSucceededWithoutRedirect(response) {
    return response.statusCode == 200 && !response.redirected;
}
function mergeFormDataEntries(url, entries) {
    const searchParams = new URLSearchParams();
    for (const [name, value] of entries) {
        if (value instanceof File)
            continue;
        searchParams.append(name, value);
    }
    url.search = searchParams.toString();
    return url;
}

class Snapshot {
    constructor(element) {
        this.element = element;
    }
    get activeElement() {
        return this.element.ownerDocument.activeElement;
    }
    get children() {
        return [...this.element.children];
    }
    hasAnchor(anchor) {
        return this.getElementForAnchor(anchor) != null;
    }
    getElementForAnchor(anchor) {
        return anchor ? this.element.querySelector(`[id='${anchor}'], a[name='${anchor}']`) : null;
    }
    get isConnected() {
        return this.element.isConnected;
    }
    get firstAutofocusableElement() {
        const inertDisabledOrHidden = "[inert], :disabled, [hidden], details:not([open]), dialog:not([open])";
        for (const element of this.element.querySelectorAll("[autofocus]")) {
            if (element.closest(inertDisabledOrHidden) == null)
                return element;
            else
                continue;
        }
        return null;
    }
    get permanentElements() {
        return queryPermanentElementsAll(this.element);
    }
    getPermanentElementById(id) {
        return getPermanentElementById(this.element, id);
    }
    getPermanentElementMapForSnapshot(snapshot) {
        const permanentElementMap = {};
        for (const currentPermanentElement of this.permanentElements) {
            const { id } = currentPermanentElement;
            const newPermanentElement = snapshot.getPermanentElementById(id);
            if (newPermanentElement) {
                permanentElementMap[id] = [currentPermanentElement, newPermanentElement];
            }
        }
        return permanentElementMap;
    }
}
function getPermanentElementById(node, id) {
    return node.querySelector(`#${id}[data-turbo-permanent]`);
}
function queryPermanentElementsAll(node) {
    return node.querySelectorAll("[id][data-turbo-permanent]");
}

class FormSubmitObserver {
    constructor(delegate, eventTarget) {
        this.started = false;
        this.submitCaptured = () => {
            this.eventTarget.removeEventListener("submit", this.submitBubbled, false);
            this.eventTarget.addEventListener("submit", this.submitBubbled, false);
        };
        this.submitBubbled = ((event) => {
            if (!event.defaultPrevented) {
                const form = event.target instanceof HTMLFormElement ? event.target : undefined;
                const submitter = event.submitter || undefined;
                if (form &&
                    submissionDoesNotDismissDialog(form, submitter) &&
                    submissionDoesNotTargetIFrame(form, submitter) &&
                    this.delegate.willSubmitForm(form, submitter)) {
                    event.preventDefault();
                    event.stopImmediatePropagation();
                    this.delegate.formSubmitted(form, submitter);
                }
            }
        });
        this.delegate = delegate;
        this.eventTarget = eventTarget;
    }
    start() {
        if (!this.started) {
            this.eventTarget.addEventListener("submit", this.submitCaptured, true);
            this.started = true;
        }
    }
    stop() {
        if (this.started) {
            this.eventTarget.removeEventListener("submit", this.submitCaptured, true);
            this.started = false;
        }
    }
}
function submissionDoesNotDismissDialog(form, submitter) {
    const method = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formmethod")) || form.getAttribute("method");
    return method != "dialog";
}
function submissionDoesNotTargetIFrame(form, submitter) {
    if ((submitter === null || submitter === void 0 ? void 0 : submitter.hasAttribute("formtarget")) || form.hasAttribute("target")) {
        const target = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("formtarget")) || form.target;
        for (const element of document.getElementsByName(target)) {
            if (element instanceof HTMLIFrameElement)
                return false;
        }
        return true;
    }
    else {
        return true;
    }
}

class View {
    constructor(delegate, element) {
        this.resolveRenderPromise = (_value) => { };
        this.resolveInterceptionPromise = (_value) => { };
        this.delegate = delegate;
        this.element = element;
    }
    scrollToAnchor(anchor) {
        const element = this.snapshot.getElementForAnchor(anchor);
        if (element) {
            this.scrollToElement(element);
            this.focusElement(element);
        }
        else {
            this.scrollToPosition({ x: 0, y: 0 });
        }
    }
    scrollToAnchorFromLocation(location) {
        this.scrollToAnchor(getAnchor(location));
    }
    scrollToElement(element) {
        element.scrollIntoView();
    }
    focusElement(element) {
        if (element instanceof HTMLElement) {
            if (element.hasAttribute("tabindex")) {
                element.focus();
            }
            else {
                element.setAttribute("tabindex", "-1");
                element.focus();
                element.removeAttribute("tabindex");
            }
        }
    }
    scrollToPosition({ x, y }) {
        this.scrollRoot.scrollTo(x, y);
    }
    scrollToTop() {
        this.scrollToPosition({ x: 0, y: 0 });
    }
    get scrollRoot() {
        return window;
    }
    async render(renderer) {
        const { isPreview, shouldRender, newSnapshot: snapshot } = renderer;
        if (shouldRender) {
            try {
                this.renderPromise = new Promise((resolve) => (this.resolveRenderPromise = resolve));
                this.renderer = renderer;
                await this.prepareToRenderSnapshot(renderer);
                const renderInterception = new Promise((resolve) => (this.resolveInterceptionPromise = resolve));
                const options = { resume: this.resolveInterceptionPromise, render: this.renderer.renderElement };
                const immediateRender = this.delegate.allowsImmediateRender(snapshot, options);
                if (!immediateRender)
                    await renderInterception;
                await this.renderSnapshot(renderer);
                this.delegate.viewRenderedSnapshot(snapshot, isPreview);
                this.delegate.preloadOnLoadLinksForView(this.element);
                this.finishRenderingSnapshot(renderer);
            }
            finally {
                delete this.renderer;
                this.resolveRenderPromise(undefined);
                delete this.renderPromise;
            }
        }
        else {
            this.invalidate(renderer.reloadReason);
        }
    }
    invalidate(reason) {
        this.delegate.viewInvalidated(reason);
    }
    async prepareToRenderSnapshot(renderer) {
        this.markAsPreview(renderer.isPreview);
        await renderer.prepareToRender();
    }
    markAsPreview(isPreview) {
        if (isPreview) {
            this.element.setAttribute("data-turbo-preview", "");
        }
        else {
            this.element.removeAttribute("data-turbo-preview");
        }
    }
    async renderSnapshot(renderer) {
        await renderer.render();
    }
    finishRenderingSnapshot(renderer) {
        renderer.finishRendering();
    }
}

class FrameView extends View {
    missing() {
        this.element.innerHTML = `<strong class="turbo-frame-error">Content missing</strong>`;
    }
    get snapshot() {
        return new Snapshot(this.element);
    }
}

class LinkInterceptor {
    constructor(delegate, element) {
        this.clickBubbled = (event) => {
            if (this.respondsToEventTarget(event.target)) {
                this.clickEvent = event;
            }
            else {
                delete this.clickEvent;
            }
        };
        this.linkClicked = ((event) => {
            if (this.clickEvent && this.respondsToEventTarget(event.target) && event.target instanceof Element) {
                if (this.delegate.shouldInterceptLinkClick(event.target, event.detail.url, event.detail.originalEvent)) {
                    this.clickEvent.preventDefault();
                    event.preventDefault();
                    this.delegate.linkClickIntercepted(event.target, event.detail.url, event.detail.originalEvent);
                }
            }
            delete this.clickEvent;
        });
        this.willVisit = ((_event) => {
            delete this.clickEvent;
        });
        this.delegate = delegate;
        this.element = element;
    }
    start() {
        this.element.addEventListener("click", this.clickBubbled);
        document.addEventListener("turbo:click", this.linkClicked);
        document.addEventListener("turbo:before-visit", this.willVisit);
    }
    stop() {
        this.element.removeEventListener("click", this.clickBubbled);
        document.removeEventListener("turbo:click", this.linkClicked);
        document.removeEventListener("turbo:before-visit", this.willVisit);
    }
    respondsToEventTarget(target) {
        const element = target instanceof Element ? target : target instanceof Node ? target.parentElement : null;
        return element && element.closest("turbo-frame, html") == this.element;
    }
}

class LinkClickObserver {
    constructor(delegate, eventTarget) {
        this.started = false;
        this.clickCaptured = () => {
            this.eventTarget.removeEventListener("click", this.clickBubbled, false);
            this.eventTarget.addEventListener("click", this.clickBubbled, false);
        };
        this.clickBubbled = (event) => {
            if (event instanceof MouseEvent && this.clickEventIsSignificant(event)) {
                const target = (event.composedPath && event.composedPath()[0]) || event.target;
                const link = this.findLinkFromClickTarget(target);
                if (link && doesNotTargetIFrame(link)) {
                    const location = this.getLocationForLink(link);
                    if (this.delegate.willFollowLinkToLocation(link, location, event)) {
                        event.preventDefault();
                        this.delegate.followedLinkToLocation(link, location);
                    }
                }
            }
        };
        this.delegate = delegate;
        this.eventTarget = eventTarget;
    }
    start() {
        if (!this.started) {
            this.eventTarget.addEventListener("click", this.clickCaptured, true);
            this.started = true;
        }
    }
    stop() {
        if (this.started) {
            this.eventTarget.removeEventListener("click", this.clickCaptured, true);
            this.started = false;
        }
    }
    clickEventIsSignificant(event) {
        return !((event.target && event.target.isContentEditable) ||
            event.defaultPrevented ||
            event.which > 1 ||
            event.altKey ||
            event.ctrlKey ||
            event.metaKey ||
            event.shiftKey);
    }
    findLinkFromClickTarget(target) {
        return findClosestRecursively(target, "a[href]:not([target^=_]):not([download])");
    }
    getLocationForLink(link) {
        return expandURL(link.getAttribute("href") || "");
    }
}
function doesNotTargetIFrame(anchor) {
    if (anchor.hasAttribute("target")) {
        for (const element of document.getElementsByName(anchor.target)) {
            if (element instanceof HTMLIFrameElement)
                return false;
        }
        return true;
    }
    else {
        return true;
    }
}

class FormLinkClickObserver {
    constructor(delegate, element) {
        this.delegate = delegate;
        this.linkInterceptor = new LinkClickObserver(this, element);
    }
    start() {
        this.linkInterceptor.start();
    }
    stop() {
        this.linkInterceptor.stop();
    }
    willFollowLinkToLocation(link, location, originalEvent) {
        return (this.delegate.willSubmitFormLinkToLocation(link, location, originalEvent) &&
            link.hasAttribute("data-turbo-method"));
    }
    followedLinkToLocation(link, location) {
        const form = document.createElement("form");
        const type = "hidden";
        for (const [name, value] of location.searchParams) {
            form.append(Object.assign(document.createElement("input"), { type, name, value }));
        }
        const action = Object.assign(location, { search: "" });
        form.setAttribute("data-turbo", "true");
        form.setAttribute("action", action.href);
        form.setAttribute("hidden", "");
        const method = link.getAttribute("data-turbo-method");
        if (method)
            form.setAttribute("method", method);
        const turboFrame = link.getAttribute("data-turbo-frame");
        if (turboFrame)
            form.setAttribute("data-turbo-frame", turboFrame);
        const turboAction = getVisitAction(link);
        if (turboAction)
            form.setAttribute("data-turbo-action", turboAction);
        const turboConfirm = link.getAttribute("data-turbo-confirm");
        if (turboConfirm)
            form.setAttribute("data-turbo-confirm", turboConfirm);
        const turboStream = link.hasAttribute("data-turbo-stream");
        if (turboStream)
            form.setAttribute("data-turbo-stream", "");
        this.delegate.submittedFormLinkToLocation(link, location, form);
        document.body.appendChild(form);
        form.addEventListener("turbo:submit-end", () => form.remove(), { once: true });
        requestAnimationFrame(() => form.requestSubmit());
    }
}

class Bardo {
    static async preservingPermanentElements(delegate, permanentElementMap, callback) {
        const bardo = new this(delegate, permanentElementMap);
        bardo.enter();
        await callback();
        bardo.leave();
    }
    constructor(delegate, permanentElementMap) {
        this.delegate = delegate;
        this.permanentElementMap = permanentElementMap;
    }
    enter() {
        for (const id in this.permanentElementMap) {
            const [currentPermanentElement, newPermanentElement] = this.permanentElementMap[id];
            this.delegate.enteringBardo(currentPermanentElement, newPermanentElement);
            this.replaceNewPermanentElementWithPlaceholder(newPermanentElement);
        }
    }
    leave() {
        for (const id in this.permanentElementMap) {
            const [currentPermanentElement] = this.permanentElementMap[id];
            this.replaceCurrentPermanentElementWithClone(currentPermanentElement);
            this.replacePlaceholderWithPermanentElement(currentPermanentElement);
            this.delegate.leavingBardo(currentPermanentElement);
        }
    }
    replaceNewPermanentElementWithPlaceholder(permanentElement) {
        const placeholder = createPlaceholderForPermanentElement(permanentElement);
        permanentElement.replaceWith(placeholder);
    }
    replaceCurrentPermanentElementWithClone(permanentElement) {
        const clone = permanentElement.cloneNode(true);
        permanentElement.replaceWith(clone);
    }
    replacePlaceholderWithPermanentElement(permanentElement) {
        const placeholder = this.getPlaceholderById(permanentElement.id);
        placeholder === null || placeholder === void 0 ? void 0 : placeholder.replaceWith(permanentElement);
    }
    getPlaceholderById(id) {
        return this.placeholders.find((element) => element.content == id);
    }
    get placeholders() {
        return [...document.querySelectorAll("meta[name=turbo-permanent-placeholder][content]")];
    }
}
function createPlaceholderForPermanentElement(permanentElement) {
    const element = document.createElement("meta");
    element.setAttribute("name", "turbo-permanent-placeholder");
    element.setAttribute("content", permanentElement.id);
    return element;
}

class Renderer {
    constructor(currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
        this.activeElement = null;
        this.currentSnapshot = currentSnapshot;
        this.newSnapshot = newSnapshot;
        this.isPreview = isPreview;
        this.willRender = willRender;
        this.renderElement = renderElement;
        this.promise = new Promise((resolve, reject) => (this.resolvingFunctions = { resolve, reject }));
    }
    get shouldRender() {
        return true;
    }
    get reloadReason() {
        return;
    }
    prepareToRender() {
        return;
    }
    finishRendering() {
        if (this.resolvingFunctions) {
            this.resolvingFunctions.resolve();
            delete this.resolvingFunctions;
        }
    }
    async preservingPermanentElements(callback) {
        await Bardo.preservingPermanentElements(this, this.permanentElementMap, callback);
    }
    focusFirstAutofocusableElement() {
        const element = this.connectedSnapshot.firstAutofocusableElement;
        if (elementIsFocusable(element)) {
            element.focus();
        }
    }
    enteringBardo(currentPermanentElement) {
        if (this.activeElement)
            return;
        if (currentPermanentElement.contains(this.currentSnapshot.activeElement)) {
            this.activeElement = this.currentSnapshot.activeElement;
        }
    }
    leavingBardo(currentPermanentElement) {
        if (currentPermanentElement.contains(this.activeElement) && this.activeElement instanceof HTMLElement) {
            this.activeElement.focus();
            this.activeElement = null;
        }
    }
    get connectedSnapshot() {
        return this.newSnapshot.isConnected ? this.newSnapshot : this.currentSnapshot;
    }
    get currentElement() {
        return this.currentSnapshot.element;
    }
    get newElement() {
        return this.newSnapshot.element;
    }
    get permanentElementMap() {
        return this.currentSnapshot.getPermanentElementMapForSnapshot(this.newSnapshot);
    }
}
function elementIsFocusable(element) {
    return element && typeof element.focus == "function";
}

class FrameRenderer extends Renderer {
    static renderElement(currentElement, newElement) {
        var _a;
        const destinationRange = document.createRange();
        destinationRange.selectNodeContents(currentElement);
        destinationRange.deleteContents();
        const frameElement = newElement;
        const sourceRange = (_a = frameElement.ownerDocument) === null || _a === void 0 ? void 0 : _a.createRange();
        if (sourceRange) {
            sourceRange.selectNodeContents(frameElement);
            currentElement.appendChild(sourceRange.extractContents());
        }
    }
    constructor(delegate, currentSnapshot, newSnapshot, renderElement, isPreview, willRender = true) {
        super(currentSnapshot, newSnapshot, renderElement, isPreview, willRender);
        this.delegate = delegate;
    }
    get shouldRender() {
        return true;
    }
    async render() {
        await nextAnimationFrame();
        this.preservingPermanentElements(() => {
            this.loadFrameElement();
        });
        this.scrollFrameIntoView();
        await nextAnimationFrame();
        this.focusFirstAutofocusableElement();
        await nextAnimationFrame();
        this.activateScriptElements();
    }
    loadFrameElement() {
        this.delegate.willRenderFrame(this.currentElement, this.newElement);
        this.renderElement(this.currentElement, this.newElement);
    }
    scrollFrameIntoView() {
        if (this.currentElement.autoscroll || this.newElement.autoscroll) {
            const element = this.currentElement.firstElementChild;
            const block = readScrollLogicalPosition(this.currentElement.getAttribute("data-autoscroll-block"), "end");
            const behavior = readScrollBehavior(this.currentElement.getAttribute("data-autoscroll-behavior"), "auto");
            if (element) {
                element.scrollIntoView({ block, behavior });
                return true;
            }
        }
        return false;
    }
    activateScriptElements() {
        for (const inertScriptElement of this.newScriptElements) {
            const activatedScriptElement = activateScriptElement(inertScriptElement);
            inertScriptElement.replaceWith(activatedScriptElement);
        }
    }
    get newScriptElements() {
        return this.currentElement.querySelectorAll("script");
    }
}
function readScrollLogicalPosition(value, defaultValue) {
    if (value == "end" || value == "start" || value == "center" || value == "nearest") {
        return value;
    }
    else {
        return defaultValue;
    }
}
function readScrollBehavior(value, defaultValue) {
    if (value == "auto" || value == "smooth") {
        return value;
    }
    else {
        return defaultValue;
    }
}

class ProgressBar {
    static get defaultCSS() {
        return unindent `
      .turbo-progress-bar {
        position: fixed;
        display: block;
        top: 0;
        left: 0;
        height: 3px;
        background: #0076ff;
        z-index: 2147483647;
        transition:
          width ${ProgressBar.animationDuration}ms ease-out,
          opacity ${ProgressBar.animationDuration / 2}ms ${ProgressBar.animationDuration / 2}ms ease-in;
        transform: translate3d(0, 0, 0);
      }
    `;
    }
    constructor() {
        this.hiding = false;
        this.value = 0;
        this.visible = false;
        this.trickle = () => {
            this.setValue(this.value + Math.random() / 100);
        };
        this.stylesheetElement = this.createStylesheetElement();
        this.progressElement = this.createProgressElement();
        this.installStylesheetElement();
        this.setValue(0);
    }
    show() {
        if (!this.visible) {
            this.visible = true;
            this.installProgressElement();
            this.startTrickling();
        }
    }
    hide() {
        if (this.visible && !this.hiding) {
            this.hiding = true;
            this.fadeProgressElement(() => {
                this.uninstallProgressElement();
                this.stopTrickling();
                this.visible = false;
                this.hiding = false;
            });
        }
    }
    setValue(value) {
        this.value = value;
        this.refresh();
    }
    installStylesheetElement() {
        document.head.insertBefore(this.stylesheetElement, document.head.firstChild);
    }
    installProgressElement() {
        this.progressElement.style.width = "0";
        this.progressElement.style.opacity = "1";
        document.documentElement.insertBefore(this.progressElement, document.body);
        this.refresh();
    }
    fadeProgressElement(callback) {
        this.progressElement.style.opacity = "0";
        setTimeout(callback, ProgressBar.animationDuration * 1.5);
    }
    uninstallProgressElement() {
        if (this.progressElement.parentNode) {
            document.documentElement.removeChild(this.progressElement);
        }
    }
    startTrickling() {
        if (!this.trickleInterval) {
            this.trickleInterval = window.setInterval(this.trickle, ProgressBar.animationDuration);
        }
    }
    stopTrickling() {
        window.clearInterval(this.trickleInterval);
        delete this.trickleInterval;
    }
    refresh() {
        requestAnimationFrame(() => {
            this.progressElement.style.width = `${10 + this.value * 90}%`;
        });
    }
    createStylesheetElement() {
        const element = document.createElement("style");
        element.type = "text/css";
        element.textContent = ProgressBar.defaultCSS;
        if (this.cspNonce) {
            element.nonce = this.cspNonce;
        }
        return element;
    }
    createProgressElement() {
        const element = document.createElement("div");
        element.className = "turbo-progress-bar";
        return element;
    }
    get cspNonce() {
        return getMetaContent("csp-nonce");
    }
}
ProgressBar.animationDuration = 300;

class HeadSnapshot extends Snapshot {
    constructor() {
        super(...arguments);
        this.detailsByOuterHTML = this.children
            .filter((element) => !elementIsNoscript(element))
            .map((element) => elementWithoutNonce(element))
            .reduce((result, element) => {
            const { outerHTML } = element;
            const details = outerHTML in result
                ? result[outerHTML]
                : {
                    type: elementType(element),
                    tracked: elementIsTracked(element),
                    elements: [],
                };
            return Object.assign(Object.assign({}, result), { [outerHTML]: Object.assign(Object.assign({}, details), { elements: [...details.elements, element] }) });
        }, {});
    }
    get trackedElementSignature() {
        return Object.keys(this.detailsByOuterHTML)
            .filter((outerHTML) => this.detailsByOuterHTML[outerHTML].tracked)
            .join("");
    }
    getScriptElementsNotInSnapshot(snapshot) {
        return this.getElementsMatchingTypeNotInSnapshot("script", snapshot);
    }
    getStylesheetElementsNotInSnapshot(snapshot) {
        return this.getElementsMatchingTypeNotInSnapshot("stylesheet", snapshot);
    }
    getElementsMatchingTypeNotInSnapshot(matchedType, snapshot) {
        return Object.keys(this.detailsByOuterHTML)
            .filter((outerHTML) => !(outerHTML in snapshot.detailsByOuterHTML))
            .map((outerHTML) => this.detailsByOuterHTML[outerHTML])
            .filter(({ type }) => type == matchedType)
            .map(({ elements: [element] }) => element);
    }
    get provisionalElements() {
        return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
            const { type, tracked, elements } = this.detailsByOuterHTML[outerHTML];
            if (type == null && !tracked) {
                return [...result, ...elements];
            }
            else if (elements.length > 1) {
                return [...result, ...elements.slice(1)];
            }
            else {
                return result;
            }
        }, []);
    }
    getMetaValue(name) {
        const element = this.findMetaElementByName(name);
        return element ? element.getAttribute("content") : null;
    }
    findMetaElementByName(name) {
        return Object.keys(this.detailsByOuterHTML).reduce((result, outerHTML) => {
            const { elements: [element], } = this.detailsByOuterHTML[outerHTML];
            return elementIsMetaElementWithName(element, name) ? element : result;
        }, undefined);
    }
}
function elementType(element) {
    if (elementIsScript(element)) {
        return "script";
    }
    else if (elementIsStylesheet(element)) {
        return "stylesheet";
    }
}
function elementIsTracked(element) {
    return element.getAttribute("data-turbo-track") == "reload";
}
function elementIsScript(element) {
    const tagName = element.localName;
    return tagName == "script";
}
function elementIsNoscript(element) {
    const tagName = element.localName;
    return tagName == "noscript";
}
function elementIsStylesheet(element) {
    const tagName = element.localName;
    return tagName == "style" || (tagName == "link" && element.getAttribute("rel") == "stylesheet");
}
function elementIsMetaElementWithName(element, name) {
    const tagName = element.localName;
    return tagName == "meta" && element.getAttribute("name") == name;
}
function elementWithoutNonce(element) {
    if (element.hasAttribute("nonce")) {
        element.setAttribute("nonce", "");
    }
    return element;
}

class PageSnapshot extends Snapshot {
    static fromHTMLString(html = "") {
        return this.fromDocument(parseHTMLDocument(html));
    }
    static fromElement(element) {
        return this.fromDocument(element.ownerDocument);
    }
    static fromDocument({ head, body }) {
        return new this(body, new HeadSnapshot(head));
    }
    constructor(element, headSnapshot) {
        super(element);
        this.headSnapshot = headSnapshot;
    }
    clone() {
        const clonedElement = this.element.cloneNode(true);
        const selectElements = this.element.querySelectorAll("select");
        const clonedSelectElements = clonedElement.querySelectorAll("select");
        for (const [index, source] of selectElements.entries()) {
            const clone = clonedSelectElements[index];
            for (const option of clone.selectedOptions)
                option.selected = false;
            for (const option of source.selectedOptions)
                clone.options[option.index].selected = true;
        }
        for (const clonedPasswordInput of clonedElement.querySelectorAll('input[type="password"]')) {
            clonedPasswordInput.value = "";
        }
        return new PageSnapshot(clonedElement, this.headSnapshot);
    }
    get headElement() {
        return this.headSnapshot.element;
    }
    get rootLocation() {
        var _a;
        const root = (_a = this.getSetting("root")) !== null && _a !== void 0 ? _a : "/";
        return expandURL(root);
    }
    get cacheControlValue() {
        return this.getSetting("cache-control");
    }
    get isPreviewable() {
        return this.cacheControlValue != "no-preview";
    }
    get isCacheable() {
        return this.cacheControlValue != "no-cache";
    }
    get isVisitable() {
        return this.getSetting("visit-control") != "reload";
    }
    getSetting(name) {
        return this.headSnapshot.getMetaValue(`turbo-${name}`);
    }
}

var TimingMetric;
(function (TimingMetric) {
    TimingMetric["visitStart"] = "visitStart";
    TimingMetric["requestStart"] = "requestStart";
    TimingMetric["requestEnd"] = "requestEnd";
    TimingMetric["visitEnd"] = "visitEnd";
})(TimingMetric || (TimingMetric = {}));
var VisitState;
(function (VisitState) {
    VisitState["initialized"] = "initialized";
    VisitState["started"] = "started";
    VisitState["canceled"] = "canceled";
    VisitState["failed"] = "failed";
    VisitState["completed"] = "completed";
})(VisitState || (VisitState = {}));
const defaultOptions = {
    action: "advance",
    historyChanged: false,
    visitCachedSnapshot: () => { },
    willRender: true,
    updateHistory: true,
    shouldCacheSnapshot: true,
    acceptsStreamResponse: false,
};
var SystemStatusCode;
(function (SystemStatusCode) {
    SystemStatusCode[SystemStatusCode["networkFailure"] = 0] = "networkFailure";
    SystemStatusCode[SystemStatusCode["timeoutFailure"] = -1] = "timeoutFailure";
    SystemStatusCode[SystemStatusCode["contentTypeMismatch"] = -2] = "contentTypeMismatch";
})(SystemStatusCode || (SystemStatusCode = {}));
class Visit {
    constructor(delegate, location, restorationIdentifier, options = {}) {
        this.identifier = uuid();
        this.timingMetrics = {};
        this.followedRedirect = false;
        this.historyChanged = false;
        this.scrolled = false;
        this.shouldCacheSnapshot = true;
        this.acceptsStreamResponse = false;
        this.snapshotCached = false;
        this.state = VisitState.initialized;
        this.delegate = delegate;
        this.location = location;
        this.restorationIdentifier = restorationIdentifier || uuid();
        const { action, historyChanged, referrer, snapshot, snapshotHTML, response, visitCachedSnapshot, willRender, updateHistory, shouldCacheSnapshot, acceptsStreamResponse, } = Object.assign(Object.assign({}, defaultOptions), options);
        this.action = action;
        this.historyChanged = historyChanged;
        this.referrer = referrer;
        this.snapshot = snapshot;
        this.snapshotHTML = snapshotHTML;
        this.response = response;
        this.isSamePage = this.delegate.locationWithActionIsSamePage(this.location, this.action);
        this.visitCachedSnapshot = visitCachedSnapshot;
        this.willRender = willRender;
        this.updateHistory = updateHistory;
        this.scrolled = !willRender;
        this.shouldCacheSnapshot = shouldCacheSnapshot;
        this.acceptsStreamResponse = acceptsStreamResponse;
    }
    get adapter() {
        return this.delegate.adapter;
    }
    get view() {
        return this.delegate.view;
    }
    get history() {
        return this.delegate.history;
    }
    get restorationData() {
        return this.history.getRestorationDataForIdentifier(this.restorationIdentifier);
    }
    get silent() {
        return this.isSamePage;
    }
    start() {
        if (this.state == VisitState.initialized) {
            this.recordTimingMetric(TimingMetric.visitStart);
            this.state = VisitState.started;
            this.adapter.visitStarted(this);
            this.delegate.visitStarted(this);
        }
    }
    cancel() {
        if (this.state == VisitState.started) {
            if (this.request) {
                this.request.cancel();
            }
            this.cancelRender();
            this.state = VisitState.canceled;
        }
    }
    complete() {
        if (this.state == VisitState.started) {
            this.recordTimingMetric(TimingMetric.visitEnd);
            this.state = VisitState.completed;
            this.followRedirect();
            if (!this.followedRedirect) {
                this.adapter.visitCompleted(this);
                this.delegate.visitCompleted(this);
            }
        }
    }
    fail() {
        if (this.state == VisitState.started) {
            this.state = VisitState.failed;
            this.adapter.visitFailed(this);
        }
    }
    changeHistory() {
        var _a;
        if (!this.historyChanged && this.updateHistory) {
            const actionForHistory = this.location.href === ((_a = this.referrer) === null || _a === void 0 ? void 0 : _a.href) ? "replace" : this.action;
            const method = getHistoryMethodForAction(actionForHistory);
            this.history.update(method, this.location, this.restorationIdentifier);
            this.historyChanged = true;
        }
    }
    issueRequest() {
        if (this.hasPreloadedResponse()) {
            this.simulateRequest();
        }
        else if (this.shouldIssueRequest() && !this.request) {
            this.request = new FetchRequest(this, FetchMethod.get, this.location);
            this.request.perform();
        }
    }
    simulateRequest() {
        if (this.response) {
            this.startRequest();
            this.recordResponse();
            this.finishRequest();
        }
    }
    startRequest() {
        this.recordTimingMetric(TimingMetric.requestStart);
        this.adapter.visitRequestStarted(this);
    }
    recordResponse(response = this.response) {
        this.response = response;
        if (response) {
            const { statusCode } = response;
            if (isSuccessful(statusCode)) {
                this.adapter.visitRequestCompleted(this);
            }
            else {
                this.adapter.visitRequestFailedWithStatusCode(this, statusCode);
            }
        }
    }
    finishRequest() {
        this.recordTimingMetric(TimingMetric.requestEnd);
        this.adapter.visitRequestFinished(this);
    }
    loadResponse() {
        if (this.response) {
            const { statusCode, responseHTML } = this.response;
            this.render(async () => {
                if (this.shouldCacheSnapshot)
                    this.cacheSnapshot();
                if (this.view.renderPromise)
                    await this.view.renderPromise;
                if (isSuccessful(statusCode) && responseHTML != null) {
                    await this.view.renderPage(PageSnapshot.fromHTMLString(responseHTML), false, this.willRender, this);
                    this.performScroll();
                    this.adapter.visitRendered(this);
                    this.complete();
                }
                else {
                    await this.view.renderError(PageSnapshot.fromHTMLString(responseHTML), this);
                    this.adapter.visitRendered(this);
                    this.fail();
                }
            });
        }
    }
    getCachedSnapshot() {
        const snapshot = this.view.getCachedSnapshotForLocation(this.location) || this.getPreloadedSnapshot();
        if (snapshot && (!getAnchor(this.location) || snapshot.hasAnchor(getAnchor(this.location)))) {
            if (this.action == "restore" || snapshot.isPreviewable) {
                return snapshot;
            }
        }
    }
    getPreloadedSnapshot() {
        if (this.snapshotHTML) {
            return PageSnapshot.fromHTMLString(this.snapshotHTML);
        }
    }
    hasCachedSnapshot() {
        return this.getCachedSnapshot() != null;
    }
    loadCachedSnapshot() {
        const snapshot = this.getCachedSnapshot();
        if (snapshot) {
            const isPreview = this.shouldIssueRequest();
            this.render(async () => {
                this.cacheSnapshot();
                if (this.isSamePage) {
                    this.adapter.visitRendered(this);
                }
                else {
                    if (this.view.renderPromise)
                        await this.view.renderPromise;
                    await this.view.renderPage(snapshot, isPreview, this.willRender, this);
                    this.performScroll();
                    this.adapter.visitRendered(this);
                    if (!isPreview) {
                        this.complete();
                    }
                }
            });
        }
    }
    followRedirect() {
        var _a;
        if (this.redirectedToLocation && !this.followedRedirect && ((_a = this.response) === null || _a === void 0 ? void 0 : _a.redirected)) {
            this.adapter.visitProposedToLocation(this.redirectedToLocation, {
                action: "replace",
                response: this.response,
                shouldCacheSnapshot: false,
                willRender: false,
            });
            this.followedRedirect = true;
        }
    }
    goToSamePageAnchor() {
        if (this.isSamePage) {
            this.render(async () => {
                this.cacheSnapshot();
                this.performScroll();
                this.changeHistory();
                this.adapter.visitRendered(this);
            });
        }
    }
    prepareRequest(request) {
        if (this.acceptsStreamResponse) {
            request.acceptResponseType(StreamMessage.contentType);
        }
    }
    requestStarted() {
        this.startRequest();
    }
    requestPreventedHandlingResponse(_request, _response) { }
    async requestSucceededWithResponse(request, response) {
        const responseHTML = await response.responseHTML;
        const { redirected, statusCode } = response;
        if (responseHTML == undefined) {
            this.recordResponse({
                statusCode: SystemStatusCode.contentTypeMismatch,
                redirected,
            });
        }
        else {
            this.redirectedToLocation = response.redirected ? response.location : undefined;
            this.recordResponse({ statusCode: statusCode, responseHTML, redirected });
        }
    }
    async requestFailedWithResponse(request, response) {
        const responseHTML = await response.responseHTML;
        const { redirected, statusCode } = response;
        if (responseHTML == undefined) {
            this.recordResponse({
                statusCode: SystemStatusCode.contentTypeMismatch,
                redirected,
            });
        }
        else {
            this.recordResponse({ statusCode: statusCode, responseHTML, redirected });
        }
    }
    requestErrored(_request, _error) {
        this.recordResponse({
            statusCode: SystemStatusCode.networkFailure,
            redirected: false,
        });
    }
    requestFinished() {
        this.finishRequest();
    }
    performScroll() {
        if (!this.scrolled && !this.view.forceReloaded) {
            if (this.action == "restore") {
                this.scrollToRestoredPosition() || this.scrollToAnchor() || this.view.scrollToTop();
            }
            else {
                this.scrollToAnchor() || this.view.scrollToTop();
            }
            if (this.isSamePage) {
                this.delegate.visitScrolledToSamePageLocation(this.view.lastRenderedLocation, this.location);
            }
            this.scrolled = true;
        }
    }
    scrollToRestoredPosition() {
        const { scrollPosition } = this.restorationData;
        if (scrollPosition) {
            this.view.scrollToPosition(scrollPosition);
            return true;
        }
    }
    scrollToAnchor() {
        const anchor = getAnchor(this.location);
        if (anchor != null) {
            this.view.scrollToAnchor(anchor);
            return true;
        }
    }
    recordTimingMetric(metric) {
        this.timingMetrics[metric] = new Date().getTime();
    }
    getTimingMetrics() {
        return Object.assign({}, this.timingMetrics);
    }
    getHistoryMethodForAction(action) {
        switch (action) {
            case "replace":
                return history.replaceState;
            case "advance":
            case "restore":
                return history.pushState;
        }
    }
    hasPreloadedResponse() {
        return typeof this.response == "object";
    }
    shouldIssueRequest() {
        if (this.isSamePage) {
            return false;
        }
        else if (this.action == "restore") {
            return !this.hasCachedSnapshot();
        }
        else {
            return this.willRender;
        }
    }
    cacheSnapshot() {
        if (!this.snapshotCached) {
            this.view.cacheSnapshot(this.snapshot).then((snapshot) => snapshot && this.visitCachedSnapshot(snapshot));
            this.snapshotCached = true;
        }
    }
    async render(callback) {
        this.cancelRender();
        await new Promise((resolve) => {
            this.frame = requestAnimationFrame(() => resolve());
        });
        await callback();
        delete this.frame;
    }
    cancelRender() {
        if (this.frame) {
            cancelAnimationFrame(this.frame);
            delete this.frame;
        }
    }
}
function isSuccessful(statusCode) {
    return statusCode >= 200 && statusCode < 300;
}

class BrowserAdapter {
    constructor(session) {
        this.progressBar = new ProgressBar();
        this.showProgressBar = () => {
            this.progressBar.show();
        };
        this.session = session;
    }
    visitProposedToLocation(location, options) {
        this.navigator.startVisit(location, (options === null || options === void 0 ? void 0 : options.restorationIdentifier) || uuid(), options);
    }
    visitStarted(visit) {
        this.location = visit.location;
        visit.loadCachedSnapshot();
        visit.issueRequest();
        visit.goToSamePageAnchor();
    }
    visitRequestStarted(visit) {
        this.progressBar.setValue(0);
        if (visit.hasCachedSnapshot() || visit.action != "restore") {
            this.showVisitProgressBarAfterDelay();
        }
        else {
            this.showProgressBar();
        }
    }
    visitRequestCompleted(visit) {
        visit.loadResponse();
    }
    visitRequestFailedWithStatusCode(visit, statusCode) {
        switch (statusCode) {
            case SystemStatusCode.networkFailure:
            case SystemStatusCode.timeoutFailure:
            case SystemStatusCode.contentTypeMismatch:
                return this.reload({
                    reason: "request_failed",
                    context: {
                        statusCode,
                    },
                });
            default:
                return visit.loadResponse();
        }
    }
    visitRequestFinished(_visit) {
        this.progressBar.setValue(1);
        this.hideVisitProgressBar();
    }
    visitCompleted(_visit) { }
    pageInvalidated(reason) {
        this.reload(reason);
    }
    visitFailed(_visit) { }
    visitRendered(_visit) { }
    formSubmissionStarted(_formSubmission) {
        this.progressBar.setValue(0);
        this.showFormProgressBarAfterDelay();
    }
    formSubmissionFinished(_formSubmission) {
        this.progressBar.setValue(1);
        this.hideFormProgressBar();
    }
    showVisitProgressBarAfterDelay() {
        this.visitProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
    }
    hideVisitProgressBar() {
        this.progressBar.hide();
        if (this.visitProgressBarTimeout != null) {
            window.clearTimeout(this.visitProgressBarTimeout);
            delete this.visitProgressBarTimeout;
        }
    }
    showFormProgressBarAfterDelay() {
        if (this.formProgressBarTimeout == null) {
            this.formProgressBarTimeout = window.setTimeout(this.showProgressBar, this.session.progressBarDelay);
        }
    }
    hideFormProgressBar() {
        this.progressBar.hide();
        if (this.formProgressBarTimeout != null) {
            window.clearTimeout(this.formProgressBarTimeout);
            delete this.formProgressBarTimeout;
        }
    }
    reload(reason) {
        var _a;
        dispatch("turbo:reload", { detail: reason });
        window.location.href = ((_a = this.location) === null || _a === void 0 ? void 0 : _a.toString()) || window.location.href;
    }
    get navigator() {
        return this.session.navigator;
    }
}

class CacheObserver {
    constructor() {
        this.selector = "[data-turbo-temporary]";
        this.deprecatedSelector = "[data-turbo-cache=false]";
        this.started = false;
        this.removeTemporaryElements = ((_event) => {
            for (const element of this.temporaryElements) {
                element.remove();
            }
        });
    }
    start() {
        if (!this.started) {
            this.started = true;
            addEventListener("turbo:before-cache", this.removeTemporaryElements, false);
        }
    }
    stop() {
        if (this.started) {
            this.started = false;
            removeEventListener("turbo:before-cache", this.removeTemporaryElements, false);
        }
    }
    get temporaryElements() {
        return [...document.querySelectorAll(this.selector), ...this.temporaryElementsWithDeprecation];
    }
    get temporaryElementsWithDeprecation() {
        const elements = document.querySelectorAll(this.deprecatedSelector);
        if (elements.length) {
            console.warn(`The ${this.deprecatedSelector} selector is deprecated and will be removed in a future version. Use ${this.selector} instead.`);
        }
        return [...elements];
    }
}

class FrameRedirector {
    constructor(session, element) {
        this.session = session;
        this.element = element;
        this.linkInterceptor = new LinkInterceptor(this, element);
        this.formSubmitObserver = new FormSubmitObserver(this, element);
    }
    start() {
        this.linkInterceptor.start();
        this.formSubmitObserver.start();
    }
    stop() {
        this.linkInterceptor.stop();
        this.formSubmitObserver.stop();
    }
    shouldInterceptLinkClick(element, _location, _event) {
        return this.shouldRedirect(element);
    }
    linkClickIntercepted(element, url, event) {
        const frame = this.findFrameElement(element);
        if (frame) {
            frame.delegate.linkClickIntercepted(element, url, event);
        }
    }
    willSubmitForm(element, submitter) {
        return (element.closest("turbo-frame") == null &&
            this.shouldSubmit(element, submitter) &&
            this.shouldRedirect(element, submitter));
    }
    formSubmitted(element, submitter) {
        const frame = this.findFrameElement(element, submitter);
        if (frame) {
            frame.delegate.formSubmitted(element, submitter);
        }
    }
    shouldSubmit(form, submitter) {
        var _a;
        const action = getAction(form, submitter);
        const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
        const rootLocation = expandURL((_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/");
        return this.shouldRedirect(form, submitter) && locationIsVisitable(action, rootLocation);
    }
    shouldRedirect(element, submitter) {
        const isNavigatable = element instanceof HTMLFormElement
            ? this.session.submissionIsNavigatable(element, submitter)
            : this.session.elementIsNavigatable(element);
        if (isNavigatable) {
            const frame = this.findFrameElement(element, submitter);
            return frame ? frame != element.closest("turbo-frame") : false;
        }
        else {
            return false;
        }
    }
    findFrameElement(element, submitter) {
        const id = (submitter === null || submitter === void 0 ? void 0 : submitter.getAttribute("data-turbo-frame")) || element.getAttribute("data-turbo-frame");
        if (id && id != "_top") {
            const frame = this.element.querySelector(`#${id}:not([disabled])`);
            if (frame instanceof FrameElement) {
                return frame;
            }
        }
    }
}

class History {
    constructor(delegate) {
        this.restorationIdentifier = uuid();
        this.restorationData = {};
        this.started = false;
        this.pageLoaded = false;
        this.onPopState = (event) => {
            if (this.shouldHandlePopState()) {
                const { turbo } = event.state || {};
                if (turbo) {
                    this.location = new URL(window.location.href);
                    const { restorationIdentifier } = turbo;
                    this.restorationIdentifier = restorationIdentifier;
                    this.delegate.historyPoppedToLocationWithRestorationIdentifier(this.location, restorationIdentifier);
                }
            }
        };
        this.onPageLoad = async (_event) => {
            await nextMicrotask();
            this.pageLoaded = true;
        };
        this.delegate = delegate;
    }
    start() {
        if (!this.started) {
            addEventListener("popstate", this.onPopState, false);
            addEventListener("load", this.onPageLoad, false);
            this.started = true;
            this.replace(new URL(window.location.href));
        }
    }
    stop() {
        if (this.started) {
            removeEventListener("popstate", this.onPopState, false);
            removeEventListener("load", this.onPageLoad, false);
            this.started = false;
        }
    }
    push(location, restorationIdentifier) {
        this.update(history.pushState, location, restorationIdentifier);
    }
    replace(location, restorationIdentifier) {
        this.update(history.replaceState, location, restorationIdentifier);
    }
    update(method, location, restorationIdentifier = uuid()) {
        const state = { turbo: { restorationIdentifier } };
        method.call(history, state, "", location.href);
        this.location = location;
        this.restorationIdentifier = restorationIdentifier;
    }
    getRestorationDataForIdentifier(restorationIdentifier) {
        return this.restorationData[restorationIdentifier] || {};
    }
    updateRestorationData(additionalData) {
        const { restorationIdentifier } = this;
        const restorationData = this.restorationData[restorationIdentifier];
        this.restorationData[restorationIdentifier] = Object.assign(Object.assign({}, restorationData), additionalData);
    }
    assumeControlOfScrollRestoration() {
        var _a;
        if (!this.previousScrollRestoration) {
            this.previousScrollRestoration = (_a = history.scrollRestoration) !== null && _a !== void 0 ? _a : "auto";
            history.scrollRestoration = "manual";
        }
    }
    relinquishControlOfScrollRestoration() {
        if (this.previousScrollRestoration) {
            history.scrollRestoration = this.previousScrollRestoration;
            delete this.previousScrollRestoration;
        }
    }
    shouldHandlePopState() {
        return this.pageIsLoaded();
    }
    pageIsLoaded() {
        return this.pageLoaded || document.readyState == "complete";
    }
}

class Navigator {
    constructor(delegate) {
        this.delegate = delegate;
    }
    proposeVisit(location, options = {}) {
        if (this.delegate.allowsVisitingLocationWithAction(location, options.action)) {
            if (locationIsVisitable(location, this.view.snapshot.rootLocation)) {
                this.delegate.visitProposedToLocation(location, options);
            }
            else {
                window.location.href = location.toString();
            }
        }
    }
    startVisit(locatable, restorationIdentifier, options = {}) {
        this.stop();
        this.currentVisit = new Visit(this, expandURL(locatable), restorationIdentifier, Object.assign({ referrer: this.location }, options));
        this.currentVisit.start();
    }
    submitForm(form, submitter) {
        this.stop();
        this.formSubmission = new FormSubmission(this, form, submitter, true);
        this.formSubmission.start();
    }
    stop() {
        if (this.formSubmission) {
            this.formSubmission.stop();
            delete this.formSubmission;
        }
        if (this.currentVisit) {
            this.currentVisit.cancel();
            delete this.currentVisit;
        }
    }
    get adapter() {
        return this.delegate.adapter;
    }
    get view() {
        return this.delegate.view;
    }
    get history() {
        return this.delegate.history;
    }
    formSubmissionStarted(formSubmission) {
        if (typeof this.adapter.formSubmissionStarted === "function") {
            this.adapter.formSubmissionStarted(formSubmission);
        }
    }
    async formSubmissionSucceededWithResponse(formSubmission, fetchResponse) {
        if (formSubmission == this.formSubmission) {
            const responseHTML = await fetchResponse.responseHTML;
            if (responseHTML) {
                const shouldCacheSnapshot = formSubmission.isSafe;
                if (!shouldCacheSnapshot) {
                    this.view.clearSnapshotCache();
                }
                const { statusCode, redirected } = fetchResponse;
                const action = this.getActionForFormSubmission(formSubmission);
                const visitOptions = {
                    action,
                    shouldCacheSnapshot,
                    response: { statusCode, responseHTML, redirected },
                };
                this.proposeVisit(fetchResponse.location, visitOptions);
            }
        }
    }
    async formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
        const responseHTML = await fetchResponse.responseHTML;
        if (responseHTML) {
            const snapshot = PageSnapshot.fromHTMLString(responseHTML);
            if (fetchResponse.serverError) {
                await this.view.renderError(snapshot, this.currentVisit);
            }
            else {
                await this.view.renderPage(snapshot, false, true, this.currentVisit);
            }
            this.view.scrollToTop();
            this.view.clearSnapshotCache();
        }
    }
    formSubmissionErrored(formSubmission, error) {
        console.error(error);
    }
    formSubmissionFinished(formSubmission) {
        if (typeof this.adapter.formSubmissionFinished === "function") {
            this.adapter.formSubmissionFinished(formSubmission);
        }
    }
    visitStarted(visit) {
        this.delegate.visitStarted(visit);
    }
    visitCompleted(visit) {
        this.delegate.visitCompleted(visit);
    }
    locationWithActionIsSamePage(location, action) {
        const anchor = getAnchor(location);
        const currentAnchor = getAnchor(this.view.lastRenderedLocation);
        const isRestorationToTop = action === "restore" && typeof anchor === "undefined";
        return (action !== "replace" &&
            getRequestURL(location) === getRequestURL(this.view.lastRenderedLocation) &&
            (isRestorationToTop || (anchor != null && anchor !== currentAnchor)));
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
        this.delegate.visitScrolledToSamePageLocation(oldURL, newURL);
    }
    get location() {
        return this.history.location;
    }
    get restorationIdentifier() {
        return this.history.restorationIdentifier;
    }
    getActionForFormSubmission({ submitter, formElement }) {
        return getVisitAction(submitter, formElement) || "advance";
    }
}

var PageStage;
(function (PageStage) {
    PageStage[PageStage["initial"] = 0] = "initial";
    PageStage[PageStage["loading"] = 1] = "loading";
    PageStage[PageStage["interactive"] = 2] = "interactive";
    PageStage[PageStage["complete"] = 3] = "complete";
})(PageStage || (PageStage = {}));
class PageObserver {
    constructor(delegate) {
        this.stage = PageStage.initial;
        this.started = false;
        this.interpretReadyState = () => {
            const { readyState } = this;
            if (readyState == "interactive") {
                this.pageIsInteractive();
            }
            else if (readyState == "complete") {
                this.pageIsComplete();
            }
        };
        this.pageWillUnload = () => {
            this.delegate.pageWillUnload();
        };
        this.delegate = delegate;
    }
    start() {
        if (!this.started) {
            if (this.stage == PageStage.initial) {
                this.stage = PageStage.loading;
            }
            document.addEventListener("readystatechange", this.interpretReadyState, false);
            addEventListener("pagehide", this.pageWillUnload, false);
            this.started = true;
        }
    }
    stop() {
        if (this.started) {
            document.removeEventListener("readystatechange", this.interpretReadyState, false);
            removeEventListener("pagehide", this.pageWillUnload, false);
            this.started = false;
        }
    }
    pageIsInteractive() {
        if (this.stage == PageStage.loading) {
            this.stage = PageStage.interactive;
            this.delegate.pageBecameInteractive();
        }
    }
    pageIsComplete() {
        this.pageIsInteractive();
        if (this.stage == PageStage.interactive) {
            this.stage = PageStage.complete;
            this.delegate.pageLoaded();
        }
    }
    get readyState() {
        return document.readyState;
    }
}

class ScrollObserver {
    constructor(delegate) {
        this.started = false;
        this.onScroll = () => {
            this.updatePosition({ x: window.pageXOffset, y: window.pageYOffset });
        };
        this.delegate = delegate;
    }
    start() {
        if (!this.started) {
            addEventListener("scroll", this.onScroll, false);
            this.onScroll();
            this.started = true;
        }
    }
    stop() {
        if (this.started) {
            removeEventListener("scroll", this.onScroll, false);
            this.started = false;
        }
    }
    updatePosition(position) {
        this.delegate.scrollPositionChanged(position);
    }
}

class StreamMessageRenderer {
    render({ fragment }) {
        Bardo.preservingPermanentElements(this, getPermanentElementMapForFragment(fragment), () => document.documentElement.appendChild(fragment));
    }
    enteringBardo(currentPermanentElement, newPermanentElement) {
        newPermanentElement.replaceWith(currentPermanentElement.cloneNode(true));
    }
    leavingBardo() { }
}
function getPermanentElementMapForFragment(fragment) {
    const permanentElementsInDocument = queryPermanentElementsAll(document.documentElement);
    const permanentElementMap = {};
    for (const permanentElementInDocument of permanentElementsInDocument) {
        const { id } = permanentElementInDocument;
        for (const streamElement of fragment.querySelectorAll("turbo-stream")) {
            const elementInStream = getPermanentElementById(streamElement.templateElement.content, id);
            if (elementInStream) {
                permanentElementMap[id] = [permanentElementInDocument, elementInStream];
            }
        }
    }
    return permanentElementMap;
}

class StreamObserver {
    constructor(delegate) {
        this.sources = new Set();
        this.started = false;
        this.inspectFetchResponse = ((event) => {
            const response = fetchResponseFromEvent(event);
            if (response && fetchResponseIsStream(response)) {
                event.preventDefault();
                this.receiveMessageResponse(response);
            }
        });
        this.receiveMessageEvent = (event) => {
            if (this.started && typeof event.data == "string") {
                this.receiveMessageHTML(event.data);
            }
        };
        this.delegate = delegate;
    }
    start() {
        if (!this.started) {
            this.started = true;
            addEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
        }
    }
    stop() {
        if (this.started) {
            this.started = false;
            removeEventListener("turbo:before-fetch-response", this.inspectFetchResponse, false);
        }
    }
    connectStreamSource(source) {
        if (!this.streamSourceIsConnected(source)) {
            this.sources.add(source);
            source.addEventListener("message", this.receiveMessageEvent, false);
        }
    }
    disconnectStreamSource(source) {
        if (this.streamSourceIsConnected(source)) {
            this.sources.delete(source);
            source.removeEventListener("message", this.receiveMessageEvent, false);
        }
    }
    streamSourceIsConnected(source) {
        return this.sources.has(source);
    }
    async receiveMessageResponse(response) {
        const html = await response.responseHTML;
        if (html) {
            this.receiveMessageHTML(html);
        }
    }
    receiveMessageHTML(html) {
        this.delegate.receivedMessageFromStream(StreamMessage.wrap(html));
    }
}
function fetchResponseFromEvent(event) {
    var _a;
    const fetchResponse = (_a = event.detail) === null || _a === void 0 ? void 0 : _a.fetchResponse;
    if (fetchResponse instanceof FetchResponse) {
        return fetchResponse;
    }
}
function fetchResponseIsStream(response) {
    var _a;
    const contentType = (_a = response.contentType) !== null && _a !== void 0 ? _a : "";
    return contentType.startsWith(StreamMessage.contentType);
}

class ErrorRenderer extends Renderer {
    static renderElement(currentElement, newElement) {
        const { documentElement, body } = document;
        documentElement.replaceChild(newElement, body);
    }
    async render() {
        this.replaceHeadAndBody();
        this.activateScriptElements();
    }
    replaceHeadAndBody() {
        const { documentElement, head } = document;
        documentElement.replaceChild(this.newHead, head);
        this.renderElement(this.currentElement, this.newElement);
    }
    activateScriptElements() {
        for (const replaceableElement of this.scriptElements) {
            const parentNode = replaceableElement.parentNode;
            if (parentNode) {
                const element = activateScriptElement(replaceableElement);
                parentNode.replaceChild(element, replaceableElement);
            }
        }
    }
    get newHead() {
        return this.newSnapshot.headSnapshot.element;
    }
    get scriptElements() {
        return document.documentElement.querySelectorAll("script");
    }
}

class PageRenderer extends Renderer {
    static renderElement(currentElement, newElement) {
        if (document.body && newElement instanceof HTMLBodyElement) {
            document.body.replaceWith(newElement);
        }
        else {
            document.documentElement.appendChild(newElement);
        }
    }
    get shouldRender() {
        return this.newSnapshot.isVisitable && this.trackedElementsAreIdentical;
    }
    get reloadReason() {
        if (!this.newSnapshot.isVisitable) {
            return {
                reason: "turbo_visit_control_is_reload",
            };
        }
        if (!this.trackedElementsAreIdentical) {
            return {
                reason: "tracked_element_mismatch",
            };
        }
    }
    async prepareToRender() {
        await this.mergeHead();
    }
    async render() {
        if (this.willRender) {
            await this.replaceBody();
        }
    }
    finishRendering() {
        super.finishRendering();
        if (!this.isPreview) {
            this.focusFirstAutofocusableElement();
        }
    }
    get currentHeadSnapshot() {
        return this.currentSnapshot.headSnapshot;
    }
    get newHeadSnapshot() {
        return this.newSnapshot.headSnapshot;
    }
    get newElement() {
        return this.newSnapshot.element;
    }
    async mergeHead() {
        const mergedHeadElements = this.mergeProvisionalElements();
        const newStylesheetElements = this.copyNewHeadStylesheetElements();
        this.copyNewHeadScriptElements();
        await mergedHeadElements;
        await newStylesheetElements;
    }
    async replaceBody() {
        await this.preservingPermanentElements(async () => {
            this.activateNewBody();
            await this.assignNewBody();
        });
    }
    get trackedElementsAreIdentical() {
        return this.currentHeadSnapshot.trackedElementSignature == this.newHeadSnapshot.trackedElementSignature;
    }
    async copyNewHeadStylesheetElements() {
        const loadingElements = [];
        for (const element of this.newHeadStylesheetElements) {
            loadingElements.push(waitForLoad(element));
            document.head.appendChild(element);
        }
        await Promise.all(loadingElements);
    }
    copyNewHeadScriptElements() {
        for (const element of this.newHeadScriptElements) {
            document.head.appendChild(activateScriptElement(element));
        }
    }
    async mergeProvisionalElements() {
        const newHeadElements = [...this.newHeadProvisionalElements];
        for (const element of this.currentHeadProvisionalElements) {
            if (!this.isCurrentElementInElementList(element, newHeadElements)) {
                document.head.removeChild(element);
            }
        }
        for (const element of newHeadElements) {
            document.head.appendChild(element);
        }
    }
    isCurrentElementInElementList(element, elementList) {
        for (const [index, newElement] of elementList.entries()) {
            if (element.tagName == "TITLE") {
                if (newElement.tagName != "TITLE") {
                    continue;
                }
                if (element.innerHTML == newElement.innerHTML) {
                    elementList.splice(index, 1);
                    return true;
                }
            }
            if (newElement.isEqualNode(element)) {
                elementList.splice(index, 1);
                return true;
            }
        }
        return false;
    }
    removeCurrentHeadProvisionalElements() {
        for (const element of this.currentHeadProvisionalElements) {
            document.head.removeChild(element);
        }
    }
    copyNewHeadProvisionalElements() {
        for (const element of this.newHeadProvisionalElements) {
            document.head.appendChild(element);
        }
    }
    activateNewBody() {
        document.adoptNode(this.newElement);
        this.activateNewBodyScriptElements();
    }
    activateNewBodyScriptElements() {
        for (const inertScriptElement of this.newBodyScriptElements) {
            const activatedScriptElement = activateScriptElement(inertScriptElement);
            inertScriptElement.replaceWith(activatedScriptElement);
        }
    }
    async assignNewBody() {
        await this.renderElement(this.currentElement, this.newElement);
    }
    get newHeadStylesheetElements() {
        return this.newHeadSnapshot.getStylesheetElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get newHeadScriptElements() {
        return this.newHeadSnapshot.getScriptElementsNotInSnapshot(this.currentHeadSnapshot);
    }
    get currentHeadProvisionalElements() {
        return this.currentHeadSnapshot.provisionalElements;
    }
    get newHeadProvisionalElements() {
        return this.newHeadSnapshot.provisionalElements;
    }
    get newBodyScriptElements() {
        return this.newElement.querySelectorAll("script");
    }
}

class SnapshotCache {
    constructor(size) {
        this.keys = [];
        this.snapshots = {};
        this.size = size;
    }
    has(location) {
        return toCacheKey(location) in this.snapshots;
    }
    get(location) {
        if (this.has(location)) {
            const snapshot = this.read(location);
            this.touch(location);
            return snapshot;
        }
    }
    put(location, snapshot) {
        this.write(location, snapshot);
        this.touch(location);
        return snapshot;
    }
    clear() {
        this.snapshots = {};
    }
    read(location) {
        return this.snapshots[toCacheKey(location)];
    }
    write(location, snapshot) {
        this.snapshots[toCacheKey(location)] = snapshot;
    }
    touch(location) {
        const key = toCacheKey(location);
        const index = this.keys.indexOf(key);
        if (index > -1)
            this.keys.splice(index, 1);
        this.keys.unshift(key);
        this.trim();
    }
    trim() {
        for (const key of this.keys.splice(this.size)) {
            delete this.snapshots[key];
        }
    }
}

class PageView extends View {
    constructor() {
        super(...arguments);
        this.snapshotCache = new SnapshotCache(10);
        this.lastRenderedLocation = new URL(location.href);
        this.forceReloaded = false;
    }
    renderPage(snapshot, isPreview = false, willRender = true, visit) {
        const renderer = new PageRenderer(this.snapshot, snapshot, PageRenderer.renderElement, isPreview, willRender);
        if (!renderer.shouldRender) {
            this.forceReloaded = true;
        }
        else {
            visit === null || visit === void 0 ? void 0 : visit.changeHistory();
        }
        return this.render(renderer);
    }
    renderError(snapshot, visit) {
        visit === null || visit === void 0 ? void 0 : visit.changeHistory();
        const renderer = new ErrorRenderer(this.snapshot, snapshot, ErrorRenderer.renderElement, false);
        return this.render(renderer);
    }
    clearSnapshotCache() {
        this.snapshotCache.clear();
    }
    async cacheSnapshot(snapshot = this.snapshot) {
        if (snapshot.isCacheable) {
            this.delegate.viewWillCacheSnapshot();
            const { lastRenderedLocation: location } = this;
            await nextEventLoopTick();
            const cachedSnapshot = snapshot.clone();
            this.snapshotCache.put(location, cachedSnapshot);
            return cachedSnapshot;
        }
    }
    getCachedSnapshotForLocation(location) {
        return this.snapshotCache.get(location);
    }
    get snapshot() {
        return PageSnapshot.fromElement(this.element);
    }
}

class Preloader {
    constructor(delegate) {
        this.selector = "a[data-turbo-preload]";
        this.delegate = delegate;
    }
    get snapshotCache() {
        return this.delegate.navigator.view.snapshotCache;
    }
    start() {
        if (document.readyState === "loading") {
            return document.addEventListener("DOMContentLoaded", () => {
                this.preloadOnLoadLinksForView(document.body);
            });
        }
        else {
            this.preloadOnLoadLinksForView(document.body);
        }
    }
    preloadOnLoadLinksForView(element) {
        for (const link of element.querySelectorAll(this.selector)) {
            this.preloadURL(link);
        }
    }
    async preloadURL(link) {
        const location = new URL(link.href);
        if (this.snapshotCache.has(location)) {
            return;
        }
        try {
            const response = await fetch(location.toString(), { headers: { "VND.PREFETCH": "true", Accept: "text/html" } });
            const responseText = await response.text();
            const snapshot = PageSnapshot.fromHTMLString(responseText);
            this.snapshotCache.put(location, snapshot);
        }
        catch (_) {
        }
    }
}

class Session {
    constructor() {
        this.navigator = new Navigator(this);
        this.history = new History(this);
        this.preloader = new Preloader(this);
        this.view = new PageView(this, document.documentElement);
        this.adapter = new BrowserAdapter(this);
        this.pageObserver = new PageObserver(this);
        this.cacheObserver = new CacheObserver();
        this.linkClickObserver = new LinkClickObserver(this, window);
        this.formSubmitObserver = new FormSubmitObserver(this, document);
        this.scrollObserver = new ScrollObserver(this);
        this.streamObserver = new StreamObserver(this);
        this.formLinkClickObserver = new FormLinkClickObserver(this, document.documentElement);
        this.frameRedirector = new FrameRedirector(this, document.documentElement);
        this.streamMessageRenderer = new StreamMessageRenderer();
        this.drive = true;
        this.enabled = true;
        this.progressBarDelay = 500;
        this.started = false;
        this.formMode = "on";
    }
    start() {
        if (!this.started) {
            this.pageObserver.start();
            this.cacheObserver.start();
            this.formLinkClickObserver.start();
            this.linkClickObserver.start();
            this.formSubmitObserver.start();
            this.scrollObserver.start();
            this.streamObserver.start();
            this.frameRedirector.start();
            this.history.start();
            this.preloader.start();
            this.started = true;
            this.enabled = true;
        }
    }
    disable() {
        this.enabled = false;
    }
    stop() {
        if (this.started) {
            this.pageObserver.stop();
            this.cacheObserver.stop();
            this.formLinkClickObserver.stop();
            this.linkClickObserver.stop();
            this.formSubmitObserver.stop();
            this.scrollObserver.stop();
            this.streamObserver.stop();
            this.frameRedirector.stop();
            this.history.stop();
            this.started = false;
        }
    }
    registerAdapter(adapter) {
        this.adapter = adapter;
    }
    visit(location, options = {}) {
        const frameElement = options.frame ? document.getElementById(options.frame) : null;
        if (frameElement instanceof FrameElement) {
            frameElement.src = location.toString();
            frameElement.loaded;
        }
        else {
            this.navigator.proposeVisit(expandURL(location), options);
        }
    }
    connectStreamSource(source) {
        this.streamObserver.connectStreamSource(source);
    }
    disconnectStreamSource(source) {
        this.streamObserver.disconnectStreamSource(source);
    }
    renderStreamMessage(message) {
        this.streamMessageRenderer.render(StreamMessage.wrap(message));
    }
    clearCache() {
        this.view.clearSnapshotCache();
    }
    setProgressBarDelay(delay) {
        this.progressBarDelay = delay;
    }
    setFormMode(mode) {
        this.formMode = mode;
    }
    get location() {
        return this.history.location;
    }
    get restorationIdentifier() {
        return this.history.restorationIdentifier;
    }
    historyPoppedToLocationWithRestorationIdentifier(location, restorationIdentifier) {
        if (this.enabled) {
            this.navigator.startVisit(location, restorationIdentifier, {
                action: "restore",
                historyChanged: true,
            });
        }
        else {
            this.adapter.pageInvalidated({
                reason: "turbo_disabled",
            });
        }
    }
    scrollPositionChanged(position) {
        this.history.updateRestorationData({ scrollPosition: position });
    }
    willSubmitFormLinkToLocation(link, location) {
        return this.elementIsNavigatable(link) && locationIsVisitable(location, this.snapshot.rootLocation);
    }
    submittedFormLinkToLocation() { }
    willFollowLinkToLocation(link, location, event) {
        return (this.elementIsNavigatable(link) &&
            locationIsVisitable(location, this.snapshot.rootLocation) &&
            this.applicationAllowsFollowingLinkToLocation(link, location, event));
    }
    followedLinkToLocation(link, location) {
        const action = this.getActionForLink(link);
        const acceptsStreamResponse = link.hasAttribute("data-turbo-stream");
        this.visit(location.href, { action, acceptsStreamResponse });
    }
    allowsVisitingLocationWithAction(location, action) {
        return this.locationWithActionIsSamePage(location, action) || this.applicationAllowsVisitingLocation(location);
    }
    visitProposedToLocation(location, options) {
        extendURLWithDeprecatedProperties(location);
        this.adapter.visitProposedToLocation(location, options);
    }
    visitStarted(visit) {
        if (!visit.acceptsStreamResponse) {
            markAsBusy(document.documentElement);
        }
        extendURLWithDeprecatedProperties(visit.location);
        if (!visit.silent) {
            this.notifyApplicationAfterVisitingLocation(visit.location, visit.action);
        }
    }
    visitCompleted(visit) {
        clearBusyState(document.documentElement);
        this.notifyApplicationAfterPageLoad(visit.getTimingMetrics());
    }
    locationWithActionIsSamePage(location, action) {
        return this.navigator.locationWithActionIsSamePage(location, action);
    }
    visitScrolledToSamePageLocation(oldURL, newURL) {
        this.notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL);
    }
    willSubmitForm(form, submitter) {
        const action = getAction(form, submitter);
        return (this.submissionIsNavigatable(form, submitter) &&
            locationIsVisitable(expandURL(action), this.snapshot.rootLocation));
    }
    formSubmitted(form, submitter) {
        this.navigator.submitForm(form, submitter);
    }
    pageBecameInteractive() {
        this.view.lastRenderedLocation = this.location;
        this.notifyApplicationAfterPageLoad();
    }
    pageLoaded() {
        this.history.assumeControlOfScrollRestoration();
    }
    pageWillUnload() {
        this.history.relinquishControlOfScrollRestoration();
    }
    receivedMessageFromStream(message) {
        this.renderStreamMessage(message);
    }
    viewWillCacheSnapshot() {
        var _a;
        if (!((_a = this.navigator.currentVisit) === null || _a === void 0 ? void 0 : _a.silent)) {
            this.notifyApplicationBeforeCachingSnapshot();
        }
    }
    allowsImmediateRender({ element }, options) {
        const event = this.notifyApplicationBeforeRender(element, options);
        const { defaultPrevented, detail: { render }, } = event;
        if (this.view.renderer && render) {
            this.view.renderer.renderElement = render;
        }
        return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) {
        this.view.lastRenderedLocation = this.history.location;
        this.notifyApplicationAfterRender();
    }
    preloadOnLoadLinksForView(element) {
        this.preloader.preloadOnLoadLinksForView(element);
    }
    viewInvalidated(reason) {
        this.adapter.pageInvalidated(reason);
    }
    frameLoaded(frame) {
        this.notifyApplicationAfterFrameLoad(frame);
    }
    frameRendered(fetchResponse, frame) {
        this.notifyApplicationAfterFrameRender(fetchResponse, frame);
    }
    applicationAllowsFollowingLinkToLocation(link, location, ev) {
        const event = this.notifyApplicationAfterClickingLinkToLocation(link, location, ev);
        return !event.defaultPrevented;
    }
    applicationAllowsVisitingLocation(location) {
        const event = this.notifyApplicationBeforeVisitingLocation(location);
        return !event.defaultPrevented;
    }
    notifyApplicationAfterClickingLinkToLocation(link, location, event) {
        return dispatch("turbo:click", {
            target: link,
            detail: { url: location.href, originalEvent: event },
            cancelable: true,
        });
    }
    notifyApplicationBeforeVisitingLocation(location) {
        return dispatch("turbo:before-visit", {
            detail: { url: location.href },
            cancelable: true,
        });
    }
    notifyApplicationAfterVisitingLocation(location, action) {
        return dispatch("turbo:visit", { detail: { url: location.href, action } });
    }
    notifyApplicationBeforeCachingSnapshot() {
        return dispatch("turbo:before-cache");
    }
    notifyApplicationBeforeRender(newBody, options) {
        return dispatch("turbo:before-render", {
            detail: Object.assign({ newBody }, options),
            cancelable: true,
        });
    }
    notifyApplicationAfterRender() {
        return dispatch("turbo:render");
    }
    notifyApplicationAfterPageLoad(timing = {}) {
        return dispatch("turbo:load", {
            detail: { url: this.location.href, timing },
        });
    }
    notifyApplicationAfterVisitingSamePageLocation(oldURL, newURL) {
        dispatchEvent(new HashChangeEvent("hashchange", {
            oldURL: oldURL.toString(),
            newURL: newURL.toString(),
        }));
    }
    notifyApplicationAfterFrameLoad(frame) {
        return dispatch("turbo:frame-load", { target: frame });
    }
    notifyApplicationAfterFrameRender(fetchResponse, frame) {
        return dispatch("turbo:frame-render", {
            detail: { fetchResponse },
            target: frame,
            cancelable: true,
        });
    }
    submissionIsNavigatable(form, submitter) {
        if (this.formMode == "off") {
            return false;
        }
        else {
            const submitterIsNavigatable = submitter ? this.elementIsNavigatable(submitter) : true;
            if (this.formMode == "optin") {
                return submitterIsNavigatable && form.closest('[data-turbo="true"]') != null;
            }
            else {
                return submitterIsNavigatable && this.elementIsNavigatable(form);
            }
        }
    }
    elementIsNavigatable(element) {
        const container = findClosestRecursively(element, "[data-turbo]");
        const withinFrame = findClosestRecursively(element, "turbo-frame");
        if (this.drive || withinFrame) {
            if (container) {
                return container.getAttribute("data-turbo") != "false";
            }
            else {
                return true;
            }
        }
        else {
            if (container) {
                return container.getAttribute("data-turbo") == "true";
            }
            else {
                return false;
            }
        }
    }
    getActionForLink(link) {
        return getVisitAction(link) || "advance";
    }
    get snapshot() {
        return this.view.snapshot;
    }
}
function extendURLWithDeprecatedProperties(url) {
    Object.defineProperties(url, deprecatedLocationPropertyDescriptors);
}
const deprecatedLocationPropertyDescriptors = {
    absoluteURL: {
        get() {
            return this.toString();
        },
    },
};

class Cache {
    constructor(session) {
        this.session = session;
    }
    clear() {
        this.session.clearCache();
    }
    resetCacheControl() {
        this.setCacheControl("");
    }
    exemptPageFromCache() {
        this.setCacheControl("no-cache");
    }
    exemptPageFromPreview() {
        this.setCacheControl("no-preview");
    }
    setCacheControl(value) {
        setMetaContent("turbo-cache-control", value);
    }
}

const StreamActions = {
    after() {
        this.targetElements.forEach((e) => { var _a; return (_a = e.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e.nextSibling); });
    },
    append() {
        this.removeDuplicateTargetChildren();
        this.targetElements.forEach((e) => e.append(this.templateContent));
    },
    before() {
        this.targetElements.forEach((e) => { var _a; return (_a = e.parentElement) === null || _a === void 0 ? void 0 : _a.insertBefore(this.templateContent, e); });
    },
    prepend() {
        this.removeDuplicateTargetChildren();
        this.targetElements.forEach((e) => e.prepend(this.templateContent));
    },
    remove() {
        this.targetElements.forEach((e) => e.remove());
    },
    replace() {
        this.targetElements.forEach((e) => e.replaceWith(this.templateContent));
    },
    update() {
        this.targetElements.forEach((targetElement) => {
            targetElement.innerHTML = "";
            targetElement.append(this.templateContent);
        });
    },
};

const session = new Session();
const cache = new Cache(session);
const { navigator: navigator$1 } = session;
function start() {
    session.start();
}
function registerAdapter(adapter) {
    session.registerAdapter(adapter);
}
function visit(location, options) {
    session.visit(location, options);
}
function connectStreamSource(source) {
    session.connectStreamSource(source);
}
function disconnectStreamSource(source) {
    session.disconnectStreamSource(source);
}
function renderStreamMessage(message) {
    session.renderStreamMessage(message);
}
function clearCache() {
    console.warn("Please replace `Turbo.clearCache()` with `Turbo.cache.clear()`. The top-level function is deprecated and will be removed in a future version of Turbo.`");
    session.clearCache();
}
function setProgressBarDelay(delay) {
    session.setProgressBarDelay(delay);
}
function setConfirmMethod(confirmMethod) {
    FormSubmission.confirmMethod = confirmMethod;
}
function setFormMode(mode) {
    session.setFormMode(mode);
}

var Turbo = /*#__PURE__*/Object.freeze({
    __proto__: null,
    navigator: navigator$1,
    session: session,
    cache: cache,
    PageRenderer: PageRenderer,
    PageSnapshot: PageSnapshot,
    FrameRenderer: FrameRenderer,
    start: start,
    registerAdapter: registerAdapter,
    visit: visit,
    connectStreamSource: connectStreamSource,
    disconnectStreamSource: disconnectStreamSource,
    renderStreamMessage: renderStreamMessage,
    clearCache: clearCache,
    setProgressBarDelay: setProgressBarDelay,
    setConfirmMethod: setConfirmMethod,
    setFormMode: setFormMode,
    StreamActions: StreamActions
});

class TurboFrameMissingError extends Error {
}

class FrameController {
    constructor(element) {
        this.fetchResponseLoaded = (_fetchResponse) => { };
        this.currentFetchRequest = null;
        this.resolveVisitPromise = () => { };
        this.connected = false;
        this.hasBeenLoaded = false;
        this.ignoredAttributes = new Set();
        this.action = null;
        this.visitCachedSnapshot = ({ element }) => {
            const frame = element.querySelector("#" + this.element.id);
            if (frame && this.previousFrameElement) {
                frame.replaceChildren(...this.previousFrameElement.children);
            }
            delete this.previousFrameElement;
        };
        this.element = element;
        this.view = new FrameView(this, this.element);
        this.appearanceObserver = new AppearanceObserver(this, this.element);
        this.formLinkClickObserver = new FormLinkClickObserver(this, this.element);
        this.linkInterceptor = new LinkInterceptor(this, this.element);
        this.restorationIdentifier = uuid();
        this.formSubmitObserver = new FormSubmitObserver(this, this.element);
    }
    connect() {
        if (!this.connected) {
            this.connected = true;
            if (this.loadingStyle == FrameLoadingStyle.lazy) {
                this.appearanceObserver.start();
            }
            else {
                this.loadSourceURL();
            }
            this.formLinkClickObserver.start();
            this.linkInterceptor.start();
            this.formSubmitObserver.start();
        }
    }
    disconnect() {
        if (this.connected) {
            this.connected = false;
            this.appearanceObserver.stop();
            this.formLinkClickObserver.stop();
            this.linkInterceptor.stop();
            this.formSubmitObserver.stop();
        }
    }
    disabledChanged() {
        if (this.loadingStyle == FrameLoadingStyle.eager) {
            this.loadSourceURL();
        }
    }
    sourceURLChanged() {
        if (this.isIgnoringChangesTo("src"))
            return;
        if (this.element.isConnected) {
            this.complete = false;
        }
        if (this.loadingStyle == FrameLoadingStyle.eager || this.hasBeenLoaded) {
            this.loadSourceURL();
        }
    }
    sourceURLReloaded() {
        const { src } = this.element;
        this.ignoringChangesToAttribute("complete", () => {
            this.element.removeAttribute("complete");
        });
        this.element.src = null;
        this.element.src = src;
        return this.element.loaded;
    }
    completeChanged() {
        if (this.isIgnoringChangesTo("complete"))
            return;
        this.loadSourceURL();
    }
    loadingStyleChanged() {
        if (this.loadingStyle == FrameLoadingStyle.lazy) {
            this.appearanceObserver.start();
        }
        else {
            this.appearanceObserver.stop();
            this.loadSourceURL();
        }
    }
    async loadSourceURL() {
        if (this.enabled && this.isActive && !this.complete && this.sourceURL) {
            this.element.loaded = this.visit(expandURL(this.sourceURL));
            this.appearanceObserver.stop();
            await this.element.loaded;
            this.hasBeenLoaded = true;
        }
    }
    async loadResponse(fetchResponse) {
        if (fetchResponse.redirected || (fetchResponse.succeeded && fetchResponse.isHTML)) {
            this.sourceURL = fetchResponse.response.url;
        }
        try {
            const html = await fetchResponse.responseHTML;
            if (html) {
                const document = parseHTMLDocument(html);
                const pageSnapshot = PageSnapshot.fromDocument(document);
                if (pageSnapshot.isVisitable) {
                    await this.loadFrameResponse(fetchResponse, document);
                }
                else {
                    await this.handleUnvisitableFrameResponse(fetchResponse);
                }
            }
        }
        finally {
            this.fetchResponseLoaded = () => { };
        }
    }
    elementAppearedInViewport(element) {
        this.proposeVisitIfNavigatedWithAction(element, element);
        this.loadSourceURL();
    }
    willSubmitFormLinkToLocation(link) {
        return this.shouldInterceptNavigation(link);
    }
    submittedFormLinkToLocation(link, _location, form) {
        const frame = this.findFrameElement(link);
        if (frame)
            form.setAttribute("data-turbo-frame", frame.id);
    }
    shouldInterceptLinkClick(element, _location, _event) {
        return this.shouldInterceptNavigation(element);
    }
    linkClickIntercepted(element, location) {
        this.navigateFrame(element, location);
    }
    willSubmitForm(element, submitter) {
        return element.closest("turbo-frame") == this.element && this.shouldInterceptNavigation(element, submitter);
    }
    formSubmitted(element, submitter) {
        if (this.formSubmission) {
            this.formSubmission.stop();
        }
        this.formSubmission = new FormSubmission(this, element, submitter);
        const { fetchRequest } = this.formSubmission;
        this.prepareRequest(fetchRequest);
        this.formSubmission.start();
    }
    prepareRequest(request) {
        var _a;
        request.headers["Turbo-Frame"] = this.id;
        if ((_a = this.currentNavigationElement) === null || _a === void 0 ? void 0 : _a.hasAttribute("data-turbo-stream")) {
            request.acceptResponseType(StreamMessage.contentType);
        }
    }
    requestStarted(_request) {
        markAsBusy(this.element);
    }
    requestPreventedHandlingResponse(_request, _response) {
        this.resolveVisitPromise();
    }
    async requestSucceededWithResponse(request, response) {
        await this.loadResponse(response);
        this.resolveVisitPromise();
    }
    async requestFailedWithResponse(request, response) {
        await this.loadResponse(response);
        this.resolveVisitPromise();
    }
    requestErrored(request, error) {
        console.error(error);
        this.resolveVisitPromise();
    }
    requestFinished(_request) {
        clearBusyState(this.element);
    }
    formSubmissionStarted({ formElement }) {
        markAsBusy(formElement, this.findFrameElement(formElement));
    }
    formSubmissionSucceededWithResponse(formSubmission, response) {
        const frame = this.findFrameElement(formSubmission.formElement, formSubmission.submitter);
        frame.delegate.proposeVisitIfNavigatedWithAction(frame, formSubmission.formElement, formSubmission.submitter);
        frame.delegate.loadResponse(response);
        if (!formSubmission.isSafe) {
            session.clearCache();
        }
    }
    formSubmissionFailedWithResponse(formSubmission, fetchResponse) {
        this.element.delegate.loadResponse(fetchResponse);
        session.clearCache();
    }
    formSubmissionErrored(formSubmission, error) {
        console.error(error);
    }
    formSubmissionFinished({ formElement }) {
        clearBusyState(formElement, this.findFrameElement(formElement));
    }
    allowsImmediateRender({ element: newFrame }, options) {
        const event = dispatch("turbo:before-frame-render", {
            target: this.element,
            detail: Object.assign({ newFrame }, options),
            cancelable: true,
        });
        const { defaultPrevented, detail: { render }, } = event;
        if (this.view.renderer && render) {
            this.view.renderer.renderElement = render;
        }
        return !defaultPrevented;
    }
    viewRenderedSnapshot(_snapshot, _isPreview) { }
    preloadOnLoadLinksForView(element) {
        session.preloadOnLoadLinksForView(element);
    }
    viewInvalidated() { }
    willRenderFrame(currentElement, _newElement) {
        this.previousFrameElement = currentElement.cloneNode(true);
    }
    async loadFrameResponse(fetchResponse, document) {
        const newFrameElement = await this.extractForeignFrameElement(document.body);
        if (newFrameElement) {
            const snapshot = new Snapshot(newFrameElement);
            const renderer = new FrameRenderer(this, this.view.snapshot, snapshot, FrameRenderer.renderElement, false, false);
            if (this.view.renderPromise)
                await this.view.renderPromise;
            this.changeHistory();
            await this.view.render(renderer);
            this.complete = true;
            session.frameRendered(fetchResponse, this.element);
            session.frameLoaded(this.element);
            this.fetchResponseLoaded(fetchResponse);
        }
        else if (this.willHandleFrameMissingFromResponse(fetchResponse)) {
            this.handleFrameMissingFromResponse(fetchResponse);
        }
    }
    async visit(url) {
        var _a;
        const request = new FetchRequest(this, FetchMethod.get, url, new URLSearchParams(), this.element);
        (_a = this.currentFetchRequest) === null || _a === void 0 ? void 0 : _a.cancel();
        this.currentFetchRequest = request;
        return new Promise((resolve) => {
            this.resolveVisitPromise = () => {
                this.resolveVisitPromise = () => { };
                this.currentFetchRequest = null;
                resolve();
            };
            request.perform();
        });
    }
    navigateFrame(element, url, submitter) {
        const frame = this.findFrameElement(element, submitter);
        frame.delegate.proposeVisitIfNavigatedWithAction(frame, element, submitter);
        this.withCurrentNavigationElement(element, () => {
            frame.src = url;
        });
    }
    proposeVisitIfNavigatedWithAction(frame, element, submitter) {
        this.action = getVisitAction(submitter, element, frame);
        if (this.action) {
            const pageSnapshot = PageSnapshot.fromElement(frame).clone();
            const { visitCachedSnapshot } = frame.delegate;
            frame.delegate.fetchResponseLoaded = (fetchResponse) => {
                if (frame.src) {
                    const { statusCode, redirected } = fetchResponse;
                    const responseHTML = frame.ownerDocument.documentElement.outerHTML;
                    const response = { statusCode, redirected, responseHTML };
                    const options = {
                        response,
                        visitCachedSnapshot,
                        willRender: false,
                        updateHistory: false,
                        restorationIdentifier: this.restorationIdentifier,
                        snapshot: pageSnapshot,
                    };
                    if (this.action)
                        options.action = this.action;
                    session.visit(frame.src, options);
                }
            };
        }
    }
    changeHistory() {
        if (this.action) {
            const method = getHistoryMethodForAction(this.action);
            session.history.update(method, expandURL(this.element.src || ""), this.restorationIdentifier);
        }
    }
    async handleUnvisitableFrameResponse(fetchResponse) {
        console.warn(`The response (${fetchResponse.statusCode}) from <turbo-frame id="${this.element.id}"> is performing a full page visit due to turbo-visit-control.`);
        await this.visitResponse(fetchResponse.response);
    }
    willHandleFrameMissingFromResponse(fetchResponse) {
        this.element.setAttribute("complete", "");
        const response = fetchResponse.response;
        const visit = async (url, options = {}) => {
            if (url instanceof Response) {
                this.visitResponse(url);
            }
            else {
                session.visit(url, options);
            }
        };
        const event = dispatch("turbo:frame-missing", {
            target: this.element,
            detail: { response, visit },
            cancelable: true,
        });
        return !event.defaultPrevented;
    }
    handleFrameMissingFromResponse(fetchResponse) {
        this.view.missing();
        this.throwFrameMissingError(fetchResponse);
    }
    throwFrameMissingError(fetchResponse) {
        const message = `The response (${fetchResponse.statusCode}) did not contain the expected <turbo-frame id="${this.element.id}"> and will be ignored. To perform a full page visit instead, set turbo-visit-control to reload.`;
        throw new TurboFrameMissingError(message);
    }
    async visitResponse(response) {
        const wrapped = new FetchResponse(response);
        const responseHTML = await wrapped.responseHTML;
        const { location, redirected, statusCode } = wrapped;
        return session.visit(location, { response: { redirected, statusCode, responseHTML } });
    }
    findFrameElement(element, submitter) {
        var _a;
        const id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
        return (_a = getFrameElementById(id)) !== null && _a !== void 0 ? _a : this.element;
    }
    async extractForeignFrameElement(container) {
        let element;
        const id = CSS.escape(this.id);
        try {
            element = activateElement(container.querySelector(`turbo-frame#${id}`), this.sourceURL);
            if (element) {
                return element;
            }
            element = activateElement(container.querySelector(`turbo-frame[src][recurse~=${id}]`), this.sourceURL);
            if (element) {
                await element.loaded;
                return await this.extractForeignFrameElement(element);
            }
        }
        catch (error) {
            console.error(error);
            return new FrameElement();
        }
        return null;
    }
    formActionIsVisitable(form, submitter) {
        const action = getAction(form, submitter);
        return locationIsVisitable(expandURL(action), this.rootLocation);
    }
    shouldInterceptNavigation(element, submitter) {
        const id = getAttribute("data-turbo-frame", submitter, element) || this.element.getAttribute("target");
        if (element instanceof HTMLFormElement && !this.formActionIsVisitable(element, submitter)) {
            return false;
        }
        if (!this.enabled || id == "_top") {
            return false;
        }
        if (id) {
            const frameElement = getFrameElementById(id);
            if (frameElement) {
                return !frameElement.disabled;
            }
        }
        if (!session.elementIsNavigatable(element)) {
            return false;
        }
        if (submitter && !session.elementIsNavigatable(submitter)) {
            return false;
        }
        return true;
    }
    get id() {
        return this.element.id;
    }
    get enabled() {
        return !this.element.disabled;
    }
    get sourceURL() {
        if (this.element.src) {
            return this.element.src;
        }
    }
    set sourceURL(sourceURL) {
        this.ignoringChangesToAttribute("src", () => {
            this.element.src = sourceURL !== null && sourceURL !== void 0 ? sourceURL : null;
        });
    }
    get loadingStyle() {
        return this.element.loading;
    }
    get isLoading() {
        return this.formSubmission !== undefined || this.resolveVisitPromise() !== undefined;
    }
    get complete() {
        return this.element.hasAttribute("complete");
    }
    set complete(value) {
        this.ignoringChangesToAttribute("complete", () => {
            if (value) {
                this.element.setAttribute("complete", "");
            }
            else {
                this.element.removeAttribute("complete");
            }
        });
    }
    get isActive() {
        return this.element.isActive && this.connected;
    }
    get rootLocation() {
        var _a;
        const meta = this.element.ownerDocument.querySelector(`meta[name="turbo-root"]`);
        const root = (_a = meta === null || meta === void 0 ? void 0 : meta.content) !== null && _a !== void 0 ? _a : "/";
        return expandURL(root);
    }
    isIgnoringChangesTo(attributeName) {
        return this.ignoredAttributes.has(attributeName);
    }
    ignoringChangesToAttribute(attributeName, callback) {
        this.ignoredAttributes.add(attributeName);
        callback();
        this.ignoredAttributes.delete(attributeName);
    }
    withCurrentNavigationElement(element, callback) {
        this.currentNavigationElement = element;
        callback();
        delete this.currentNavigationElement;
    }
}
function getFrameElementById(id) {
    if (id != null) {
        const element = document.getElementById(id);
        if (element instanceof FrameElement) {
            return element;
        }
    }
}
function activateElement(element, currentURL) {
    if (element) {
        const src = element.getAttribute("src");
        if (src != null && currentURL != null && urlsAreEqual(src, currentURL)) {
            throw new Error(`Matching <turbo-frame id="${element.id}"> element has a source URL which references itself`);
        }
        if (element.ownerDocument !== document) {
            element = document.importNode(element, true);
        }
        if (element instanceof FrameElement) {
            element.connectedCallback();
            element.disconnectedCallback();
            return element;
        }
    }
}

class StreamElement extends HTMLElement {
    static async renderElement(newElement) {
        await newElement.performAction();
    }
    async connectedCallback() {
        try {
            await this.render();
        }
        catch (error) {
            console.error(error);
        }
        finally {
            this.disconnect();
        }
    }
    async render() {
        var _a;
        return ((_a = this.renderPromise) !== null && _a !== void 0 ? _a : (this.renderPromise = (async () => {
            const event = this.beforeRenderEvent;
            if (this.dispatchEvent(event)) {
                await nextAnimationFrame();
                await event.detail.render(this);
            }
        })()));
    }
    disconnect() {
        try {
            this.remove();
        }
        catch (_a) { }
    }
    removeDuplicateTargetChildren() {
        this.duplicateChildren.forEach((c) => c.remove());
    }
    get duplicateChildren() {
        var _a;
        const existingChildren = this.targetElements.flatMap((e) => [...e.children]).filter((c) => !!c.id);
        const newChildrenIds = [...(((_a = this.templateContent) === null || _a === void 0 ? void 0 : _a.children) || [])].filter((c) => !!c.id).map((c) => c.id);
        return existingChildren.filter((c) => newChildrenIds.includes(c.id));
    }
    get performAction() {
        if (this.action) {
            const actionFunction = StreamActions[this.action];
            if (actionFunction) {
                return actionFunction;
            }
            this.raise("unknown action");
        }
        this.raise("action attribute is missing");
    }
    get targetElements() {
        if (this.target) {
            return this.targetElementsById;
        }
        else if (this.targets) {
            return this.targetElementsByQuery;
        }
        else {
            this.raise("target or targets attribute is missing");
        }
    }
    get templateContent() {
        return this.templateElement.content.cloneNode(true);
    }
    get templateElement() {
        if (this.firstElementChild === null) {
            const template = this.ownerDocument.createElement("template");
            this.appendChild(template);
            return template;
        }
        else if (this.firstElementChild instanceof HTMLTemplateElement) {
            return this.firstElementChild;
        }
        this.raise("first child element must be a <template> element");
    }
    get action() {
        return this.getAttribute("action");
    }
    get target() {
        return this.getAttribute("target");
    }
    get targets() {
        return this.getAttribute("targets");
    }
    raise(message) {
        throw new Error(`${this.description}: ${message}`);
    }
    get description() {
        var _a, _b;
        return (_b = ((_a = this.outerHTML.match(/<[^>]+>/)) !== null && _a !== void 0 ? _a : [])[0]) !== null && _b !== void 0 ? _b : "<turbo-stream>";
    }
    get beforeRenderEvent() {
        return new CustomEvent("turbo:before-stream-render", {
            bubbles: true,
            cancelable: true,
            detail: { newStream: this, render: StreamElement.renderElement },
        });
    }
    get targetElementsById() {
        var _a;
        const element = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.getElementById(this.target);
        if (element !== null) {
            return [element];
        }
        else {
            return [];
        }
    }
    get targetElementsByQuery() {
        var _a;
        const elements = (_a = this.ownerDocument) === null || _a === void 0 ? void 0 : _a.querySelectorAll(this.targets);
        if (elements.length !== 0) {
            return Array.prototype.slice.call(elements);
        }
        else {
            return [];
        }
    }
}

class StreamSourceElement extends HTMLElement {
    constructor() {
        super(...arguments);
        this.streamSource = null;
    }
    connectedCallback() {
        this.streamSource = this.src.match(/^ws{1,2}:/) ? new WebSocket(this.src) : new EventSource(this.src);
        connectStreamSource(this.streamSource);
    }
    disconnectedCallback() {
        if (this.streamSource) {
            disconnectStreamSource(this.streamSource);
        }
    }
    get src() {
        return this.getAttribute("src") || "";
    }
}

FrameElement.delegateConstructor = FrameController;
if (customElements.get("turbo-frame") === undefined) {
    customElements.define("turbo-frame", FrameElement);
}
if (customElements.get("turbo-stream") === undefined) {
    customElements.define("turbo-stream", StreamElement);
}
if (customElements.get("turbo-stream-source") === undefined) {
    customElements.define("turbo-stream-source", StreamSourceElement);
}

(() => {
    let element = document.currentScript;
    if (!element)
        return;
    if (element.hasAttribute("data-turbo-suppress-warning"))
        return;
    element = element.parentElement;
    while (element) {
        if (element == document.body) {
            return console.warn(unindent `
        You are loading Turbo from a <script> element inside the <body> element. This is probably not what you meant to do!

        Load your applicationâs JavaScript bundle inside the <head> element instead. <script> elements in <body> are evaluated with each page change.

        For more information, see: https://turbo.hotwired.dev/handbook/building#working-with-script-elements

        ââ
        Suppress this warning by adding a "data-turbo-suppress-warning" attribute to: %s
      `, element.outerHTML);
        }
        element = element.parentElement;
    }
})();

window.Turbo = Turbo;
start();




/***/ }),

/***/ "./resources/assets/js/accountants/accountants.js":
/*!********************************************************!*\
  !*** ./resources/assets/js/accountants/accountants.js ***!
  \********************************************************/
/***/ (() => {

"use strict";


listen('click', '.delete-accountant-btn', function (event) {
  var accountantId = $(event.currentTarget).attr('data-id');
  deleteItem($('#accountantURL').val() + '/' + accountantId, '#accountantsTbl', $('#Accountant').val());
});
listenChange('.accountant-status', function (event) {
  var accountantId = $(event.currentTarget).attr('data-id');
  updateAccountantStatus(accountantId);
});
listen('click', '#resetFilter', function () {
  $('#accountant_filter_status').val(0).trigger('change');
  hideDropdownManually($('#accountantFilterBtn'), $('.dropdown-menu'));
});
listenChange('#accountant_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
function updateAccountantStatus(id) {
  $.ajax({
    url: $('#accountantURL').val() + '/' + +id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        // tbl.ajax.reload(null, false);
        livewire.emit('refresh');
      }
    }
  });
}

/***/ }),

/***/ "./resources/assets/js/accountants/accountants_data_listing.js":
/*!*********************************************************************!*\
  !*** ./resources/assets/js/accountants/accountants_data_listing.js ***!
  \*********************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/accountants/create-edit.js":
/*!********************************************************!*\
  !*** ./resources/assets/js/accountants/create-edit.js ***!
  \********************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadAccountantCreateEdit);
function loadAccountantCreateEdit() {
  if ($('#createAccountantForm').length || $('#editAccountantForm').length) {
    var bloodGroupElement = $('#bloodGroup');
    var birthDateElement = $('#birthDate');
    var createAccountantForm = $('#createAccountantForm');
    var editAccountantForm = $('#editAccountantForm');
    if (birthDateElement.length) {
      $('#birthDate').flatpickr({
        format: 'YYYY-MM-DD',
        useCurrent: true,
        sideBySide: true,
        maxDate: new Date(),
        locale: $('.userCurrentLanguage').val()
      });
    }
    if (createAccountantForm.length) {
      createAccountantForm.find('input:text:visible:first').focus();
    }
    if (editAccountantForm.length) {
      editAccountantForm.find('input:text:visible:first').focus();
    }
    if (bloodGroupElement.length) {
      $('#bloodGroup').select2({
        width: '100%'
      });
    }
  } else {
    return false;
  }
}
listenChange('.accountantProfileImage', function () {
  var extension = isValidImage($(this), '#customValidationErrorsBox');
  console.log(extension);
  if (!isEmpty(extension) && extension != false) {
    $('#customValidationErrorsBox').html('').hide();
    displayDocument(this, '#customValidationErrorsBox', extension);
  } else {
    $(this).val('');
    $('#customValidationErrorsBox').removeClass('d-none hide');
    $('#customValidationErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=customValidationErrorsBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
listenChange('.editAccountantProfileImage', function () {
  var extension = isValidImage($(this), '#editAccountantErrorBox');
  if (!isEmpty(extension) && extension != false) {
    $('#editAccountantErrorBox').html('').hide();
    displayDocument(this, '#editAccountantErrorBox', extension);
  } else {
    $(this).val('');
    $('#editAccountantErrorBox').removeClass('d-none hide');
    $('#editAccountantErrorBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=editAccountantErrorBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
function isValidImage(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['jpg', 'png', 'jpeg']) == -1) {
    return false;
  }
  $(validationMessageSelector).hide();
  return true;
}
;
listenClick('.remove-accountant-image', function () {
  defaultImagePreview('#previewImage', 1);
});
listenSubmit('#createAccountantForm, #editAccountantForm', function () {
  if ($('.error-msg').text() !== '') {
    $('#phoneNumber').focus();
    return false;
  }
});

/***/ }),

/***/ "./resources/assets/js/accounts/accounts.js":
/*!**************************************************!*\
  !*** ./resources/assets/js/accounts/accounts.js ***!
  \**************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadAccountCreateEdit);
function loadAccountCreateEdit() {
  if (!$('#addAccountForm').length && !$('#editAccountForm').length) {
    return false;
  }
}
listenChange('.account-status', function (event) {
  var accountId = $(event.currentTarget).attr('data-id');
  updateAccountStatus(accountId);
});
function updateAccountStatus(id) {
  $.ajax({
    url: $('.indexAccountUrl').val() + '/' + +id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        // $(tableName).DataTable().ajax.reload(null, false);
        livewire.emit('refresh');
      }
    }
  });
}
listenSubmit('#addAccountForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnAccountSave');
  loadingButton.button('loading');
  var data = {
    'formSelector': $(this),
    'url': $('#indexAccountCreateUrl').val(),
    'type': 'POST'
    // 'tableSelector': tableName,
  };

  newRecord(data, loadingButton, '#add_accounts_modal');
});
listenSubmit('#editAccountForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editAccountSave');
  loadingButton.button('loading');
  var id = $('#accountId').val();
  var url = $('#indexAccountUrl').val() + '/' + +id;
  var data = {
    'formSelector': $(this),
    'url': url,
    'type': 'PUT'
    // 'tableSelector': tableName,
  };

  if ($('#accountShowUrl').length) {
    editRecordWithForm(data, loadingButton, '#edit_accounts_modal');
    window.location.href = $('#accountShowUrl').val();
  } else {
    editRecordWithForm(data, loadingButton, '#edit_accounts_modal');
  }
});
listen('click', '.account-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var accountId = $(event.currentTarget).attr('data-id');
  renderAccountData(accountId);
});
listen('click', '.account-delete-btn', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexAccountUrl').val() + '/' + +id, '', $('#Account').val());
});
function renderAccountData(id) {
  $.ajax({
    url: $('#indexAccountUrl').val() + '/' + +id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#accountId').val(result.data.id);
        $('#editName').val(result.data.name);
        $('#editDescription').val(result.data.description);
        if (result.data.status) {
          $('#editIsActive').val(1).prop('checked', true);
        }
        if (result.data.type == 1) {
          $('#editDebit').prop('checked', true);
        } else {
          $('#editCredit').prop('checked', true);
        }
        $('#edit_accounts_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenChange('#account_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listenChange('#account_filter_type', function () {
  window.livewire.emit('changeTypeFilter', 'account_filter_type', $(this).val());
});
listen('click', '#accountResetFilter', function () {
  $('#account_filter_status, #account_filter_type').val(0).trigger('change');
  hideDropdownManually($('#accountantFilterBtn'), $('.dropdown-menu'));
});
listenHiddenBsModal('#add_accounts_modal', function () {
  resetModalForm('#addAccountForm', '#validationErrorsBox');
});
listenHiddenBsModal('#edit_accounts_modal', function () {
  resetModalForm('#editAccountForm', '#editValidationErrorsBox');
});

/***/ }),

/***/ "./resources/assets/js/accounts/accounts_details_edit.js":
/*!***************************************************************!*\
  !*** ./resources/assets/js/accounts/accounts_details_edit.js ***!
  \***************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/accounts/payments_list.js":
/*!*******************************************************!*\
  !*** ./resources/assets/js/accounts/payments_list.js ***!
  \*******************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/admins/admin.js":
/*!*********************************************!*\
  !*** ./resources/assets/js/admins/admin.js ***!
  \*********************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadAdminData);
function loadAdminData() {
  $('#adminBirthDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: true,
    sideBySide: true,
    maxDate: new Date(),
    locale: $('.userCurrentLanguage').val()
  });
  $('#editAdminBirthDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: true,
    sideBySide: true,
    maxDate: new Date(),
    locale: $('.userCurrentLanguage').val()
  });
  listenClick('.delete-admin-btn', function (event) {
    var adminId = $(event.currentTarget).attr('data-id');
    deleteItem($('#adminURL').val() + '/' + adminId, '', $('#admin').val());
  });
}
listenSubmit('#createAdminForm, #editAdminForm', function () {
  if ($('.error-msg').text() !== '') {
    $('.phoneNumber').focus();
    return false;
  }
});
listenChange('.admin-status', function (event) {
  var accountantId = $(event.currentTarget).attr('data-id');
  updateAccountantStatus(accountantId);
});
function updateAccountantStatus(id) {
  $.ajax({
    url: $('#adminURL').val() + '/' + +id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenChange('#admin_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listen('click', '#accountResetFilter', function () {
  $('#admin_filter_status').val(0).trigger('change');
  hideDropdownManually($('#adminFilterBtn'), $('.dropdown-menu'));
});
listenChange('.adminProfileImage', function () {
  var extension = isValidImage($(this), '#adminErrorBox');
  if (!isEmpty(extension) && extension != false) {
    $('#adminErrorBox').html('').hide();
    displayDocument(this, '#customValidationErrorsBox', extension);
  } else {
    $(this).val('');
    $('#adminErrorBox').removeClass('d-none hide');
    $('#adminErrorBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=adminErrorBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
listenChange('.adminProfileImage', function () {
  var extension = isValidImage($(this), '#editAdminErrorBox');
  console.log(extension);
  if (!isEmpty(extension) && extension != false) {
    $('#editAdminErrorBox').html('').hide();
    displayDocument(this, '#customValidationErrorsBox', extension);
  } else {
    $(this).val('');
    $('#editAdminErrorBox').removeClass('d-none hide');
    $('#editAdminErrorBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=editAdminErrorBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
function isValidImage(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['jpg', 'png', 'jpeg']) == -1) {
    return false;
  }
  $(validationMessageSelector).hide();
  return true;
}
;

/***/ }),

/***/ "./resources/assets/js/advanced_payments/advanced_payments.js":
/*!********************************************************************!*\
  !*** ./resources/assets/js/advanced_payments/advanced_payments.js ***!
  \********************************************************************/
/***/ (() => {

"use strict";


listen('click', '.advance-payment-delete-btn', function (event) {
  var advancedPaymentId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexAdvancedPaymentUrl').val() + '/' + advancedPaymentId, '', $('#advancedPayment').val());
});

/***/ }),

/***/ "./resources/assets/js/advanced_payments/create-edit.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/advanced_payments/create-edit.js ***!
  \**************************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadAdvancePaymentCreateEdit);
function loadAdvancePaymentCreateEdit() {
  if (!$('#addAdvancedPaymentForm').length && !$('#editAdvancedPaymentsForm').length) {
    return false;
  }
  var dateElement = $('#advancedPaymentDate');
  var editDateElement = $('#editAdvancedPaymentDate');
  var patientIdElement = $('#advancePaymentPatientId');
  var editPatientIdElement = $('#editPatientId');
  if (dateElement.length) {
    $('#advancedPaymentDate').flatpickr({
      defaultDate: new Date(),
      dateFormat: 'Y-m-d',
      locale: $('.userCurrentLanguage').val()
    });
  }
  if (editDateElement.length) {
    $('#editAdvancedPaymentDate').flatpickr({
      dateFormat: 'Y-m-d',
      locale: $('.userCurrentLanguage').val()
    });
  }
  if (patientIdElement.length) {
    $('#advancePaymentPatientId').select2({
      dropdownParent: $('#add_advanced_payments_modal')
    });
  }
  if (editPatientIdElement.length) {
    $('#editPatientId').select2({
      dropdownParent: $('#edit_advanced_payments_modal')
    });
  }
}
listenShownBsModal('#add_advanced_payments_modal, #edit_advanced_payments_modal', function () {
  $('#patientId, #editPatientId:first').focus();
  $('#advancePaymentPatientId').select2({
    width: '100%',
    dropdownParent: $('#add_advanced_payments_modal')
  });
  $('#editPatientId').select2({
    dropdownParent: $('#edit_advanced_payments_modal')
  });
  var receiptNo = Math.random().toString(36).substr(2, 8).toUpperCase();
  $('#receiptNoId').val(receiptNo);
});
listenSubmit('#addAdvancedPaymentForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#advancedPaymentSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#indexAdvancePaymentCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_advanced_payments_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#advancedPaymentErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listen('click', '.advance-payment-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var advancedPaymentId = $(event.currentTarget).attr('data-id');
  renderAdvancePaymentData(advancedPaymentId);
});
function renderAdvancePaymentData(id) {
  $.ajax({
    url: route('advanced-payments.edit', id),
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#advancePaymentId').val(result.data.id);
        $('#editPatientId').val(result.data.patient_id).trigger('change.select2');
        $('#editReceiptNo').val(result.data.receipt_no);
        $('#editAmount').val(result.data.amount);
        $('.price-input').trigger('input');
        $('#editAdvancedPaymentDate').val(format(result.data.date, 'YYYY-MM-DD'));
        $('#edit_advanced_payments_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#editAdvancedPaymentsForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editAdvancedPaymentSave');
  loadingButton.button('loading');
  var id = $('#advancePaymentId').val();
  $.ajax({
    url: $('.advancedPaymentUrl').val() + '/' + id,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_advanced_payments_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_advanced_payments_modal', function () {
  resetModalForm('#addAdvancedPaymentForm', '#advancedPaymentErrorsBox');
  $('#advancedPaymentDate').flatpickr({
    defaultDate: new Date(),
    dateFormat: 'Y-m-d',
    locale: $('.userCurrentLanguage').val()
  });
  $('#advancePaymentPatientId').val('').trigger('change.select2');
});
listenHiddenBsModal('#edit_advanced_payments_modal', function () {
  resetModalForm('#editAdvancedPaymentsForm', '#editAdvancedPaymentErrorsBox');
});

/***/ }),

/***/ "./resources/assets/js/ambulance_call/ambulance_calls.js":
/*!***************************************************************!*\
  !*** ./resources/assets/js/ambulance_call/ambulance_calls.js ***!
  \***************************************************************/
/***/ (() => {

"use strict";


listenClick('.ambulance-call-delete-btn', function (event) {
  var ambulanceCallId = $(event.currentTarget).attr('data-id');
  deleteItem($('#showAmbulanceCallUrl').val() + '/' + ambulanceCallId, '', $('#ambulanceCalls').val());
});

/***/ }),

/***/ "./resources/assets/js/ambulance_call/create-edit.js":
/*!***********************************************************!*\
  !*** ./resources/assets/js/ambulance_call/create-edit.js ***!
  \***********************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadAmbulanceCallCreateEdit);
function loadAmbulanceCallCreateEdit() {
  if ($('#createAmbulanceCall').length || $('#editAmbulanceCall').length) {
    var callAmbulanceIdElement = $('#callAmbulanceId');
    var ambulanceCallPatientIdElement = $('#ambulanceCallPatientId');
    var ambulanceCallDateElement = $('#ambulanceCallDate');
    if (callAmbulanceIdElement.length) {
      $('#callAmbulanceId').select2({
        width: '100%'
      });
    }
    if (ambulanceCallPatientIdElement.length) {
      $('#ambulanceCallPatientId').select2({
        width: '100%'
      });
      // $('#ambulanceCallPatientId').focus();
    }

    if (ambulanceCallDateElement.length) {
      $('#ambulanceCallDate').flatpickr({
        format: 'YYYY-MM-DD',
        useCurrent: true,
        sideBySide: true,
        locale: $('.userCurrentLanguage').val()
      });
    }
    $('.price-input').trigger('input');
  } else {
    return false;
  }
}
listenChange('#callAmbulanceId', function () {
  $('#ambulanceCallDriverName').val('');
  if (!isEmpty($(this).val())) {
    $.ajax({
      url: $('.getDriverNameUrl').val(),
      type: 'get',
      dataType: 'json',
      data: {
        id: $(this).val()
      },
      success: function success(result) {
        $('#ambulanceCallDriverName').val(result.data);
      },
      error: function error(result) {
        printErrorMessage('#ambulanceCallValidationErrorsBox', result);
      }
    });
  }
});
listenSubmit('#createAmbulanceCall, #editAmbulanceCall', function () {
  $('#ambulanceCallSaveBtn').attr('disabled', true);
});

/***/ }),

/***/ "./resources/assets/js/ambulances/ambulances.js":
/*!******************************************************!*\
  !*** ./resources/assets/js/ambulances/ambulances.js ***!
  \******************************************************/
/***/ (() => {

"use strict";


listen('click', '.ambulance-delete-btn', function (event) {
  var ambulanceId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexAmbulanceUrl').val() + '/' + ambulanceId, '', $('#Ambulance').val());
});
listenChange('.ambulance-status', function (event) {
  var ambulanceId = $(event.currentTarget).attr('data-id');
  statusAmbulance(ambulanceId);
});
function statusAmbulance(id) {
  $.ajax({
    url: $('#indexAmbulanceUrl').val() + '/' + id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        // tbl.ajax.reload(null, false);
        livewire.emit('refresh');
      }
    }
  });
}
listenChange('#ambulance_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listenClick('#ambulanceResetFilter', function () {
  $('#ambulance_filter_status').val(0).trigger('change');
  hideDropdownManually($('#ambulanceFilterBtn'), $('.dropdown-menu'));
});

/***/ }),

/***/ "./resources/assets/js/ambulances/create-edit.js":
/*!*******************************************************!*\
  !*** ./resources/assets/js/ambulances/create-edit.js ***!
  \*******************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadAmbulanceCreateEdit);
function loadAmbulanceCreateEdit() {
  if ($('#createAmbulanceForm').length || $('#editAmbulanceForm').length) {
    var vehicleTypeElement = $('#vehicleType');
    var createAmbulanceFormElement = $('#createAmbulanceForm');
    var editAmbulanceFormElement = $('#editAmbulanceForm');
    if (vehicleTypeElement.length) {
      $('#vehicleType').select2({
        width: '100%'
      });
    }
    if (createAmbulanceFormElement.length) {
      $('#createAmbulanceForm').find('input:text:visible:first').focus();
    }
    if (editAmbulanceFormElement.length) {
      $('#editAmbulanceForm').find('input:text:visible:first').focus();
    }
  } else {
    return false;
  }
}
listenSubmit('#createAmbulanceForm, #editAmbulanceForm', function () {
  $('.btnSave').attr('disabled', true);
  if ($('.error-msg').text() !== '') {
    $('.phoneNumber').focus();
    $('.btnSave').attr('disabled', false);
    return false;
  }
});
listen('keyup keypress', '#createAmbulanceForm, #editAmbulanceForm', function (e) {
  var keyCode = e.keyCode || e.which;
  if (keyCode === 13) {
    e.preventDefault();
    return false;
  }
});

/***/ }),

/***/ "./resources/assets/js/appointment_calendar/appointment_calendar.js":
/*!**************************************************************************!*\
  !*** ./resources/assets/js/appointment_calendar/appointment_calendar.js ***!
  \**************************************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadAppointmentCalender);
function loadAppointmentCalender() {
  if (!$('#calendar').length) {
    return false;
  }
  var patientIdAppointmentElement = $('#patientIdAppointment');
  var doctorIdAppointmentElement = $('#doctorIdAppointment');
  if (patientIdAppointmentElement.length) {
    $('#patientIdAppointment').select2({
      width: '100%',
      dropdownParent: $('#addAppointmentModal')
    });
  }
  if (doctorIdAppointmentElement.length) {
    $('#doctorIdAppointment').select2({
      width: '100%',
      dropdownParent: $('#addAppointmentModal')
    });
  }
  var calendarEl = document.getElementById('calendar');
  if ($('#calendar').length) {
    screenLock();
    $.ajax({
      url: 'calendar-list',
      type: 'GET',
      dataType: 'json',
      success: function success(obj) {
        screenUnLock();
        var calendar = new FullCalendar.Calendar(calendarEl, {
          themeSystem: 'bootstrap5',
          height: 750,
          locale: $('.getLanguage').val(),
          headerToolbar: {
            left: 'title',
            center: 'prev,next today',
            right: 'dayGridMonth,timeGridWeek,timeGridDay'
          },
          buttonText: {
            today: $('#todayText').val(),
            month: $('#monthText').val(),
            week: $('#weekText').val(),
            day: $('#dayText').val()
          },
          initialDate: new Date(),
          initialView: 'dayGridMonth',
          editable: false,
          selectable: true,
          selectMirror: true,
          timeZone: 'UTC',
          dayMaxEvents: true,
          select: function select(start) {
            $('#opdDateAppointment').val(moment(start.startStr).format('YYYY-MM-DD'));
            var today = moment().format('YYYY-MM-DD');
            if (start.startStr >= today) {
              if ($('#isDoctor').val() != 1) {
                $('#addAppointmentModal').modal('show');
              }
            }
          },
          eventDidMount: function eventDidMount(event, element) {
            $(element).tooltip({
              title: event.title,
              container: 'body'
            });
          },
          events: obj.data,
          eventTimeFormat: {
            hour12: true,
            hour: '2-digit',
            minute: '2-digit'
          },
          loading: function loading(isLoading) {
            if (!isLoading) {
              setTimeout(function () {
                $('#calendar button.fc-today-button').removeClass('disabled').prop('disabled', false);
              }, 100);
            }
          },
          eventClick: function eventClick(e) {
            showAppointmentDetails(e.event.id);
          }
        });
        calendar.render();
      },
      error: function error(obj) {
        console.log(obj.responseJSON.message);
      }
    });
  }
}
listenShownBsModal('#addAppointmentModal', function () {
  $('#patientIdAppointment:first').focus();
});
function showAppointmentDetails(appointmentId) {
  $.ajax({
    url: 'appointment-detail' + '/' + appointmentId,
    type: 'GET',
    beforeSend: function beforeSend() {
      screenLock();
    },
    success: function success(data) {
      $('#showPatientName').text(data.data.patient);
      $('#showDepartmentName').text(data.data.department);
      $('#showDoctorName').text(data.data.doctor);
      $('#showOpdDate').text(data.data.opdDate);
      $('#showStatus').text(data.data.status);
      $('#showIsCompleted').text(data.data.is_completed);
      $('#showProblem').text(addNewlines(data.data.problem, 30));
      $('.tooltip ').tooltip('hide');
      $('#appointmentDetailModal').modal('show');
    },
    complete: function complete() {
      screenUnLock();
    }
  });
}
;
function addNewlines(str, chr) {
  var result = '';
  if (str != null) {
    while (str.length > 0) {
      result += str.substring(0, chr) + '\n';
      str = str.substring(chr);
    }
    return result;
  } else return 'N/A';
}
;

//parseIn date_time
function parseIn(date_time) {
  var d = new Date();
  d.setHours(date_time.substring(11, 13));
  d.setMinutes(date_time.substring(14, 16));
  return d;
}
;

//make time slot list
function getTimeIntervals(time1, time2, duration) {
  var arr = [];
  while (time1 < time2) {
    arr.push(time1.toTimeString().substring(0, 5));
    time1.setMinutes(time1.getMinutes() + duration);
  }
  return arr;
}
;

//slot click change color
var calendersSelectedTime;
listenClick('.time-interval', function (event) {
  var appointmentId = $(event.currentTarget).attr('data-id');
  if ($(this).data('id') == appointmentId) {
    if ($(this).parent().hasClass('booked')) {
      $('.time-slot-book').css('background-color', '#ffa0a0');
    }
  }
  calendersSelectedTime = $(this).text();
  $('.time-slot').removeClass('time-slot-book');
  $(this).parent().addClass('time-slot-book');
});

//create appointment
listenSubmit('#calenderAppointmentForm', function (event) {
  if (calendersSelectedTime == null || calendersSelectedTime == '') {
    $('#calenderAppointmentErrorsBox').show().removeClass('d-none').html('Please select appointment time slot');
    $('.alert-danger').delay(5000).slideUp(300, function () {
      $('.alert-danger').attr('style', 'display:none');
    });
    return false;
  }
  event.preventDefault();
  screenLock();
  var formData = $(this).serialize() + '&time=' + calendersSelectedTime;
  $.ajax({
    url: $('#calenderAppointmentSaveUrl').val(),
    type: 'POST',
    dataType: 'json',
    data: formData,
    success: function success(result) {
      displaySuccessMessage(result.message);
      window.location.href = $('#calenderIndexPage').val();
    },
    error: function error(result) {
      printErrorMessage('#calenderAppointmentErrorsBox', result);
      screenUnLock();
    }
  });
});
var calenderDoctorId;
var calenderDoctorChange = false;
var calenderSelectedDate;
var calenderIntervals;
var calenderAlreadyCreateTimeSlot;
listenChange('#doctorIdAppointment', function () {
  if (calenderDoctorChange) {
    $('.error-message').css('display', 'none');
    calenderDoctorChange = true;
  }
  $('.error-message').css('display', 'none');
  calenderDoctorId = $(this).val();
  calenderDoctorChange = true;
  if ($('#opdDateAppointment').val() !== '') {
    $('.doctor-schedule').css('display', 'none');
    $('.error-message').css('display', 'none');
    $('.available-slot-heading').css('display', 'none');
    $('.color-information').css('display', 'none');
    $('.time-slot').remove();
    if ($('#doctorIdAppointment').val() == '') {
      $('#calenderAppointmentErrorsBox').show().html('Please select Doctor');
      $('#calenderAppointmentErrorsBox').delay(5000).fadeOut();
      $('#opdDateAppointment').val('');
      $('#opdDateAppointment').data('DateTimePicker').clear();
      return false;
    }
    var weekday = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    calenderDoctorChange = $('#opdDateAppointment').val();
    var selected = new Date(calenderDoctorChange);
    var dayName = weekday[selected.getDay()];
    //if dayName is blank, then ajax call not run.
    if (dayName == null || dayName == '') {
      return false;
    }

    //get doctor schedule list with time slot.
    $.ajax({
      type: 'GET',
      url: $('#doctorScheduleList').val(),
      data: {
        day_name: dayName,
        doctor_id: calenderDoctorId
      },
      success: function success(result) {
        if (result.success) {
          if (result.data != '') {
            if (result.data.scheduleDay.length != 0) {
              var doctorStartTime = calenderDoctorChange + ' ' + result.data.scheduleDay[0].available_from;
              var doctorEndTime = calenderDoctorChange + ' ' + result.data.scheduleDay[0].available_to;
              var doctorPatientTime = result.data.perPatientTime[0].per_patient_time;

              //perPatientTime convert to Minuter
              var a = doctorPatientTime.split(':'); // split it at the colons
              var minutes = +a[0] * 60 + +a[1]; // convert to minute

              //parse In
              var startTime = parseIn(doctorStartTime);
              var endTime = parseIn(doctorEndTime);

              //call to getTimeIntervals function
              calenderIntervals = getTimeIntervals(startTime, endTime, minutes);

              //if intervals array length is grater then 0 then process
              if (calenderIntervals.length > 0) {
                $('.available-slot-heading').css('display', 'block');
                $('.color-information').css('display', 'block');
                var index;
                var timeStlots = '';
                for (index = 0; index < calenderIntervals.length; ++index) {
                  var data = [{
                    'index': index,
                    'timeSlot': calenderIntervals[index]
                  }];
                  var timeSlot = prepareTemplateRender('#appointmentSlotTemplate', data);
                  timeStlots += timeSlot;
                }
                $('.available-slot').append(timeStlots);
              }

              // display Day Name and time
              if (result.data.scheduleDay[0].available_from != '00:00:00' && result.data.scheduleDay[0].available_to != '00:00:00' && doctorStartTime != doctorEndTime) {
                $('.doctor-schedule').css('display', 'block');
                $('.color-information').css('display', 'block');
                $('.day-name').html(result.data.scheduleDay[0].available_on);
                $('.schedule-time').html('[' + result.data.scheduleDay[0].available_from + ' - ' + result.data.scheduleDay[0].available_to + ']');
              } else {
                $('.doctor-schedule').css('display', 'none');
                $('.color-information').css('display', 'none');
                $('.error-message').css('display', 'block');
                $('.error-message').html('Doctor Schedule not available this date.');
              }
            } else {
              $('.doctor-schedule').css('display', 'none');
              $('.color-information').css('display', 'none');
              $('.error-message').css('display', 'block');
              $('.error-message').html('Doctor Schedule not available this date.');
            }
          }
        }
      }
    });
    if ($('.isCreate').val()) {
      var getCreateTimeSlot = function getCreateTimeSlot() {
        var data = null;
        if ($('.isCreate').val()) {
          data = {
            editSelectedDate: calenderDoctorChange,
            doctor_id: calenderDoctorId
          };
        }
        $.ajax({
          url: $('#getBookingSlot').val(),
          type: 'GET',
          data: data,
          success: function success(result) {
            calenderAlreadyCreateTimeSlot = result.data.bookingSlotArr;
            if (result.data.hasOwnProperty('onlyTime')) {
              if (result.data.bookingSlotArr.length > 0) {
                editTimeSlot = result.data.onlyTime.toString();
                $.each(result.data.bookingSlotArr, function (index, value) {
                  $.each(calenderIntervals, function (i, v) {
                    if (value == v) {
                      $('.time-interval').each(function () {
                        if ($(this).data('id') == i) {
                          if ($(this).html() != editTimeSlot) {
                            $(this).parent().css({
                              'background-color': '#ffa721',
                              'border': '1px solid #ffa721',
                              'color': '#ffffff'
                            });
                            $(this).parent().addClass('booked');
                            $(this).parent().children().prop('disabled', true);
                          }
                        }
                      });
                    }
                  });
                });
              }
              $('.time-interval').each(function () {
                if ($(this).html() == editTimeSlot && result.data.bookingSlotArr.length > 0) {
                  $(this).parent().addClass('time-slot-book');
                  $(this).parent().removeClass('booked');
                  $(this).parent().children().prop('disabled', false);
                  $(this).click();
                }
              });
            } else if (calenderAlreadyCreateTimeSlot.length > 0) {
              $.each(calenderAlreadyCreateTimeSlot, function (index, value) {
                $.each(calenderIntervals, function (i, v) {
                  if (value == v) {
                    $('.time-interval').each(function () {
                      if ($(this).data('id') == i) {
                        $(this).parent().addClass('time-slot-book');
                        $('.time-slot-book').css({
                          'background-color': '#ffa721',
                          'border': '1px solid #ffa721',
                          'color': '#ffffff'
                        });
                        $(this).parent().addClass('booked');
                        $(this).parent().children().prop('disabled', true);
                      }
                    });
                  }
                });
              });
            }
          }
        });
      };
      var delayCall = 200;
      setTimeout(getCreateTimeSlot, delayCall);
    }
  }
});

// reset the modal data after cancel/close
listenHiddenBsModal('#addAppointmentModal', function () {
  resetModalForm('#calenderAppointmentForm', '#calenderAppointmentErrorsBox');
  $('.day-name').html('');
  $('.schedule-time').html('');
  $('.doctor-schedule').css('display', 'none');
  $('.error-message').css('display', 'none');
  $('.available-slot-heading').css('display', 'none');
  $('.available-slot').html('');
  $('.color-information').css('display', 'none');
  calendersSelectedTime = null;
  $('#patientIdAppointment, #doctorIdAppointment').val('').trigger('change.select2');
});

/***/ }),

/***/ "./resources/assets/js/appointments/appointments.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/appointments/appointments.js ***!
  \**********************************************************/
/***/ (() => {

"use strict";


function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
document.addEventListener('turbo:load', loadAppointmentTable);
function loadAppointmentTable() {
  var appointmentTimeRange = $('#time_range');
  var appointmentStart = moment().startOf('week');
  var appointmentEnd = moment().endOf('week');
  var appointmentStartTime = '';
  var appointmentEndTime = '';
  if ($('#appointmentStatus').length) {
    $('#appointmentStatus').select2();
  }
  function cb(appointmentStart, appointmentEnd) {
    $('#time_range').html(appointmentStart.format('MMM D, YYYY') + ' - ' + appointmentEnd.format('MMM D, YYYY'));
  }
  if (appointmentTimeRange.length) {
    var _ranges;
    Lang.setLocale($('.userCurrentLanguage').val());
    appointmentTimeRange.daterangepicker({
      startDate: appointmentStart,
      endDate: appointmentEnd,
      locale: {
        customRangeLabel: Lang.get('messages.common.custom'),
        applyLabel: Lang.get('messages.common.apply'),
        cancelLabel: Lang.get('messages.common.cancel'),
        fromLabel: Lang.get('messages.common.from'),
        toLabel: Lang.get('messages.common.to'),
        monthNames: [Lang.get('messages.months.jan'), Lang.get('messages.months.feb'), Lang.get('messages.months.mar'), Lang.get('messages.months.apr'), Lang.get('messages.months.may'), Lang.get('messages.months.jun'), Lang.get('messages.months.jul'), Lang.get('messages.months.aug'), Lang.get('messages.months.sep'), Lang.get('messages.months.oct'), Lang.get('messages.months.nov'), Lang.get('messages.months.dec')],
        daysOfWeek: [Lang.get('messages.weekdays.sun'), Lang.get('messages.weekdays.mon'), Lang.get('messages.weekdays.tue'), Lang.get('messages.weekdays.wed'), Lang.get('messages.weekdays.thu'), Lang.get('messages.weekdays.fri'), Lang.get('messages.weekdays.sat')]
      },
      ranges: (_ranges = {}, _defineProperty(_ranges, Lang.get('messages.appointment.today'), [moment(), moment()]), _defineProperty(_ranges, Lang.get('messages.appointment.yesterday'), [moment().subtract(1, 'days'), moment().subtract(1, 'days')]), _defineProperty(_ranges, Lang.get('messages.appointment.this_week'), [moment().startOf('week'), moment().endOf('week')]), _defineProperty(_ranges, Lang.get('messages.appointment.last_7_days'), [moment().subtract(6, 'days'), moment()]), _defineProperty(_ranges, Lang.get('messages.appointment.last_30_days'), [moment().subtract(29, 'days'), moment()]), _defineProperty(_ranges, Lang.get('messages.appointment.this_month'), [moment().startOf('month'), moment().endOf('month')]), _defineProperty(_ranges, Lang.get('messages.appointment.last_month'), [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]), _ranges)
    }, cb);
    cb(appointmentStart, appointmentEnd);
    appointmentTimeRange.on('apply.daterangepicker', function (ev, picker) {
      appointmentStartTime = picker.startDate.format('YYYY-MM-D  H:mm:ss');
      appointmentEndTime = picker.endDate.format('YYYY-MM-D  H:mm:ss');
      window.livewire.emit('changeDateFilter', 'statusFilter', [appointmentStartTime, appointmentEndTime]);
    });
  }
  listenClick('.appointment-delete-btn', function (event) {
    var appointmentId = $(event.currentTarget).attr('data-id');
    deleteItem($('.appointmentURL').val() + '/' + appointmentId, '', $('#Appointment').val());
  });
  listenChange('#appointmentStatus', function () {
    var status = $(this).val();
    window.livewire.emit('changeFilter', 'statusFilter', [appointmentStartTime, appointmentEndTime, status]);
  });
  listenClick('#appointmentResetFilter', function () {
    var appointmentTimeRange = $('#time_range');
    appointmentStartTime = appointmentTimeRange.data('daterangepicker').setStartDate(moment().startOf('week').format('MM/DD/YYYY'));
    appointmentEndTime = appointmentTimeRange.data('daterangepicker').setEndDate(moment().endOf('week').format('MM/DD/YYYY'));
    $('#appointmentStatus').val(2).trigger('change');
    hideDropdownManually($('#appointmentFilterBtn'), $('.dropdown-menu'));
  });
  listenClick('.appointment-complete-status', function (event) {
    var appointmentId = $(event.currentTarget).attr('data-id');
    completeAppointment($('.appointmentURL').val() + '/' + appointmentId + '/status', '#appointmentsTbl', Lang.get('messages.web_menu.appointment') + ' ' + Lang.get('messages.user.status'));
  });
  listenClick('.cancel-appointment', function () {
    var appointmentId = $(this).attr('data-id');
    cancelAppointment($('.appointmentURL').val() + '/' + appointmentId + '/cancel', '', Lang.get('messages.web_menu.appointment'));
  });
  function completeAppointment(url, tableId, header, appointmentId) {
    swal({
      title: Lang.get('messages.appointment.change_status'),
      text: Lang.get('messages.appointment.are_you_sure_want_to_change') + ' ' + header + ' ?',
      type: 'warning',
      icon: 'warning',
      showCancelButton: true,
      closeOnConfirm: false,
      confirmButtonColor: '#50cd89',
      showLoaderOnConfirm: true,
      buttons: {
        confirm: Lang.get('messages.common.yes'),
        cancel: Lang.get('messages.common.no')
      }
    }).then(function (result) {
      if (result) {
        completeAppointmentAjax(url, tableId, header, appointmentId);
      }
    });
  }
  function completeAppointmentAjax(url, tableId, header, appointmentId) {
    $.ajax({
      url: url,
      type: 'POST',
      success: function success(obj) {
        if (obj.success) {
          Livewire.emit('refresh');
        }
        swal({
          title: Lang.get('messages.appointment.changed_appointment'),
          text: header + ' ' + Lang.get('messages.appointment.has_been_changed'),
          icon: 'success',
          confirmButtonColor: '#50cd89',
          buttons: {
            confirm: Lang.get('messages.common.ok')
          },
          timer: 2000
        });
      },
      error: function error(data) {
        swal({
          title: 'Error',
          icon: 'error',
          text: data.responseJSON.message,
          type: 'error',
          confirmButtonColor: '#50cd89',
          buttons: {
            confirm: Lang.get('messages.common.ok')
          },
          timer: 5000
        });
      }
    });
  }
}

/***/ }),

/***/ "./resources/assets/js/appointments/create-edit.js":
/*!*********************************************************!*\
  !*** ./resources/assets/js/appointments/create-edit.js ***!
  \*********************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadAppointmentCreateEdit);
function loadAppointmentCreateEdit() {
  if ($('#appointmentForm').length || $('#editAppointmentForm').length) {
    //parseIn date_time
    var appointmentParseIn = function appointmentParseIn(date_time) {
      var d = new Date();
      d.setHours(date_time.substring(11, 13));
      d.setMinutes(date_time.substring(14, 16));
      return d;
    }; //make time slot list
    var appointmentGetTimeIntervals = function appointmentGetTimeIntervals(time1, time2, duration) {
      var arr = [];
      while (time1 < time2) {
        arr.push(time1.toTimeString().substring(0, 5));
        time1.setMinutes(time1.getMinutes() + duration);
      }
      return arr;
    }; //slot click change color
    var appointmentPatientIdElement = $('#appointmentPatientId');
    var appointmentDoctorIdElement = $('#appointmentDoctorId');
    var appointmentDepartmentIdElement = $('#appointmentDepartmentId');
    if (appointmentPatientIdElement.length) {
      $('#appointmentPatientId').select2({
        width: '100%'
      });
      $('#appointmentPatientId').first().focus();
    }
    if (appointmentDoctorIdElement.length) {
      $('#appointmentDoctorId').select2({
        width: '100%'
      });
    }
    if (appointmentDepartmentIdElement.length) {
      $('#appointmentDepartmentId').select2({
        width: '100%'
      });
    }

    // $('#opdDate').datetimepicker(DatetimepickerDefaults({
    //     format: 'YYYY-MM-DD',
    //     sideBySide: true,
    //     minDate: moment().subtract(1, 'days'),
    //     useCurrent: false,
    // }));

    var appointmentSelectedDate;
    var appointmentIntervals;
    var appointmentAlreadyCreateTimeSlot;
    Lang.setLocale($('.userCurrentLanguage').val());
    var opdDate = $('.opdDate').flatpickr({
      enableTime: false,
      // minDate: moment().subtract(1, 'days').format(),
      minDate: moment(new Date()).format('YYYY-MM-DD'),
      dateFormat: 'Y-m-d',
      locale: $('.userCurrentLanguage').val(),
      onChange: function onChange(selectedDates, dateStr, instance) {
        if (!isEmpty(dateStr)) {
          $('.doctor-schedule').css('display', 'none');
          $('.error-message').css('display', 'none');
          $('.available-slot-heading').css('display', 'none');
          $('.color-information').css('display', 'none');
          $('.available-slot').css('display', 'none');
          $('.time-slot').remove();
          if ($('#appointmentDepartmentId').val() == '') {
            $('#createAppointmentErrorsBox').show().html(Lang.get('messages.appointment.please_select_doctor_department'));
            $('#createAppointmentErrorsBox').delay(5000).fadeOut();
            $('.opdDate').val('');
            opdDate.clear();
            return false;
          } else if ($('#appointmentDoctorId').val() == '') {
            $('#createAppointmentErrorsBox').show().html(Lang.get('messages.appointment.please_select_doctor'));
            $('#createAppointmentErrorsBox').delay(5000).fadeOut();
            $('.opdDate').val('');
            opdDate.clear();
            return false;
          }
          var weekday = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
          var selected = new Date(dateStr);
          var dayName = weekday[selected.getDay()];
          appointmentSelectedDate = dateStr;

          //if dayName is blank, then ajax call not run.
          if (dayName == null || dayName == '') {
            return false;
          }

          //get doctor schedule list with time slot.
          $.ajax({
            type: 'GET',
            url: $('.doctorScheduleList').val(),
            data: {
              day_name: dayName,
              doctor_id: appointmentDoctorId
            },
            success: function success(result) {
              if (result.success) {
                if (result.data != '') {
                  if (result.data.scheduleDay.length != 0) {
                    var availableFrom = '';
                    if (moment(new Date()).format('YYYY-MM-DD') === dateStr) {
                      availableFrom = moment().ceil(moment.duration(result.data.perPatientTime[0].per_patient_time).asMinutes(), 'minute');
                      // availableFrom = moment.duration( result.data.perPatientTime[0].per_patient_time).asMinutes();
                      availableFrom = moment(availableFrom.toString()).format('H:mm:ss');
                      // availableFrom = moment(new Date()).
                      //     add(result.data.perPatientTime[0].per_patient_time,
                      //         'minutes').
                      //     format('H:mm:ss');
                      // availableFrom = result.data.scheduleDay[0].available_from
                    } else {
                      availableFrom = result.data.scheduleDay[0].available_from;
                    }
                    var doctorStartTime = appointmentSelectedDate + ' ' + availableFrom;
                    var doctorEndTime = appointmentSelectedDate + ' ' + result.data.scheduleDay[0].available_to;
                    var doctorPatientTime = result.data.perPatientTime[0].per_patient_time;
                    //perPatientTime convert to Minute
                    var a = doctorPatientTime.split(':'); // split it at the colons
                    var minutes = +a[0] * 60 + +a[1]; // convert to minute

                    //parse In
                    var startTime = appointmentParseIn(doctorStartTime);
                    var endTime = appointmentParseIn(doctorEndTime);

                    //call to getTimeIntervals function
                    appointmentIntervals = appointmentGetTimeIntervals(startTime, endTime, minutes);

                    //if intervals array length is grater then 0 then process
                    if (appointmentIntervals.length > 0) {
                      $('.available-slot-heading').css('display', 'block');
                      $('.color-information').css('display', 'block');
                      $('.available-slot').css('display', 'block');
                      var index;
                      var timeStlots = '';
                      for (index = 0; index < appointmentIntervals.length; ++index) {
                        var data = [{
                          'index': index,
                          'timeSlot': appointmentIntervals[index]
                        }];
                        var timeSlot = prepareTemplateRender('#appointmentSlotTemplate', data);
                        timeStlots += timeSlot;
                      }
                      $('.available-slot').append(timeStlots);
                    }

                    // display Day Name and time
                    if (availableFrom != '00:00:00' && result.data.scheduleDay[0].available_to != '00:00:00' && doctorStartTime != doctorEndTime) {
                      $('.doctor-schedule').css('display', 'block');
                      $('.color-information').css('display', 'block');
                      $('.available-slot').css('display', 'block');
                      $('.day-name').html(result.data.scheduleDay[0].available_on);
                      $('.schedule-time').html('[' + availableFrom + ' - ' + result.data.scheduleDay[0].available_to + ']');
                    } else {
                      $('.doctor-schedule').css('display', 'none');
                      $('.color-information').css('display', 'none');
                      $('.available-slot').css('display', 'none');
                      $('.error-message').css('display', 'block');
                      $('.error-message').html(Lang.get('messages.appointment.doctor_schedule_not_available_on_this_date'));
                    }
                  } else {
                    $('.doctor-schedule').css('display', 'none');
                    $('.color-information').css('display', 'none');
                    $('.available-slot').css('display', 'none');
                    $('.error-message').css('display', 'block');
                    $('.error-message').html(Lang.get('messages.appointment.doctor_schedule_not_available_on_this_date'));
                  }
                }
              }
            },
            error: function error(_error) {
              displayErrorMessage(_error.responseJSON.message);
            }
          });
          if ($('.isCreate').val() || $('.isEdit').val()) {
            var getCreateTimeSlot = function getCreateTimeSlot() {
              if ($('.isCreate').val()) {
                var data = {
                  editSelectedDate: appointmentSelectedDate,
                  doctor_id: appointmentDoctorId
                };
              } else {
                var data = {
                  editSelectedDate: appointmentSelectedDate,
                  editId: $('#appointmentEditsID').val(),
                  doctor_id: appointmentDoctorId
                };
              }
              $.ajax({
                url: $('.getBookingSlot').val(),
                type: 'GET',
                data: data,
                success: function success(result) {
                  appointmentAlreadyCreateTimeSlot = result.data.bookingSlotArr;
                  if (result.data.hasOwnProperty('onlyTime')) {
                    if (result.data.bookingSlotArr.length > 0) {
                      appointmentEditTimeSlot = result.data.onlyTime.toString();
                      $.each(result.data.bookingSlotArr, function (index, value) {
                        $.each(appointmentIntervals, function (i, v) {
                          if (value == v) {
                            $('.time-interval').each(function () {
                              if ($(this).data('id') == i) {
                                if ($(this).html() != appointmentEditTimeSlot) {
                                  $(this).parent().css({
                                    'background-color': '#ffa721',
                                    'border': '1px solid #ffa721',
                                    'color': '#ffffff'
                                  });
                                  $(this).parent().addClass('booked');
                                  $(this).parent().children().prop('disabled', true);
                                }
                              }
                            });
                          }
                        });
                      });
                    }
                    $('.time-interval').each(function () {
                      if ($(this).html() == appointmentEditTimeSlot && result.data.bookingSlotArr.length > 0) {
                        $(this).parent().addClass('time-slot-book');
                        $(this).parent().removeClass('booked');
                        $(this).parent().children().prop('disabled', false);
                        $(this).click();
                      }
                    });
                  } else if (appointmentAlreadyCreateTimeSlot.length > 0) {
                    $.each(appointmentAlreadyCreateTimeSlot, function (index, value) {
                      $.each(appointmentIntervals, function (i, v) {
                        if (value == v) {
                          $('.time-interval').each(function () {
                            if ($(this).data('id') == i) {
                              $(this).parent().addClass('time-slot-book');
                              $('.time-slot-book').css({
                                'background-color': '#ffa721',
                                'border': '1px solid #ffa721',
                                'color': '#ffffff'
                              });
                              $(this).parent().addClass('booked');
                              $(this).parent().children().prop('disabled', true);
                            }
                          });
                        }
                      });
                    });
                  }
                }
              });
            };
            var delayCall = 200;
            setTimeout(getCreateTimeSlot, delayCall);
          }
        }
      }
    });
    listenChange('#appointmentDepartmentId', function () {
      $('.error-message').css('display', 'none');
      // $('#opdDate').data('DateTimePicker').clear();
      opdDate.clear();
      $('.doctor-schedule').css('display', 'none');
      $('.available-slot-heading').css('display', 'none');
      $('.available-slot').css('display', 'none');
      $.ajax({
        url: $('.doctorDepartmentUrl').val(),
        type: 'get',
        dataType: 'json',
        data: {
          id: $(this).val()
        },
        success: function success(data) {
          $('#appointmentDoctorId').empty();
          $('#appointmentDoctorId').append($('<option value="">Select Doctor</option>'));
          $.each(data.data, function (i, v) {
            $('#appointmentDoctorId').append($('<option></option>').attr('value', i).text(v));
          });
        }
      });
    });
    var appointmentDoctorId;
    var appointmentDoctorChange = false;
    listenChange('#appointmentDoctorId', function () {
      if (appointmentDoctorChange) {
        $('.doctor-schedule').css('display', 'none');
        $('.available-slot-heading').css('display', 'none');
        $('.available-slot').css('display', 'none');
        $('.error-message').css('display', 'none');
        opdDate.clear();
        appointmentDoctorChange = true;
      }
      $('.error-message').css('display', 'none');
      appointmentDoctorId = $(this).val();
      appointmentDoctorChange = true;
    });

    // if edit record then trigger change
    var appointmentEditTimeSlot;
    if ($('.isEdit').val()) {
      $('#appointmentDoctorId').trigger('change', function (event) {
        appointmentDoctorId = $(this).val();
      });
      $('.opdDate').trigger('dp.change', function () {
        var selected = new Date($(this).val());
      });
    }
    var appointmentSelectedTime;
    listenClick('.time-interval', function (event) {
      var appointmentId = $(event.currentTarget).attr('data-id');
      if ($(this).data('id') == appointmentId) {
        if ($(this).parent().hasClass('booked')) {
          $('.time-slot-book').css('background-color', '#ffa0a0');
        }
      }
      appointmentSelectedTime = $(this).text();
      $('.time-slot').removeClass('time-slot-book');
      $(this).parent().addClass('time-slot-book');
    });

    //create appointment
    listenSubmit('#appointmentForm', function (event) {
      if (appointmentSelectedTime == null || appointmentSelectedTime == '') {
        $('#createAppointmentErrorsBox').show().removeClass('d-none').html(Lang.get('messages.appointment.please_select_appointment_time_slot'));
        return false;
      }
      event.preventDefault();
      screenLock();
      var formData = $(this).serialize() + '&time=' + appointmentSelectedTime;
      $.ajax({
        url: $('#saveAppointmentURLID').val(),
        type: 'POST',
        dataType: 'json',
        data: formData,
        success: function success(result) {
          displaySuccessMessage(result.message);
          window.location.href = $('.appointmentIndexPage').val();
        },
        error: function error(result) {
          printErrorMessage('#createAppointmentErrorsBox', result);
          screenUnLock();
        },
        complete: function complete() {
          processingBtn('#appointmentForm', '#saveAppointment');
        }
      });
    });
    var appointmentEditTimeSlot;
    listenClick('.time-interval', function () {
      appointmentEditTimeSlot = $(this).text();
    });

    //Edit appointment
    listenSubmit('#editAppointmentForm', function (event) {
      if (appointmentEditTimeSlot == null || appointmentEditTimeSlot == '') {
        $('#editAppointmentErrorsBox').show().html(Lang.get('messages.appointment.please_select_appointment_time_slot'));
        return false;
      }
      event.preventDefault();
      screenLock();
      var formData = $(this).serialize() + '&time=' + appointmentEditTimeSlot;
      $.ajax({
        url: $('#appointmentUpdateUrl').val(),
        type: 'POST',
        dataType: 'json',
        data: formData,
        success: function success(result) {
          displaySuccessMessage(result.message);
          window.location.href = $('.appointmentIndexPage').val();
        },
        error: function error(result) {
          printErrorMessage('#editAppointmentErrorsBox', result);
          screenUnLock();
        }
      });
    });
  } else {
    return false;
  }
}

/***/ }),

/***/ "./resources/assets/js/appointments/patient_appointment.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/js/appointments/patient_appointment.js ***!
  \*****************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/bed_assign/bed_assign.js":
/*!******************************************************!*\
  !*** ./resources/assets/js/bed_assign/bed_assign.js ***!
  \******************************************************/
/***/ (() => {

"use strict";


listenClick('.bed-assign-delete-btn', function (event) {
  var bedAssignId = $(event.currentTarget).attr('data-id');
  deleteItem($('#bedAssignUrl').val() + '/' + bedAssignId, '', $('#bedAssign').val());
});
listenChange('.bed-assign-status', function (event) {
  var bedAssignId = $(event.currentTarget).attr('data-id');
  updateBedAssignStatus(bedAssignId);
});
listen('click', '#bedAssignResetFilter', function () {
  $('#bed_assigns_filter_status').val(0).trigger('change');
  hideDropdownManually($('#bedAssignFilterBtn'), $('.dropdown-menu'));
});
listenChange('#bed_assigns_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
function updateBedAssignStatus(id) {
  $.ajax({
    url: $('#bedAssignUrl').val() + '/' + +id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        Livewire.emit('refresh');
      }
    }
  });
}

/***/ }),

/***/ "./resources/assets/js/bed_assign/create-edit.js":
/*!*******************************************************!*\
  !*** ./resources/assets/js/bed_assign/create-edit.js ***!
  \*******************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadBedAssignCreateEdit);
function loadBedAssignCreateEdit() {
  $('#BedAssignDate').flatpickr({
    enableTime: true,
    // defaultDate: new Date(),
    locale: $('.userCurrentLanguage').val(),
    dateFormat: 'Y-m-d H:i',
    onChange: function onChange(selectedDates, dateStr, instance) {
      var minDate = moment($('#assignDate').val()).add(1, 'days').format();
      if (typeof dischargeFlatPicker != 'undefined') {
        dischargeFlatPicker.set('minDate', minDate);
      }
    }
  });
  if ($('#editBedAssign').length) {
    setTimeout(function () {
      $('#caseId').trigger('change');
      $('#BedAssignDate').trigger('dp.change');
    }, 300);
    var _dischargeFlatPicker = $('#BedAssignDischargeDate').flatpickr({
      enableTime: true,
      dateFormat: 'Y-m-d H:i',
      locale: $('.userCurrentLanguage').val()
    });
    var minDate = moment($('#BedAssignDate').val()).add(1, 'days').format();
    _dischargeFlatPicker.set('minDate', minDate);
  }
  if ($('#createBedAssign').length || $('#editBedAssign').length) {
    var caseIdElement = $('#caseId');
    var BedAssignBedIdElement = $('#BedAssignBedId');
    var ipdPatientIdElement = $('#ipdPatientId');
    if (caseIdElement.length) {
      $('#caseId').select2({
        width: '100%'
      });
      $('#caseId').first().focus();
    }
    if (BedAssignBedIdElement.length) {
      $('#BedAssignBedId').select2({
        width: '100%'
      });
    }
    if (ipdPatientIdElement.length) {
      $('#ipdPatientId').select2({
        placeholder: 'Select IPD Patient',
        width: '100%'
      });
    }
  } else {
    return false;
  }
}
var dischargeFlatPicker = undefined;
listenSubmit('#createBedAssign, #editBedAssign', function () {
  $('#saveBtn').attr('disabled', true);
  if ($('#validationErrorsBox').text() !== '') {
    $('#BedAssignSaveBtn').attr('disabled', false);
  }
});
listenChange('#caseId', function () {
  if ($(this).val() !== '') {
    $.ajax({
      url: $('#ipdPatientListUrl').val(),
      type: 'get',
      dataType: 'json',
      data: {
        id: $(this).val()
      },
      success: function success(data) {
        if (data.data.length !== 0) {
          $('#ipdPatientId').empty();
          $('#ipdPatientId').removeAttr('disabled');
          if ($('.isEdit').val()) {
            $.each(data.data, function (i, v) {
              if ($('.ipdPatientId').val() == v) {
                $('#ipdPatientId').append($('<option></option>').attr('value', i).attr('selected', true).text(v));
              } else {
                $('#ipdPatientId').append($('<option></option>').attr('value', i).text(v));
              }
            });
          } else {
            $.each(data.data, function (i, v) {
              $('#ipdPatientId').append($('<option></option>').attr('value', i).text(v));
            });
          }
        } else {
          $('#ipdPatientId').prop('disabled', true);
        }
      }
    });
  }
  $('#ipdPatientId').empty();
  $('#ipdPatientId').append('<option>No IPD Patient Found</option>');
  $('#ipdPatientId').prop('disabled', true);
});

/***/ }),

/***/ "./resources/assets/js/bed_types/bed_types.js":
/*!****************************************************!*\
  !*** ./resources/assets/js/bed_types/bed_types.js ***!
  \****************************************************/
/***/ (() => {

listenClick('.bed-type-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var bedTypeId = $(event.currentTarget).attr('data-id');
  renderBedTypesData(bedTypeId);
});
listenClick('.bed-type-delete-btn', function (event) {
  var bedTypeId = $(event.currentTarget).attr('data-id');
  deleteItem($('#bedTypesUrl').val() + '/' + bedTypeId, '', $('#bedType').val());
});
function renderBedTypesData(id) {
  $.ajax({
    url: $('#bedTypesUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var bedType = result.data;
        $('#bedTypeId').val(bedType.id);
        $('#BedTypeEditTitle').val(bedType.title);
        $('#BedTypeEditDescription').val(bedType.description);
        $('#edit_bed_types_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
;
listenSubmit('#addNewBedTypeForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#BedBtnSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#bedTypesCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_bed_types_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#validationErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenSubmit('#BedTypeEditForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#BedTyeBtnEditSave');
  loadingButton.button('loading');
  var id = $('#bedTypeId').val();
  $.ajax({
    url: $('#bedTypesUrl').val() + '/' + id,
    type: 'put',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_bed_types_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_bed_types_modal', function () {
  resetModalForm('#addNewBedTypeForm', '#validationErrorsBox');
});
listenHiddenBsModal('#edit_bed_types_modal', function () {
  resetModalForm('#BedTypeEditForm', '#editValidationErrorsBox');
});

/***/ }),

/***/ "./resources/assets/js/bed_types/bed_types_details_edit.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/js/bed_types/bed_types_details_edit.js ***!
  \*****************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/bed_types/beds_view_list.js":
/*!*********************************************************!*\
  !*** ./resources/assets/js/bed_types/beds_view_list.js ***!
  \*********************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/beds/beds-details-edit.js":
/*!*******************************************************!*\
  !*** ./resources/assets/js/beds/beds-details-edit.js ***!
  \*******************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/beds/beds.js":
/*!******************************************!*\
  !*** ./resources/assets/js/beds/beds.js ***!
  \******************************************/
/***/ (() => {

"use strict";


listenClick('.bed-delete-btn', function (event) {
  var bedId = $(event.currentTarget).data('id');
  deleteItem($('.bedUrl').val() + '/' + bedId, ' ', Lang.get('messages.patient_admission.bed'));
});

// status activation deactivation change event
listenChange('.bed-status', function (event) {
  var bedId = $(event.currentTarget).data('id');
  activeDeActiveBedStatus(bedId);
});
listenChange('#bed_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listenClick('#bedResetFilter', function () {
  $('#bed_filter_status').val(0).trigger('change');
  hideDropdownManually($('#bedAssignFilterBtn'), $('.dropdown-menu'));
});

// activate de-activate Status
function activeDeActiveBedStatus(id) {
  $.ajax({
    url: $('.bedUrl').val() + '/' + id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        // tbl.ajax.reload(null, false);
        livewire.emit('refresh');
      }
    }
  });
}
;

/***/ }),

/***/ "./resources/assets/js/beds/beds_assigns_view_list.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/beds/beds_assigns_view_list.js ***!
  \************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/beds/bulk_beds.js":
/*!***********************************************!*\
  !*** ./resources/assets/js/beds/bulk_beds.js ***!
  \***********************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadBedsBulkCreate);
function loadBedsBulkCreate() {
  if (!$('#bulkBedsForm').length) {
    return false;
  }
  dropdownToSelect2('.bedType');
}
function dropdownToSelect2(selector) {
  $(selector).select2({
    placeholder: 'Select Bed Type',
    width: '100%'
  });
}
listenClick('#addNewBedItem', function () {
  var uniqueId = $('#uniqueId').val();
  var data = {
    'bedTypes': JSON.parse($('#bedTypes').val()),
    'uniqueId': uniqueId
  };
  var bulkBedItemHtml = prepareTemplateRender('#bulkBedActionTemplate', data);
  $('.bulk-beds-item-container').append(bulkBedItemHtml);
  dropdownToSelect2('.bedType');
  uniqueId++;
  $('#uniqueId').val(uniqueId);
  resetBulkBedItemIndex();
});
function resetBulkBedItemIndex() {
  var index = 1;
  $('.bulk-beds-item-container>tr').each(function () {
    $(this).find('.item-number').text(index);
    index++;
  });
  if (index - 1 == 0) {
    var uniqueId = $('#uniqueId').val();
    var data = {
      'services': JSON.parse($('#bedTypes').val()),
      'uniqueId': uniqueId
    };
    var bulkBedItemHtml = prepareTemplateRender('#bulkBedActionTemplate', data);
    $('.bulk-beds-item-container').append(bulkBedItemHtml);
    dropdownToSelect2('.bedType');
    uniqueId++;
  }
}
listenClick('.delete-invoice-item', function () {
  $(this).parents('tr').remove();
  resetBulkBedItemIndex();
});
listenSubmit('#bulkBedsForm', function (event) {
  event.preventDefault();
  // screenLock();
  $('.bulk-button').prop('disabled', true);
  var formData = new FormData($(this)[0]);
  $.ajax({
    url: $('#bulkBedSaveUrl').val(),
    type: 'POST',
    dataType: 'json',
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      displaySuccessMessage(result.message);
      $('.bulk-button').prop('disabled', false);
      window.location.href = $('#bulkBedUrl').val();
    },
    error: function error(result) {
      printErrorMessage('#validationErrorsBox', result);
      $('.bulk-button').prop('disabled', false);
    }
    // complete: function () {
    //     screenUnLock();
    // },
  });
});

/***/ }),

/***/ "./resources/assets/js/beds/create-edit.js":
/*!*************************************************!*\
  !*** ./resources/assets/js/beds/create-edit.js ***!
  \*************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadBedsCreateEDit);
function loadBedsCreateEDit() {
  if (!$('#addNewBedsForm').length && !$('#EditBedsForm').length) {
    return false;
  }
  var editBedTypeElement = $('#editBedType');
  if (editBedTypeElement.length) {
    $('#editBedType').select2({
      width: '100%',
      dropdownParent: $('#edit_beds_modal')
    });
  }
}
listenSubmit('#addNewBedsForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#BedSaveBtn');
  loadingButton.button('loading');
  $.ajax({
    url: $('#bedCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_beds_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#validationErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenClick('.bed-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var bedId = $(event.currentTarget).data('id');
  renderBedData(bedId);
});
function renderBedData(id) {
  $.ajax({
    url: $('.bedUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#bedId').val(result.data.id);
        $('#editBedName').val(result.data.name);
        $('#editBedType').val(result.data.bed_type).trigger('change.select2');
        $('#editBedDescription').val(result.data.description);
        $('#editBedCharge').val(result.data.charge);
        $('.price-input').trigger('input');
        $('#edit_beds_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#EditBedsForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnEditSave');
  loadingButton.button('loading');
  var id = $('#bedId').val();
  $.ajax({
    url: $('.bedUrl').val() + '/' + id,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_beds_modal').modal('hide');
        if ($('#bedDetailShowUrl').length) {
          window.location.href = $('#bedDetailShowUrl').val();
        } else {
          livewire.emit('refresh');
        }
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_beds_modal', function () {
  resetModalForm('#addNewBedsForm', '#validationErrorsBox');
  $('#bedType').trigger('change.select2');
});
listenHiddenBsModal('#edit_beds_modal', function () {
  resetModalForm('#EditBedsForm', '#editValidationErrorsBox');
});
listenShownBsModal('#add_beds_modal', function () {
  $('#bedType').select2({
    width: '100%',
    dropdownParent: $('#add_beds_modal')
  });
});

/***/ }),

/***/ "./resources/assets/js/bills/bill.js":
/*!*******************************************!*\
  !*** ./resources/assets/js/bills/bill.js ***!
  \*******************************************/
/***/ (() => {

"use strict";


listenClick('.bill-delete-btn', function (event) {
  var id = $(event.currentTarget).data('id');
  deleteItem($('#indexBillUrl').val() + '/' + id, '', $('#Bill').val());
});

/***/ }),

/***/ "./resources/assets/js/bills/edit.js":
/*!*******************************************!*\
  !*** ./resources/assets/js/bills/edit.js ***!
  \*******************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadBillEdit);
function loadBillEdit() {
  if (!$('#editBillPatientAdmissionId').length) {
    return false;
  }
  setTimeout(function () {
    $('#patientAdmissionId').val($('#editBillPatientAdmissionId').val());
    $('#patientAdmissionId').trigger('change');
  }, 500);
}

/***/ }),

/***/ "./resources/assets/js/bills/new.js":
/*!******************************************!*\
  !*** ./resources/assets/js/bills/new.js ***!
  \******************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadBillEdit);
function loadBillEdit() {
  if (!$('#billForm').length) {
    return false;
  }
  var femaleElement = $('#female');
  var maleElement = $('#male');
  var patientIdElement = $('#patient_id');
  var patientAdmissionIdElement = $('#patientAdmissionId');
  var billDateIdElement = $('#bill_date');
  var editBillDateElement = $('#editBillDate');
  $('input:text:not([readonly="readonly"])').first().blur();
  if (femaleElement.length) {
    $('#female').attr('disabled', true);
  }
  if (maleElement.length) {
    $('#male').attr('disabled', true);
  }
  if (patientIdElement.length) {
    $('#patient_id').select2({
      width: '100%'
    });
  }
  if (patientAdmissionIdElement.length) {
    $('#patientAdmissionId').select2({
      width: '100%'
    });
  }
  if (billDateIdElement.length) {
    $('#bill_date').flatpickr({
      enableTime: true,
      defaultDate: new Date(),
      dateFormat: 'Y-m-d H:i',
      locale: $('.userCurrentLanguage').val()
    });
  }
  if (editBillDateElement.length) {
    $('#editBillDate').flatpickr({
      enableTime: true,
      dateFormat: 'Y-m-d H:i',
      locale: $('.userCurrentLanguage').val()
    });
  }
  billDropdownToSelect2('.accountId');
}
var billDropdownToSelect2 = function billDropdownToSelect2(selector) {
  $(selector).select2({
    placeholder: 'Select Medicine',
    width: '100%'
  });
};
listenClick('#addBillItem', function () {
  var uniqueId = $('.uniqueId').val();
  var data = {
    'medicines': JSON.parse($('.associateMedicines').val()),
    'uniqueId': uniqueId
  };
  var invoiceItemHtml = prepareTemplateRender('#billItemTemplate', data);
  $('.bill-item-container').append(invoiceItemHtml);
  billDropdownToSelect2('.medicineId');
  uniqueId++;
  billResetInvoiceItemIndex();
});
var billResetInvoiceItemIndex = function billResetInvoiceItemIndex() {
  var index = 1;
  $('.bill-item-container>tr').each(function () {
    $(this).find('.item-number').text(index);
    index++;
  });
  if (index - 1 == 0) {
    $('#billTbl tbody').append('<tr>' + '<td class="text-center item-number">1</td>' + '<td class="table__item-desc">' + '<input class="form-control itemName" required name="item_name[]" type="text"></td>' + '<td class="table__qty"><input class="form-control qty quantity" required name="qty[]" type="text"></td>' + '<td><input class="form-control price-input price" required name="price[]" type="text"></td>' + '<td class="amount text-right itemTotal"></td>' + '<td class="text-center"><i class="fa fa-trash text-danger delete-bill-bulk-item pointer"></i></td>' + '</tr>');
  }
};
listenClick('.delete-bill-bulk-item', function () {
  $(this).parents('tr').remove();
  billResetInvoiceItemIndex();
  billCalculateAndSetInvoiceAmount();
});
var removeCommas = function removeCommas(str) {
  return str.replace(/,/g, '');
};
listenKeyup('.qty', function () {
  var qty = parseInt($(this).val());
  var rate = $(this).parent().siblings().find('.price').val();
  rate = parseInt(removeCommas(rate));
  var amount = billCalculateAmount(qty, rate);
  $(this).parent().siblings('.amount').text(addCommas(amount.toString()));
  billCalculateAndSetInvoiceAmount();
});
listenKeyup('.price', function () {
  var rate = $(this).val();
  rate = parseInt(removeCommas(rate));
  var qty = parseInt($(this).parent().siblings().find('.qty').val());
  var amount = billCalculateAmount(qty, rate);
  $(this).parent().siblings('.amount').text(addCommas(amount.toString()));
  billCalculateAndSetInvoiceAmount();
});
var billCalculateAmount = function billCalculateAmount(qty, rate) {
  if (qty > 0 && rate > 0) {
    return qty * rate;
  } else {
    return 0;
  }
};
var billCalculateAndSetInvoiceAmount = function billCalculateAndSetInvoiceAmount() {
  var totalAmount = 0;
  $('.bill-item-container>tr').each(function () {
    var itemTotal = $(this).find('.itemTotal').text();
    itemTotal = removeCommas(itemTotal);
    itemTotal = isEmpty($.trim(itemTotal)) ? 0 : parseInt(itemTotal);
    totalAmount += itemTotal;
  });
  totalAmount = parseFloat(totalAmount);
  $('#totalPrice').text($('.currentCurrency').val() + addCommas(totalAmount.toFixed(2)));

  //set hidden input value
  $('#totalAmount').val(totalAmount);
};
listenSubmit('#billForm', function (event) {
  event.preventDefault();
  // screenLock();
  $('#billSave').attr('disabled', true);
  var loadingButton = jQuery(this).find('#saveInvoiceBtn');
  loadingButton.button('loading');
  var formData = new FormData($(this)[0]);
  $.ajax({
    url: $('.billSaveUrl').val(),
    type: 'POST',
    dataType: 'json',
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      displaySuccessMessage(result.message);
      window.location.href = $('.billUrl').val() + '/' + result.data.id;
    },
    error: function error(result) {
      printErrorMessage('#validationErrorsBox', result);
      $('#billSave').attr('disabled', false);
    }
    // complete: function () {
    //     screenUnLock();
    //     loadingButton.button('reset');
    // },
  });
});

// bill auto fill data script code
listenChange('#patientAdmissionId', function () {
  // screenLock();
  $('#patientAdmissionId').attr('disabled', true);
  var data;
  if ($(this).val() != '' && $(this).val() != null) {
    $('#patientAdmissionId').attr('disabled', false);
    if ($('.isEdit').val()) {
      data = {
        editBillId: $('.billId').val(),
        patient_admission_id: $(this).val()
      };
    } else {
      data = {
        patient_admission_id: $(this).val()
      };
    }
    $.ajax({
      url: $('.patientAdmissionDetailUrl').val(),
      type: 'GET',
      data: data,
      success: function success(result) {
        if (result.success) {
          var patientAdmissionData = result.data;
          $('#pAdmissionId').val($('#patientAdmissionId').find(':selected').val());
          $('#female,#male').attr('disabled', true);
          $('#billsPatientId').val(patientAdmissionData.patientDetails.owner_id);
          $('#name').val(patientAdmissionData.patientDetails.full_name);
          $('#userEmail').val(patientAdmissionData.patientDetails.email);
          $('#userPhone').val(patientAdmissionData.patientDetails.phone != null ? patientAdmissionData.patientDetails.phone : 'N/A');
          if (patientAdmissionData.patientDetails.gender == 1) $('#female').prop('checked', true);else $('#male').prop('checked', true);
          $('#dob').val(patientAdmissionData.patientDetails.dob != null ? patientAdmissionData.patientDetails.dob : 'N/A');
          $('#billDoctorId').val(patientAdmissionData.doctorName);
          // $('#admissionDate').val(patientAdmissionData.admissionDetails.admission_date);
          $('#admissionDate').val(moment(patientAdmissionData.admissionDetails.admission_date).format('YYYY-MM-DD') + ' ' + moment(patientAdmissionData.admissionDetails.admission_date).format('HH:mm:ss'));
          $('#dischargeDate').val(patientAdmissionData.admissionDetails.discharge_date != null
          // ? patientAdmissionData.admissionDetails.discharge_date
          ? moment(patientAdmissionData.admissionDetails.discharge_date).format('YYYY-MM-DD') + ' ' + moment(patientAdmissionData.admissionDetails.discharge_date).format('HH:mm:ss') : 'N/A');
          if (patientAdmissionData["package"] != '') {
            $('#packageId').val(patientAdmissionData["package"].name != null ? patientAdmissionData["package"].name : 'N/A');
          } else {
            $('#packageId').val('N/A');
          }
          if (patientAdmissionData.admissionDetails.insurance != null) {
            $('#insuranceId').val(patientAdmissionData.admissionDetails.insurance.name);
          } else {
            $('#insuranceId').val('N/A');
          }
          $('#totalDays').val(patientAdmissionData.admissionDetails.totalDays);
          $('#policyNo').val(patientAdmissionData.admissionDetails.policy_no != '' ? patientAdmissionData.admissionDetails.policy_no : 'N/A');
          if (patientAdmissionData["package"] != '' || patientAdmissionData["package"] == '' || !patientAdmissionData.hasOwnProperty('billItems') || patientAdmissionData.hasOwnProperty('billItems') || patientAdmissionData.billItems.length <= 0 || patientAdmissionData.billItems.length >= 0) {
            $('.bill-item-container tr').each(function () {
              var itemRow = $(this).closest('tr');
              itemRow.remove();
            });
            $('#totalPrice').text('0');
            $('#billTbl tbody').append('<tr>' + '<td class="text-center item-number">1</td>' + '<td class="table__item-desc">' + '<input class="form-control itemName" required name="item_name[]" type="text"></td>' + '<td class="table__qty"><input class="form-control qty quantity" required name="qty[]" type="text"></td>' + '<td><input class="form-control price-input price" required name="price[]" type="text"></td>' + '<td class="amount text-right itemTotal"></td>' + '<td class="text-center"><i class="fa fa-trash text-danger delete-bill-bulk-item pointer"></i></td>' + '</tr>');
          }
          if (patientAdmissionData["package"] != '' && patientAdmissionData.hasOwnProperty('billItems') && patientAdmissionData.billItems.length > 0) {
            var totalBillItems = patientAdmissionData.billItems.length - 1;
            $('#totalAmount').val(0);
            var total = 0;
            for (var i = 1; i <= totalBillItems; i++) {
              $('#addBillItem').trigger('click');
            }
            $('.bill-item-container tr').each(function (index) {
              var itemRow = $(this);
              itemRow.find('.itemName').val(patientAdmissionData.billItems[index].item_name);
              itemRow.find('.quantity').val(patientAdmissionData.billItems[index].qty);
              itemRow.find('.price').val(patientAdmissionData.billItems[index].price);
              itemRow.find('.amount').text(patientAdmissionData.billItems[index].amount);
              total = total + parseInt(itemRow.find('.itemTotal').text());
              $('#totalPrice').text($('.currentCurrency').val() + total);
            });
            $('#totalAmount').val($('#total').text());
            setTimeout(function () {
              $('.price').trigger('keyup');
            }, 500);
          } else if (patientAdmissionData["package"] != '') {
            if (patientAdmissionData["package"].package_services_items.length > 0) {
              var totalPackageServices = patientAdmissionData["package"].package_services_items.length - 1;
              $('#totalAmount').val(0);
              var _total = 0;
              for (var _i = 1; _i <= totalPackageServices; _i++) {
                $('#addBillItem').trigger('click');
              }
              $('.bill-item-container tr').each(function (index) {
                var itemRow = $(this);
                itemRow.find('.itemName').val(patientAdmissionData["package"].package_services_items[index].service.name);
                itemRow.find('.quantity').val(patientAdmissionData["package"].package_services_items[index].quantity);
                itemRow.find('.price').val(patientAdmissionData["package"].package_services_items[index].rate);
                itemRow.find('.amount').text(patientAdmissionData["package"].package_services_items[index].amount);
                _total = _total + parseInt(itemRow.find('.itemTotal').text());
                $('#totalPrice').text($('.currentCurrency').val() + _total);
              });
              $('#totalAmount').val($('#total').text());
            }
          } else if (patientAdmissionData.hasOwnProperty('billItems') && patientAdmissionData.billItems.length > 0) {
            var _totalBillItems = patientAdmissionData.billItems.length - 1;
            $('#totalAmount').val(0);
            var _total2 = 0;
            for (var _i2 = 1; _i2 <= _totalBillItems; _i2++) {
              $('#addBillItem').trigger('click');
            }
            $('.bill-item-container tr').each(function (index) {
              var itemRow = $(this);
              itemRow.find('.itemName').val(patientAdmissionData.billItems[index].item_name);
              itemRow.find('.quantity').val(patientAdmissionData.billItems[index].qty);
              itemRow.find('.price').val(patientAdmissionData.billItems[index].price);
              itemRow.find('.amount').text(patientAdmissionData.billItems[index].amount);
              _total2 = _total2 + parseInt(itemRow.find('.itemTotal').text());
              $('#totalPrice').text($('.currentCurrency').val() + _total2);
            });
            $('#totalAmount').val($('#total').text());
          }
        }
      },
      error: function error(result) {
        manageAjaxErrors(result);
        $('#patientAdmissionId').attr('disabled', false);
      }
      // complete: function (result) {
      //     screenUnLock();
      // },
    });
  } else {
    // screenUnLock();
    $('#patientAdmissionId').attr('disabled', false);
  }
});

/***/ }),

/***/ "./resources/assets/js/birth_reports/birth_reports.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/birth_reports/birth_reports.js ***!
  \************************************************************/
/***/ (() => {

"use strict";


listenClick('.birth-report-delete-btn', function (event) {
  var birthReportsId = $(event.currentTarget).attr('data-id');
  deleteItem($('.birthReportUrl').val() + '/' + birthReportsId, '', $('#birthReport').val());
});

/***/ }),

/***/ "./resources/assets/js/birth_reports/create-details-edit.js":
/*!******************************************************************!*\
  !*** ./resources/assets/js/birth_reports/create-details-edit.js ***!
  \******************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/birth_reports/create-edit.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/birth_reports/create-edit.js ***!
  \**********************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadBirthCreateEdit);
function loadBirthCreateEdit() {
  if (!$('#addBirthReportForm').length && !$('#editBirthReportForm').length) {
    return false;
  }
  var birthCaseIdElement = $('#birthCaseId');
  var birthDoctorIdElement = $('#birthDoctorId');
  var editBirthCaseIdElement = $('#editBirthCaseId');
  var editBirthDoctorIdElement = $('#editBirthDoctorId');
  var birthDateElement = $('#birthDate');
  var editBirthDateElement = $('#editBirthDate');
  if (birthCaseIdElement.length) {
    $('#birthCaseId').select2({
      width: '100%',
      dropdownParent: $('#add_birth_reports_modal')
    });
  }
  if (birthDoctorIdElement.length) {
    $('#birthDoctorId').select2({
      width: '100%',
      dropdownParent: $('#add_birth_reports_modal')
    });
  }
  if (editBirthCaseIdElement.length) {
    $('#editBirthCaseId').select2({
      width: '100%',
      dropdownParent: $('#edit_birth_reports_modal')
    });
  }
  if (editBirthDoctorIdElement.length) {
    $('#editBirthDoctorId').select2({
      width: '100%',
      dropdownParent: $('#edit_birth_reports_modal')
    });
  }
  if (birthDateElement.length) {
    $('#birthDate').flatpickr({
      dateFormat: 'Y-m-d h:i K',
      useCurrent: true,
      sideBySide: true,
      enableTime: true,
      maxDate: new Date(),
      locale: $('.userCurrentLanguage').val()
    });
  }
  if (editBirthDateElement.length) {
    $('#editBirthDate').flatpickr({
      dateFormat: 'Y-m-d h:i K',
      useCurrent: true,
      sideBySide: true,
      enableTime: true,
      maxDate: new Date(),
      locale: $('.userCurrentLanguage').val()
    });
  }
}

// listenShownBsModal('#add_birth_reports_modal, #edit_birth_reports_modal', function () {
//     $('#birthCaseId, #editBirthCaseId:first').focus();
// });

listenSubmit('#addBirthReportForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnBirthSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#indexBirthReportCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_birth_reports_modal').modal('hide');
        Livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#birthValidationErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenClick('.birth-report-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var birthReportId = $(event.currentTarget).attr('data-id');
  renderBirthReportData(birthReportId);
});
function renderBirthReportData(id) {
  $.ajax({
    url: $('.birthReportUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#birthReportId').val(result.data.id);
        $('#editBirthCaseId').val(result.data.case_id).trigger('change.select2');
        $('#editBirthDoctorId').val(result.data.doctor_id).trigger('change.select2');
        $('#editBirthDescription').val(result.data.description);
        document.querySelector('#editBirthDate')._flatpickr.setDate(moment(result.data.date).format());
        $('#edit_birth_reports_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#editBirthReportForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnBirthEditSave');
  loadingButton.button('loading');
  var editTimeBirthReportId = $('#birthReportId').val();
  $.ajax({
    url: $('.birthReportUrl').val() + '/' + editTimeBirthReportId,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_birth_reports_modal').modal('hide');
        Livewire.emit('refresh');
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_birth_reports_modal', function () {
  resetModalForm('#addBirthReportForm', '#birthValidationErrorsBox');
  $('#birthCaseId, #birthDoctorId').val('').trigger('change.select2');
});
listenHiddenBsModal('#edit_birth_reports_modal', function () {
  resetModalForm('#editBirthReportForm', '#editBirthValidationErrorsBox');
});

/***/ }),

/***/ "./resources/assets/js/blood_banks/blood_banks.js":
/*!********************************************************!*\
  !*** ./resources/assets/js/blood_banks/blood_banks.js ***!
  \********************************************************/
/***/ (() => {

"use strict";


listenSubmit('#addBloodBankForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#bloodBankSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#bloodBankCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_blood_banks_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#bloodBankErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenSubmit('#editBloodBankForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editBloodBankSave');
  loadingButton.button('loading');
  var id = $('#bloodBankId').val();
  $.ajax({
    url: $('#bloodBankUrl').val() + '/' + id,
    type: 'put',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_blood_banks_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_blood_banks_modal', function () {
  resetModalForm('#addBloodBankForm', '#bloodBankErrorsBox');
});
listenHiddenBsModal('#edit_blood_banks_modal', function () {
  resetModalForm('#editBloodBankForm', '#editBloodBankErrorsBox');
});
function renderBloodBankData(id) {
  $.ajax({
    url: $('#bloodBankUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var bloodGroup = result.data;
        $('#bloodBankId').val(bloodGroup.id);
        $('#editBloodGroup').val(bloodGroup.blood_group);
        $('#editBloodBankRemainedBags').val(bloodGroup.remained_bags);
        $('#edit_blood_banks_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listen('click', '.blood-bank-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var bloodGroupId = $(event.currentTarget).attr('data-id');
  renderBloodBankData(bloodGroupId);
});
listen('click', '.blood-bank-delete-btn', function (event) {
  var bloodGroupId = $(event.currentTarget).attr('data-id');
  deleteItem($('#bloodBankUrl').val() + '/' + bloodGroupId, '', $('#bloodBank').val());
});

/***/ }),

/***/ "./resources/assets/js/blood_donations/blood_donations.js":
/*!****************************************************************!*\
  !*** ./resources/assets/js/blood_donations/blood_donations.js ***!
  \****************************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadBloodDonationCreateEdit);
function loadBloodDonationCreateEdit() {
  if (!$('#addBloodDonationForm').length && !$('#editBloodDonationForm').length) {
    return false;
  }
  var donationDonorNameElement = $('#donationDonorName');
  var editDonationDonorNameElement = $('#editDonationDonorName');
  listenShownBsModal('#add_blood_donation_modal', function () {
    if (donationDonorNameElement.length) {
      $('#donationDonorName').select2({
        width: '100%',
        dropdownParent: $('#add_blood_donation_modal')
      });
    }
  });
  listenShownBsModal('#edit_blood_donation_modal', function () {
    if (editDonationDonorNameElement.length) {
      $('#editDonationDonorName').select2({
        width: '100%',
        dropdownParent: $('#edit_blood_donation_modal')
      });
    }
  });
}
listenSubmit('#addBloodDonationForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#bloodDonationSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#bloodDonationCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_blood_donation_modal').modal('hide');
        livewire.emit('refresh');
        setTimeout(function () {
          loadingButton.button('reset');
        }, 2500);
      }
    },
    error: function error(result) {
      printErrorMessage('#bloodDonationErrorsBox', result);
      setTimeout(function () {
        loadingButton.button('reset');
      }, 2000);
    }
  });
});
listenSubmit('#editBloodDonationForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editBloodDonationSave');
  loadingButton.button('loading');
  var id = $('#bloodDonationId').val();
  $.ajax({
    url: $('#bloodDonationUrl').val() + '/' + id,
    type: 'post',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_blood_donation_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_blood_donation_modal', function () {
  $('#donationDonorName').val('').trigger('change.select2');
  resetModalForm('#addBloodDonationForm', '#bloodDonationErrorsBox');
});
listenHiddenBsModal('#edit_blood_donation_modal', function () {
  resetModalForm('#editBloodDonationForm', '#editBloodDonationErrorsBox');
});
function renderBloodDonationData(id) {
  $.ajax({
    url: $('#bloodDonationUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var bloodDonation = result.data;
        $('#bloodDonationId').val(bloodDonation.id);
        $('#editDonationDonorName').val(bloodDonation.blood_donor_id);
        $('#editDonationDonorName').trigger('change');
        $('#editDonationBags').val(bloodDonation.bags);
        $('#edit_blood_donation_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
;
listen('click', '.blood-donation-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var bloodDonationId = $(event.currentTarget).attr('data-id');
  renderBloodDonationData(bloodDonationId);
});
listen('click', '.blood-donation-delete-btn', function (event) {
  var bloodDonationId = $(event.currentTarget).attr('data-id');
  deleteItem($('#bloodDonationUrl').val() + '/' + bloodDonationId, '', $('#bloodDonation').val());
});
listenShownBsModal('#edit_blood_donation_modal', function () {
  $('#editDonationDonorName:first').focus();
});

/***/ }),

/***/ "./resources/assets/js/blood_donors/blood_donors.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/blood_donors/blood_donors.js ***!
  \**********************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadBloodDonorCreateEdit);
function loadBloodDonorCreateEdit() {
  if (!$('#addBloodDonorForm').length && !$('#editBloodDonorForm').length) {
    return false;
  }
  var donorBloodGroupElement = $('#donorBloodGroup');
  var editDonorBloodGroupElement = $('#editDonorBloodGroup');
  var lastDonationDateElement = $('#lastDonationDate');
  if (donorBloodGroupElement.length) {
    $('#donorBloodGroup').select2({
      width: '100%',
      dropdownParent: $('#add_blood_donors_modal')
    });
  }
  if (editDonorBloodGroupElement.length) {
    $('#editDonorBloodGroup').select2({
      width: '100%',
      dropdownParent: $('#edit_blood_donors_modal')
    });
  }
  if (lastDonationDateElement.length) {
    $('#lastDonationDate').flatpickr({
      format: 'YYYY-MM-DD',
      useCurrent: false,
      sideBySide: false,
      locale: $('.userCurrentLanguage').val()
    });
  }
}
listenSubmit('#addBloodDonorForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#bloodDonorSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#bloodDonorCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_blood_donors_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#bloodDonorErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenSubmit('#editBloodDonorForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editBloodDonorSave');
  loadingButton.button('loading');
  var id = $('#bloodDonorId').val();
  $.ajax({
    url: $('#bloodDonorUrl').val() + '/' + id,
    type: 'put',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_blood_donors_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_blood_donors_modal', function () {
  resetModalForm('#addBloodDonorForm', '#bloodDonorErrorsBox');
});
listenHiddenBsModal('#edit_blood_donors_modal', function () {
  resetModalForm('#editBloodDonorForm', '#editBloodDonorErrorsBox');
});
function renderBloodDonorData(id) {
  $.ajax({
    url: $('#bloodDonorUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var bloodDonor = result.data;
        $('#bloodDonorId').val(bloodDonor.id);
        $('#editBloodDonorName').val(bloodDonor.name);
        $('#editBloodDonorAge').val(bloodDonor.age);
        $('#editBloodDonorMale,#editBloodDonorFemale').prop('checked', false);
        if (bloodDonor.gender == 1) {
          $('#editBloodDonorMale').prop('checked', true);
        } else {
          $('#editBloodDonorFemale').prop('checked', true);
        }
        $('#editDonorBloodGroup').val(bloodDonor.blood_group);
        $('#editDonorBloodGroup').select2({
          dropdownParent: $('#edit_blood_donors_modal')
        });
        $('#editDonorBloodGroup').trigger('change');
        var editBloodDonorDate = $('#editLastDonationDate').flatpickr({
          format: 'YYYY-MM-DD',
          useCurrent: false,
          sideBySide: false,
          locale: $('.userCurrentLanguage').val()
        });
        editBloodDonorDate.setDate(format(result.data.last_donate_date, 'YYYY-MM-DD'));
        $('#edit_blood_donors_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listen('click', '.blood-donor-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var bloodDonorId = $(event.currentTarget).attr('data-id');
  renderBloodDonorData(bloodDonorId);
});
listen('click', '.blood-donor-delete-btn', function (event) {
  var bloodDonorId = $(event.currentTarget).attr('data-id');
  deleteItem($('#bloodDonorUrl').val() + '/' + bloodDonorId, '', $('#bloodDonor').val());
});
listenShownBsModal('#add_blood_donors_modal', function () {
  $('#donorBloodGroup').select2({
    width: '100%',
    dropdownParent: $('#add_blood_donors_modal')
  });
});

/***/ }),

/***/ "./resources/assets/js/blood_issues/blood_issues.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/blood_issues/blood_issues.js ***!
  \**********************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadBloodIssuesCreateEdit);
function loadBloodIssuesCreateEdit() {
  if (!$('#addBloodIssueForm').length && !$('#editBloodIssueForm').length) {
    return false;
  }
  var bloodIssueDoctorNameElement = $('#bloodIssueDoctorName');
  var bloodIssuePatientNameElement = $('#bloodIssuePatientName');
  var donorNameElement = $('#donorName');
  var issuedBloodGroupElement = $('#issuedBloodGroup');
  var editBloodIssueDoctorNameElement = $('#editBloodIssueDoctorName');
  var editBloodIssuePatientNameElement = $('#editBloodIssuePatientName');
  var editDonorNameElement = $('#editDonorName');
  var editIssuedBloodGroupElement = $('#editIssuedBloodGroup');
  var bloodIssueDateElement = $('#bloodIssueDate');
  if (bloodIssueDoctorNameElement.length) {
    $('#bloodIssueDoctorName').select2({
      width: '100%',
      dropdownParent: $('#add_blood_issues_modal')
    });
  }
  if (bloodIssuePatientNameElement.length) {
    $('#bloodIssuePatientName').select2({
      width: '100%',
      dropdownParent: $('#add_blood_issues_modal')
    });
  }
  if (donorNameElement.length) {
    $('#donorName').select2({
      width: '100%',
      dropdownParent: $('#add_blood_issues_modal')
    });
  }
  if (issuedBloodGroupElement.length) {
    $('#issuedBloodGroup').select2({
      width: '100%',
      dropdownParent: $('#add_blood_issues_modal')
    });
  }
  if (editBloodIssueDoctorNameElement.length) {
    $('#editBloodIssueDoctorName').select2({
      width: '100%',
      dropdownParent: $('#edit_blood_issues_modal')
    });
  }
  if (editBloodIssuePatientNameElement.length) {
    $('#editBloodIssuePatientName').select2({
      width: '100%',
      dropdownParent: $('#edit_blood_issues_modal')
    });
  }
  if (editDonorNameElement.length) {
    $('#editDonorName').select2({
      width: '100%',
      dropdownParent: $('#edit_blood_issues_modal')
    });
  }
  if (editIssuedBloodGroupElement.length) {
    $('#editIssuedBloodGroup').select2({
      width: '100%',
      dropdownParent: $('#edit_blood_issues_modal')
    });
  }
  if (bloodIssueDateElement.length) {
    $('#bloodIssueDate').flatpickr({
      enableTime: true,
      defaultDate: new Date(),
      maxDate: new Date(),
      dateFormat: 'Y-m-d H:i',
      locale: $('.userCurrentLanguage').val()
    });
  }
}
listenSubmit('#addBloodIssueForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#bloodIssueSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#bloodIssueCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_blood_issues_modal').modal('hide');
        livewire.emit('refresh');
        setTimeout(function () {
          loadingButton.button('reset');
        }, 2500);
      }
    },
    error: function error(result) {
      printErrorMessage('#bloodIssueErrorsBox', result);
      setTimeout(function () {
        loadingButton.button('reset');
      }, 2000);
    }
  });
});
listenChange('#donorName', function () {
  changeBloodGroup('#issuedBloodGroup', $(this).val());
});
listenChange('#editDonorName', function () {
  changeBloodGroup('#editIssuedBloodGroup', $(this).val());
});
function changeBloodGroup(selector, id) {
  $.ajax({
    url: $('#bloodGroupUrl').val(),
    type: 'get',
    dataType: 'json',
    data: {
      id: id
    },
    success: function success(data) {
      $(selector).empty();
      $.each(data.data, function (i, v) {
        $(selector).append($('<option></option>').attr('value', i).text(v));
      });
    }
  });
}
listenSubmit('#editBloodIssueForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editBloodIssueSave');
  loadingButton.button('loading');
  var id = $('#bloodIssueId').val();
  $.ajax({
    url: $('#bloodIssueUrl').val() + '/' + id,
    type: 'post',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_blood_issues_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_blood_issues_modal', function () {
  resetModalForm('#addBloodIssueForm', '#bloodIssueErrorsBox');
  $('#bloodIssueDoctorName').val(null).trigger('change');
  $('#bloodIssuePatientName').val(null).trigger('change');
  $('#donorName').val(null).trigger('change');
  $('#issuedBloodGroup').val(null).trigger('change');
});
listenHiddenBsModal('#edit_blood_issues_modal', function () {
  resetModalForm('#editBloodIssueForm', '#editBloodIssueErrorsBox');
});
listenShownBsModal('#add_blood_issues_modal,#edit_blood_issues_modal', function () {
  $('#bloodIssueDoctorName,#bloodIssuePatientName,#donorName,#issuedBloodGroup').select2({
    width: '100%',
    dropdownParent: $('#add_blood_issues_modal')
  });
  $('#editBloodIssueDoctorName,#editBloodIssuePatientName,#editDonorName,#editIssuedBloodGroup').select2({
    width: '100%',
    dropdownParent: $('#edit_blood_issues_modal')
  });
});
function renderBloodIssuesData(id) {
  $.ajax({
    url: $('#bloodIssueUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var bloodIssue = result.data;
        $('#bloodIssueId').val(bloodIssue.id);
        var editBloodIssueDate = $('#editBloodIssueDate').flatpickr({
          enableTime: true,
          maxDate: new Date(),
          dateFormat: 'Y-m-d H:i',
          locale: $('.userCurrentLanguage').val()
        });
        editBloodIssueDate.setDate(bloodIssue.issue_date);
        $('#editBloodIssueDoctorName').val(bloodIssue.doctor_id).trigger('change');
        $('#editBloodIssuePatientName').val(bloodIssue.patient_id).trigger('change');
        $('#editDonorName').val(bloodIssue.donor_id).trigger('change', [{
          isEdit: true
        }]);
        $('#editBloodIssueAmount').val(bloodIssue.amount);
        $('.price-input').trigger('input');
        $('#editBloodIssueRemarks').val(bloodIssue.remarks);
        $('#edit_blood_issues_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listen('click', '.blood-issues-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var bloodIssueId = $(event.currentTarget).attr('data-id');
  renderBloodIssuesData(bloodIssueId);
});
listen('click', '.blood-issues-delete-btn', function (event) {
  var bloodIssueId = $(event.currentTarget).attr('data-id');
  deleteItem($('#bloodIssueUrl').val() + '/' + bloodIssueId, '', $('#bloodIssue').val());
});

/***/ }),

/***/ "./resources/assets/js/brands/brands.js":
/*!**********************************************!*\
  !*** ./resources/assets/js/brands/brands.js ***!
  \**********************************************/
/***/ (() => {

"use strict";


listenClick('.brand-delete-btn', function (event) {
  var brandId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexBrandUrl').val() + '/' + brandId, '', $('#medicineBrand').val());
});
listenSubmit('#createBrandForm, #editBrandForm', function () {
  if ($('.error-msg').text() !== '') {
    $('.phoneNumber').focus();
    return false;
  }
});

/***/ }),

/***/ "./resources/assets/js/call_logs/call_log.js":
/*!***************************************************!*\
  !*** ./resources/assets/js/call_logs/call_log.js ***!
  \***************************************************/
/***/ (() => {

"use strict";


listenClick('#callLogResetFilter', function () {
  $('#callType').val(0).trigger('change');
  hideDropdownManually($('#callTypeFilterBtn'), $('.dropdown-menu'));
});
listenClick('.call-log-delete-btn', function (event) {
  var callLogId = $(event.currentTarget).attr('data-id');
  deleteItem($('.callLogUrl').val() + '/' + callLogId, '', $('#callLogs').val());
});
listenChange('#callType', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});

/***/ }),

/***/ "./resources/assets/js/call_logs/create-edit.js":
/*!******************************************************!*\
  !*** ./resources/assets/js/call_logs/create-edit.js ***!
  \******************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadCallLogsCreateEdit);
function loadCallLogsCreateEdit() {
  if ($('#createCallLogForm').length || $('#editCallLogForm').length) {
    var callLogFollowUpDate = undefined;
    if ($('editCallLogId').length) {
      $('#callLogDate').flatpickr({
        format: 'YYYY-MM-DD',
        useCurrent: true,
        sideBySide: true,
        minDate: moment(new Date()).format('YYYY-MM-DD'),
        locale: $('.userCurrentLanguage').val(),
        onChange: function onChange(selectedDates, dateStr, instance) {
          var callLogMinDate = moment($('#callLogDate').val()).format();
          if (typeof followUpDate != "undefined") {
            followUpDate.set('minDate', callLogMinDate);
          }
        }
      });
    } else {
      $('#callLogDate').flatpickr({
        format: 'YYYY-MM-DD',
        useCurrent: true,
        sideBySide: true,
        minDate: moment(new Date()).format('YYYY-MM-DD'),
        locale: $('.userCurrentLanguage').val(),
        onChange: function onChange(selectedDates, dateStr, instance) {
          var callLogMinDate = moment($('#callLogDate').val()).format();
          if (typeof callLogFollowUpDate != "undefined") {
            callLogFollowUpDate.set('minDate', callLogMinDate);
          }
        }
      });
    }
    callLogFollowUpDate = $('#callLogFollowUpDate').flatpickr({
      format: 'YYYY-MM-DD',
      useCurrent: true,
      sideBySide: true,
      locale: $('.userCurrentLanguage').val()
    });
    var callLogMinDate = moment($('#callLogDate').val()).format();
    callLogFollowUpDate.set('minDate', callLogMinDate);
  } else {
    return false;
  }
}
listenSubmit('#createCallLogForm, #editCallLogForm', function () {
  // $('.btnSave').attr('disabled', true);
  if ($('.error-msg').text() !== '') {
    $('#callLogPhoneNumber').focus();
    // $('.btnSave').attr('disabled', false);
    return false;
  }
});
listen('keyup keypress', '#createCallLogForm, #editCallLogForm', function (e) {
  var keyCode = e.keyCode || e.which;
  if (keyCode === 13) {
    e.preventDefault();
    return false;
  }
});
listen('keyup keypress', '#createCallLogForm, #editCallLogForm', function (e) {
  var keyCode = e.keyCode || e.which;
  if (keyCode === 13) {
    e.preventDefault();
    return false;
  }
});

/***/ }),

/***/ "./resources/assets/js/case_handlers/case_handlers.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/case_handlers/case_handlers.js ***!
  \************************************************************/
/***/ (() => {

"use strict";


listenClick('.delete-btn', function (event) {
  var caseHandlerId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexCaseHandlerUrl').val() + '/' + caseHandlerId, '', $('#caseHandler').val());
});
listenChange('.case-handler-status', function (event) {
  var caseHandlerId = $(event.currentTarget).attr('data-id');
  updateCaseHandlerStatus(caseHandlerId);
});
listenClick('#caseHandlerResetFilter', function () {
  $('#caseHandlerHead').val(2).trigger('change');
  hideDropdownManually($('#caseHandlerFilterBtn'), $('.dropdown-menu'));
});
function updateCaseHandlerStatus(id) {
  $.ajax({
    url: $('#indexCaseHandlerUrl').val() + '/' + id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        livewire.emit('refresh');
      }
    }
  });
}
listenChange('#caseHandlerHead', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
  hideDropdownManually($('#caseHandlerFilterBtn'), $('#caseHandlerFilter'));
});

/***/ }),

/***/ "./resources/assets/js/case_handlers/create-edit.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/case_handlers/create-edit.js ***!
  \**********************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadCaseHandlersCreateEdit);
function loadCaseHandlersCreateEdit() {
  if ($('#createCaseHandlerForm').length || $('#editCaseHandlerForm').length) {
    var caseHandlerBirthDateElement = $('#caseHandlerBirthDate');
    var editCaseHandlerBirthDateElement = $('#editCaseHandlerBirthDate');
    var createCaseHandlerFormElement = $('#createCaseHandlerForm');
    var editCaseHandlerFormElement = $('#editCaseHandlerForm');
    if (caseHandlerBirthDateElement.length) {
      $('#caseHandlerBirthDate').flatpickr({
        maxDate: new Date(),
        locale: $('.userCurrentLanguage').val()
      });
    }
    if (editCaseHandlerBirthDateElement.length) {
      $('#editCaseHandlerBirthDate').flatpickr({
        maxDate: new Date(),
        locale: $('.userCurrentLanguage').val()
      });
    }
    if (createCaseHandlerFormElement.length) {
      $('#createCaseHandlerForm').find('input:text:visible:first').focus();
    }
    if (editCaseHandlerFormElement.length) {
      $('#editCaseHandlerForm').find('input:text:visible:first').focus();
    }
  } else {
    return false;
  }
}
listenSubmit('#createCaseHandlerForm, #editCaseHandlerForm', function () {
  if ($('.error-msg').text() !== '') {
    $('.phoneNumber').focus();
    return false;
  }
});
listenClick('.case-andler-remove-image', function () {
  defaultImagePreview('.previewImage', 1);
});
listenChange('.caseHandlerProfileImage', function () {
  var extension = isValidImage($(this), '#caseHandlerErrorBox');
  console.log(extension);
  if (!isEmpty(extension) && extension != false) {
    $('#caseHandlerErrorBox').html('').hide();
    displayDocument(this, '#customValidationErrorsBox', extension);
  } else {
    $(this).val('');
    $('#caseHandlerErrorBox').removeClass('d-none hide');
    $('#caseHandlerErrorBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=caseHandlerErrorBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
listenChange('.editCaseHandlerProfileImage', function () {
  var extension = isValidImage($(this), '#editCaseHandlerErrorsBox');
  console.log(extension);
  if (!isEmpty(extension) && extension != false) {
    $('#editCaseHandlerErrorsBox').html('').hide();
    displayDocument(this, '#customValidationErrorsBox', extension);
  } else {
    $(this).val('');
    $('#editCaseHandlerErrorsBox').removeClass('d-none hide');
    $('#editCaseHandlerErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=editCaseHandlerErrorsBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
function isValidImage(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['jpg', 'png', 'jpeg']) == -1) {
    return false;
  }
  $(validationMessageSelector).hide();
  return true;
}
;

/***/ }),

/***/ "./resources/assets/js/category/category-details-edit.js":
/*!***************************************************************!*\
  !*** ./resources/assets/js/category/category-details-edit.js ***!
  \***************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadCategoryDetailEdit);
function loadCategoryDetailEdit() {
  if (!$('.editCategoryBtn').length) {
    return;
  }
  listenSubmit('#editMedicineCategoryForm', function (event) {
    event.preventDefault();
    var loadingButton = jQuery(this).find('#editCategorySave');
    loadingButton.button('loading');
    var id = $('#editMedicineCategoryId').val();
    $.ajax({
      url: $('#showCategoriesUrl').val() + '/' + id,
      type: 'put',
      data: $(this).serialize(),
      success: function success(result) {
        if (result.success) {
          displaySuccessMessage(result.message);
          $('#edit_categories_modal').modal('hide');
          Livewire.emit('refresh');
        }
      },
      error: function error(result) {
        UnprocessableInputError(result);
      },
      complete: function complete() {
        loadingButton.button('reset');
      }
    });
  });
  listenHiddenBsModal('#edit_categories_modal', function () {
    resetModalForm('#editMedicineCategoryForm', '#editMedicineCategoryErrorsBox');
  });
  window.renderCategoryDetailData = function (id) {
    $.ajax({
      url: $('#showCategoriesUrl').val() + '/' + id + '/edit',
      type: 'GET',
      success: function success(result) {
        if (result.success) {
          var category = result.data;
          $('#editMedicineCategoryId').val(category.id);
          $('#editCategoryName').val(category.name);
          if (category.is_active === 1) $('#editCategoryIsActive').prop('checked', true);else $('#editCategoryIsActive').prop('checked', false);
          $('#edit_categories_modal').modal('show');
          ajaxCallCompleted();
        }
      },
      error: function error(result) {
        manageAjaxErrors(result);
      }
    });
  };
  listenClick('.editCategoryBtn', function (event) {
    if ($('.ajaxCallIsRunning').val()) {
      return;
    }
    ajaxCallInProgress();
    var categoryId = $(event.currentTarget).attr('data-id');
    renderCategoryDetailData(categoryId);
  });
}

/***/ }),

/***/ "./resources/assets/js/category/category.js":
/*!**************************************************!*\
  !*** ./resources/assets/js/category/category.js ***!
  \**************************************************/
/***/ (() => {

"use strict";


listenSubmit('#addMedicineCategoryForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#medicineCategorySave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#indexCategoryCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_categories_modal').modal('hide');
        Livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#medicineCategoryErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenSubmit('#editMedicineCategoryForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editCategorySave');
  loadingButton.button('loading');
  var id = $('#editMedicineCategoryId').val();
  $.ajax({
    url: $('#indexCategoriesUrl').val() + '/' + id,
    type: 'put',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_categories_modal').modal('hide');
        if ($('#categoriesShowUrl').length) {
          window.location.href = $('#categoriesShowUrl').val();
        } else {
          livewire.emit('refresh');
        }
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_categories_modal', function () {
  resetModalForm('#addMedicineCategoryForm', '#medicineCategoryErrorsBox');
});
listenHiddenBsModal('#edit_categories_modal', function () {
  resetModalForm('#editMedicineCategoryForm', '#editMedicineCategoryErrorsBox');
});
function renderCategoryData(id) {
  $.ajax({
    url: $('#indexCategoriesUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var category = result.data;
        $('#editMedicineCategoryId').val(category.id);
        $('#editCategoryName').val(category.name);
        if (category.is_active === 1) $('#editCategoryIsActive').prop('checked', true);else $('#editCategoryIsActive').prop('checked', false);
        $('#edit_categories_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenClick('.category-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var categoryId = $(event.currentTarget).attr('data-id');
  renderCategoryData(categoryId);
});
listenClick('.category-delete-btn', function (event) {
  var categoryId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexCategoriesUrl').val() + '/' + categoryId, '', Lang.get('messages.medicine.medicine_category'));
});

// category activation deactivation change event
listenChange('.medicine-category-status', function (event) {
  var categoryId = $(event.currentTarget).attr('data-id');
  activeDeActiveCategory(categoryId);
});
listenClick('#categoryResetFilter', function () {
  $('#medicineCategoryHead').val(2).trigger('change');
  hideDropdownManually($('#medicineCategoryFilterBtn'), $('.dropdown-menu'));
});

// activate de-activate category
function activeDeActiveCategory(id) {
  $.ajax({
    url: $('#indexCategoriesUrl').val() + '/' + id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        window.livewire.emit('refresh');
      }
    }
  });
}
;
listenChange('#medicineCategoryHead', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
  hideDropdownManually($('#medicineCategoryFilterBtn'), $('#medicineCategoryFilter'));
});

/***/ }),

/***/ "./resources/assets/js/category/medicines_list.js":
/*!********************************************************!*\
  !*** ./resources/assets/js/category/medicines_list.js ***!
  \********************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/charge_categories/charge_categories.js":
/*!********************************************************************!*\
  !*** ./resources/assets/js/charge_categories/charge_categories.js ***!
  \********************************************************************/
/***/ (() => {

"use strict";


listenClick('.charge-category-delete-btn', function (event) {
  var chargeCategoryId = $(event.currentTarget).attr('data-id');
  deleteItem($('#chargeCategoryURLID').val() + '/' + chargeCategoryId, '', $('#chargeCategory').val());
});
document.addEventListener('success', function (data) {
  displaySuccessMessage(data.detail);
});

/***/ }),

/***/ "./resources/assets/js/charge_categories/create-details-edit.js":
/*!**********************************************************************!*\
  !*** ./resources/assets/js/charge_categories/create-details-edit.js ***!
  \**********************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/charge_categories/create-edit.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/charge_categories/create-edit.js ***!
  \**************************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadChargeCategoryCreateEdit);
function loadChargeCategoryCreateEdit() {
  if (!$('#addChargeCategoryForm').length && !$('#editChargeCategoryForm').length) {
    return false;
  }
  var chargeCategoryTypeIdElement = $('#chargeCategoryTypeId');
  var editChargeCategoryTypeIdElement = $('#editChargeCategoryTypeId');
  if (chargeCategoryTypeIdElement.length) {
    $('#chargeCategoryTypeId').select2({
      width: '100%',
      dropdownParent: $('#add_charge_categories_modal')
    });
  }
  if (editChargeCategoryTypeIdElement.length) {
    $('#editChargeCategoryTypeId').select2({
      width: '100%',
      dropdownParent: $('#edit_charge_categories_modal')
    });
  }
}
listenSubmit('#addChargeCategoryForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#chargeCategorySave');
  loadingButton.button('loading');
  $.ajax({
    url: $('.chargeCategoryCreateURLID').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_charge_categories_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#chargeCategoryErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenClick('.charge-category-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var chargeTypeId = $(event.currentTarget).attr('data-id');
  renderChargeCategoryData(chargeTypeId);
});
function renderChargeCategoryData(id) {
  $.ajax({
    url: $('#chargeCategoryURLID').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#chargeCatId').val(result.data.id);
        $('#editChargeCategoryName').val(result.data.name);
        $('#editChargeCategoryTypeId').val(result.data.charge_type).trigger('change.select2');
        $('#editChargeCategoryDescription').val(result.data.description);
        $('#edit_charge_categories_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#editChargeCategoryForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editChargeCategorySave');
  loadingButton.button('loading');
  var id = $('#chargeCatId').val();
  $.ajax({
    url: $('#chargeCategoryURLID').val() + '/' + id,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_charge_categories_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_charge_categories_modal', function () {
  resetModalForm('#addChargeCategoryForm', '#chargeCategoryErrorsBox');
  $('#chargeCategoryTypeId').val('').trigger('change.select2');
});
listenHiddenBsModal('#edit_charge_categories_modal', function () {
  resetModalForm('#editChargeCategoryForm', '#editChargeCategoryErrorsBox');
  $('#editChargeCategoryTypeId').val('').trigger('change.select2');
});

/***/ }),

/***/ "./resources/assets/js/charges/charges.js":
/*!************************************************!*\
  !*** ./resources/assets/js/charges/charges.js ***!
  \************************************************/
/***/ (() => {

"use strict";


listen('click', '#chargesResetFilter', function () {
  $('#filterChargeType').val(0).trigger('change');
  hideDropdownManually($('#ChargeFilterBtn'), $('.dropdown-menu'));
});
listen('click', '.charge-delete-btn', function (event) {
  var chargeId = $(event.currentTarget).attr('data-id');
  deleteItem($('.chargesURl').val() + '/' + chargeId, '', $('#Charges').val());
});
listenChange('#filterChargeType', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});

/***/ }),

/***/ "./resources/assets/js/charges/create-details-edit.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/charges/create-details-edit.js ***!
  \************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/charges/create-edit.js":
/*!****************************************************!*\
  !*** ./resources/assets/js/charges/create-edit.js ***!
  \****************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadChargeCreateEdit);
function loadChargeCreateEdit() {
  if (!$('#addChargesForm').length && !$('#editChargesForm').length) {
    return false;
  }
  //
  var chargeTypeIdElement = $('#chargeTypeId');
  var chargeCategoryIdElement = $('#chargeCategoryId');
  var editChargeTypeIdElement = $('#editChargeTypeId');
  var editChargeCategoryIdElement = $('#editChargeCategoryId');
  if (chargeTypeIdElement.length) {
    $('#chargeTypeId').select2({
      width: '100%',
      dropdownParent: $('#add_charges_modal'),
      placeholder: 'Select Charge Category'
    });
  }
  if (chargeCategoryIdElement.length) {
    $('#chargeCategoryId').select2({
      width: '100%',
      dropdownParent: $('#add_charges_modal'),
      placeholder: 'Select Charge Category'
    });
  }
  if (editChargeTypeIdElement.length) {
    $('#editChargeTypeId').select2({
      width: '100%',
      dropdownParent: $('#edit_charges_modal'),
      placeholder: 'Select Charge Category'
    });
  }
  if (editChargeCategoryIdElement.length) {
    $('#editChargeCategoryId').select2({
      width: '100%',
      dropdownParent: $('#edit_charges_modal'),
      placeholder: 'Select Charge Category'
    });
  }
}

// listenShownBsModal('#add_charges_modal, #edit_charges_modal', function () {
//         $('#chargeTypeId, #editChargeTypeId:first').focus();
// });

function changeChargeCategory(selector, id) {
  $.ajax({
    url: $('.changeChargeTypeURL').val(),
    type: 'get',
    dataType: 'json',
    data: {
      id: id
    },
    success: function success(data) {
      $(selector).empty();
      $.each(data.data, function (i, v) {
        $(selector).append($('<option></option>').attr('value', i).text(v));
      });
    }
  });
}
listenChange('#chargeTypeId', function () {
  changeChargeCategory('#chargeCategoryId', $(this).val());
});
listenChange('#editChargeTypeId', function () {
  changeChargeCategory('#editChargeCategoryId', $(this).val());
});
listenSubmit('#addChargesForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#chargesSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#createChargesURL').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_charges_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#chargesErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenClick('.charge-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var chargeId = $(event.currentTarget).attr('data-id');
  renderChargeData(chargeId);
});
function renderChargeData(id) {
  $.ajax({
    url: $('.chargesURl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#chargeId').val(result.data.id);
        $('#editChargeTypeId').val(result.data.charge_type).trigger('change.select2');
        changeChargeCategory('#editChargeCategoryId', result.data.charge_type);
        $('#editCode').val(result.data.code);
        $('#editChargesDescription').val(result.data.description);
        $('#editStdCharge').val(addCommas(result.data.standard_charge));
        setTimeout(function () {
          $('#editChargeCategoryId').val(result.data.charge_category_id).trigger('change.select2');
        }, 2000);
        $('#edit_charges_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#editChargesForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editChargesSave');
  loadingButton.button('loading');
  var id = $('#chargeId').val();
  $.ajax({
    url: $('.chargesURl').val() + '/' + id,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_charges_modal').modal('hide');
        if ($('#chargeDetailShowUrl').length) {
          window.location.href = $('#chargeDetailShowUrl').val();
        } else {
          livewire.emit('refresh');
        }
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_charges_modal', function () {
  resetModalForm('#addChargesForm', '#chargesErrorsBox');
  $('#chargeTypeId,#chargeCategoryId').val('').trigger('change.select2');
});
listenHiddenBsModal('#edit_charges_modal', function () {
  resetModalForm('#editChargesForm', '#editChargesErrorsBox');
  $('#editChargeTypeId,#editChargeCategoryId').val('').trigger('change.select2');
});

/***/ }),

/***/ "./resources/assets/js/currency_settings/create_edit.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/currency_settings/create_edit.js ***!
  \**************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadCurrencyData);
function loadCurrencyData() {}
listenSubmit('#addCurrencyForm', function (e) {
  e.preventDefault();
  $.ajax({
    url: $('#indexCurrencyCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_currency_modal').modal('hide');
        Livewire.emit('refresh');
      }
    },
    error: function error(result) {
      displayErrorMessage(result.responseJSON.message);
    }
  });
});
listenHiddenBsModal('#add_currency_modal', function () {
  resetModalForm('#addCurrencyForm');
});
listenClick('.currency-edit-btn', function (event) {
  var currencyId = $(event.currentTarget).attr('data-id');
  renderCurrencyData(currencyId);
});
function renderCurrencyData(id) {
  $.ajax({
    url: $('#indexCurrenciesUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      // console.log(result.success)
      if (result.success) {
        var currency = result.data;
        $('#editCurrencyId').val(currency.id);
        $('#editCurrencyName').val(currency.currency_name);
        $('#editCurrencyCode').val(currency.currency_code);
        $('#editCurrencyIcon').val(currency.currency_icon);
        $('#edit_currency_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#editCurrencyForm', function (e) {
  e.preventDefault();
  var id = $('#editCurrencyId').val();
  $.ajax({
    url: $('#indexCurrenciesUrl').val() + '/' + id,
    type: 'put',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_currency_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      displayErrorMessage(result.responseJSON.message);
    }
  });
});
listenHiddenBsModal('#edit_currency_modal', function () {
  resetModalForm('#editCurrencyForm');
});
listenClick('.currency-delete-btn', function (event) {
  var currencyId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexCurrenciesUrl').val() + '/' + currencyId, '',
  // Lang.get('messages.currency.currency'));
  $('#Currency').val());
});

/***/ }),

/***/ "./resources/assets/js/custom/add-edit-profile-picture.js":
/*!****************************************************************!*\
  !*** ./resources/assets/js/custom/add-edit-profile-picture.js ***!
  \****************************************************************/
/***/ (() => {

"use strict";


listenChange('#profileImage', function () {
  var extension = isValidDocument($(this), '#customValidationErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#customValidationErrorsBox').html('').hide();
    displayPhoto(this, '#previewImage');
  }
});
window.isValidDocument = function (inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['gif', 'png', 'jpg', 'jpeg']) == -1) {
    $(inputSelector).val('');
    $(validationMessageSelector).html('The profile image must be a file of type: jpeg, jpg, png, gif.').removeClass('d-none').show();
    setTimeout(function () {
      $(validationMessageSelector).slideUp(300);
    }, 5000);
    return false;
  }
  $(validationMessageSelector).addClass('d-none');
  return ext;
};
window.displayPhoto = function (input, selector) {
  var displayPreview = true;
  if (input.files && input.files[0]) {
    var reader = new FileReader();
    reader.onload = function (e) {
      var image = new Image();
      image.src = e.target.result;
      image.onload = function () {
        $(selector).attr('src', e.target.result);
        displayPreview = true;
      };
    };
    if (displayPreview) {
      reader.readAsDataURL(input.files[0]);
      $(selector).show();
    }
  }
};

/***/ }),

/***/ "./resources/assets/js/custom/custom-datatable.js":
/*!********************************************************!*\
  !*** ./resources/assets/js/custom/custom-datatable.js ***!
  \********************************************************/
/***/ (() => {

"use strict";


window.handleSearchDatatable = function (tbl) {
  var filterSearch = document.querySelector('[data-datatable-filter="search"]');
  filterSearch.addEventListener('keyup', function (e) {
    tbl.search(e.target.value).draw();
  });
  filterSearch.addEventListener('search', function (e) {
    tbl.search(e.target.value).draw();
  });
};
$.extend($.fn.dataTable.defaults, {
  'paging': true,
  'info': true,
  'ordering': true,
  'autoWidth': false,
  'pageLength': 10,
  'language': {
    'search': '',
    'sSearch': 'Search'
  },
  "preDrawCallback": function preDrawCallback() {
    customSearch();
  }
});
function customSearch() {
  $('.dataTables_filter input').addClass("form-control");
  $('.dataTables_filter input').attr("placeholder", "Search");
}

/***/ }),

/***/ "./resources/assets/js/custom/custom.js":
/*!**********************************************!*\
  !*** ./resources/assets/js/custom/custom.js ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


var jsrender = __webpack_require__(/*! jsrender */ "./node_modules/jsrender/jsrender.js");
var csrfToken = $('meta[name="csrf-token"]').attr('content');
$.ajaxSetup({
  headers: {
    'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
  }
});
document.addEventListener('turbo:load', initAllComponents);
function initAllComponents() {
  select2initialize();
  refreshCsrfToken();
  alertInitialize();
  modalInputFocus();
  inputFocus();
  IOInitImageComponent();
  IOInitSidebar();
}
var firstTime = true;
function select2initialize() {
  $('[data-control="select2"]').each(function () {
    $(this).select2();
  });
}
$('.getLanguage').val();
function refreshCsrfToken() {
  csrfToken = $('meta[name="csrf-token"]').attr('content');
  $.ajaxSetup({
    headers: {
      'X-CSRF-TOKEN': csrfToken
    }
  });
}
function alertInitialize() {
  $('.alert').delay(5000).slideUp(300);
}
var modalInputFocus = function modalInputFocus() {
  $(function () {
    $('.modal').on('shown.bs.modal', function () {
      $(this).find('input:text').first().focus();
    });
  });
};
var inputFocus = function inputFocus() {
  $('input:text:not([readonly="readonly"]):not([name="search"]):not(.front-input)').first().focus();
};
$(document).on('keydown', function (e) {
  if (e.keyCode === 27) {
    $('.modal').modal('hide');
  }
});
$('input:text:not([readonly="readonly"])').first().focus();
$(document).on('select2:open', function () {
  var allFound = document.querySelectorAll('.select2-container--open .select2-search__field');
  allFound[allFound.length - 1].focus();
});
$('[data-control="select2"]').each(function () {
  $(this).select2();
});
document.addEventListener('livewire:load', function () {
  window.livewire.hook('message.processed', function () {
    $('[data-control="select2"]').each(function () {
      $(this).select2();
    });
  });
});
$(document).on('focus', '.select2.select2-container', function (e) {
  var isOriginalEvent = e.originalEvent; // don't re-open on closing focus event
  var isSingleSelect = $(this).find('.select2-selection--single').length > 0; // multi-select will pass focus to input

  if (isOriginalEvent && isSingleSelect) {
    $(this).siblings('select:enabled').select2('open');
  }
});
$(document).ready(function () {
  // initializer script for bootstrap 4 tooltip
  $('[data-bs-toggle="tooltip"]').tooltip();
  function tooltip() {
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
      return new bootstrap.Tooltip(tooltipTriggerEl);
    });
  }

  // script to active parent menu if sub menu has currently active
  var hasActiveMenu = $(document).find('.nav-item.nav-dropdown ul li.nav-item').hasClass('active');
  if (hasActiveMenu) $(document).find('.nav-item.nav-dropdown ul li.nav-item.active').parent('ul').parent('li').addClass('open');
  listenClick('.nav-item.nav-dropdown', function () {
    var openLiSelector = $(document).find('.nav-item.nav-dropdown').hasClass('open');
    if (openLiSelector && $(this).hasClass('open')) setTimeout(function () {
      $(this).removeClass('open');
    }, 1000);else $(document).find('.nav-item.nav-dropdown').removeClass('open');
  });

  // remove capital letters from email validation script.
  listenKeyup('input[name="email"]', function () {
    this.value = this.value.toLowerCase();
  });
  $('input[name="email"]').keypress(function (e) {
    if (e.which === 32) return false;
  });
});
$(function () {
  listenShownBsModal('.modal', function () {
    $(this).find('input:text').first().focus();
  });
  listenHiddenBsModal('.modal', function () {
    $('.image-input.image-input-empty').attr('style', 'display:inline-block');
  });
});
window.resetModalForm = function (formId, validationBox) {
  var inputs = $(formId)[0].elements;
  $.each(inputs, function (index, value) {
    if (typeof value._flatpickr !== 'undefined') {
      value._flatpickr.clear();
      value._flatpickr.setDate(new Date());
    }
  });
  $(formId)[0].reset();
  $('select.select2Selector').each(function (index, element) {
    var drpSelector = '#' + $(this).attr('id');
    $(drpSelector).val('');
    $(drpSelector).trigger('change');
  });
  $(validationBox).hide();
};
window.processingBtn = function (selecter, btnId) {
  var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var loadingButton = $(selecter).find(btnId);
  if (state === 'loading') {
    loadingButton.button('loading');
  } else {
    loadingButton.button('reset');
  }
};
window.printErrorMessage = function (selector, errorResult) {
  // $(selector).show().html("");
  // $(selector).text(errorResult.responseJSON.message);
  displayErrorMessage(errorResult.responseJSON.message);
};
toastr.options = {
  'closeButton': true,
  "debug": false,
  "newestOnTop": false,
  "progressBar": true,
  "positionClass": "toast-top-right",
  "preventDuplicates": false,
  "onclick": null,
  "showDuration": "300",
  "hideDuration": "1000",
  "timeOut": "5000",
  "extendedTimeOut": "1000",
  "showEasing": "swing",
  "hideEasing": "linear",
  "showMethod": "fadeIn",
  "hideMethod": "fadeOut"
};
window.manageAjaxErrors = function (data) {
  var errorDivId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'editValidationErrorsBox';
  if (data.status == 404) {
    toastr.error(data.responseJSON.message);
  } else {
    printErrorMessage("#" + errorDivId, data);
  }
};
window.displaySuccessMessage = function (message) {
  toastr.success(message);
};
window.displayErrorMessage = function (message) {
  toastr.error(message);
};
window.displayPhoto = function (input, selector) {
  var displayPreview = true;
  if (input.files && input.files[0]) {
    var reader = new FileReader();
    reader.onload = function (e) {
      var image = new Image();
      image.src = e.target.result;
      image.onload = function () {
        $(selector).attr('src', e.target.result);
        displayPreview = true;
      };
    };
    if (displayPreview) {
      reader.readAsDataURL(input.files[0]);
      $(selector).show();
    }
  }
};
window.isValidFile = function (inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['gif', 'png', 'jpg', 'jpeg']) == -1) {
    $(inputSelector).val('');
    $(validationMessageSelector).html('The image must be a file of type: jpeg, jpg, png.').removeClass('d-none').show();
    setTimeout(function () {
      $(validationMessageSelector).slideUp(300);
    }, 5000);
    return false;
  }
  $(validationMessageSelector).addClass('d-none');
  return true;
};
window.format = function (dateTime) {
  var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'YYYY-MM-DD';
  return moment(dateTime).format(format);
};
window.DatetimepickerDefaults = function (opts) {
  return $.extend({}, {
    sideBySide: true,
    ignoreReadonly: true,
    icons: {
      up: "icon-arrow-up-circle icons font-2xl",
      down: "icon-arrow-down-circle icons font-2xl",
      previous: 'icon-arrow-left icons',
      next: 'icon-arrow-right icons',
      time: 'fa fa-clock-o',
      date: 'fa fa-calendar',
      today: 'fa fa-crosshairs',
      clear: 'fa fa-trash',
      close: 'fa fa-times'
    }
  }, opts);
};
window.screenLock = function () {
  $('#overlay-screen-lock').show();
  $('body').css({
    'pointer-events': 'none',
    'opacity': '0.6'
  });
};
window.screenUnLock = function () {
  $('body').css({
    'pointer-events': 'auto',
    'opacity': '1'
  });
  $("#overlay-screen-lock").hide();
};
window.prepareTemplateRender = function (templateSelector, data) {
  var template = jsrender.templates(templateSelector);
  return template.render(data);
};

/**
 * @return string
 */
window.getCurrentCurrencyClass = function () {
  return '<b>' + $('.currentCurrency').val() + '</b>';
};

/**
 * @return string
 */
window.getCurrentCurrency = function () {
  return $('.getCurrentCurrency').val();
};
window.hideDropdownManually = function (dropdownBtnEle, dropdownEle) {
  dropdownBtnEle.removeClass('show');
  dropdownEle.removeClass('show');
};
window.displayDocument = function (input, selector, extension) {
  var displayPreview = true;
  if (input.files && input.files[0]) {
    var reader = new FileReader();
    reader.onload = function (e) {
      var image = new Image();
      if ($.inArray(extension, ['pdf', 'doc', 'docx', 'mp3', 'mp4']) == -1) {
        image.src = e.target.result;
      } else {
        if (extension == 'pdf') {
          $('#editPhoto').css('background-image', 'url("' + $('.pdfDocumentImageUrl').val() + '")');
          image.src = $('.pdfDocumentImageUrl').val();
        } else if (extension == 'mp3') {
          image.src = $('.audioDocumentImageUrl').val();
        } else if (extension == 'mp4') {
          image.src = $('.videoDocumentImageUrl').val();
        } else {
          image.src = $('.docxDocumentImageUrl').val();
        }
      }
      image.onload = function () {
        $(selector).attr('src', image.src);
        $(selector).css('background-image', 'url("' + image.src + '")');
        displayPreview = true;
      };
    };
    if (displayPreview) {
      reader.readAsDataURL(input.files[0]);
      $(selector).show();
    }
  }
};
var ajaxCallIsRunning = $('.ajaxCallIsRunning').val();
window.ajaxCallInProgress = function () {
  ajaxCallIsRunning = true;
};
window.ajaxCallCompleted = function () {
  ajaxCallIsRunning = false;
};
window.UnprocessableInputError = function (data) {
  toastr.error(data.responseJSON.message);
};

// set N/A if span tag is empty
window.setValueOfEmptySpan = function () {
  $('span.showSpan').each(function () {
    if (!$(this).text()) {
      $(this).text('N/A');
    }
  });
};

// Add comma into numbers
window.addCommas = function (number) {
  number += '';
  var x = number.split('.');
  var x1 = x[0];
  var x2 = x.length > 1 ? '.' + x[1] : '';
  var rgx = /(\d+)(\d{3})/;
  while (rgx.test(x1)) {
    x1 = x1.replace(rgx, '$1' + ',' + '$2');
  }
  return x1 + x2;
};
$(function () {
  listenClick('.notification', function (e) {
    e.stopPropagation();
    var notificationId = $(this).data('id');
    var notification = $(this);
    $('[data-toggle="tooltip"]').tooltip('hide');
    $.ajax({
      type: 'get',
      url: '/notification/' + notificationId + '/read',
      success: function success() {
        notification.remove();
        displaySuccessMessage('Notification read successfully');
        var notificationCounter = document.getElementsByClassName('notification').length;
        $('#counter').text(notificationCounter);
        if (notificationCounter == 0) {
          $('.read-all-notification').addClass('d-none');
          $('.empty-state').removeClass('d-none');
          $('#counter').text(notificationCounter);
          $('.notification-count').addClass('d-none');
        }
      },
      error: function error(result) {
        manageAjaxErrors(result);
      }
    });
  });
  listenClick('#readAllNotification', function (e) {
    e.stopPropagation();
    $.ajax({
      type: 'post',
      url: '/read-all-notification',
      success: function success() {
        $('.notification').remove();
        displaySuccessMessage('All Notifications read successfully');
        var notificationCounter = document.getElementsByClassName('notification').length;
        $('#counter').text(notificationCounter);
        $('#readAllNotification').addClass('d-none');
        $('.empty-state').addClass('d-none');
        $('.empty-state.empty-notification').removeClass('d-none');
        $('.notification-count').addClass('d-none');
        displaySuccessMessage('All notifications read successfully');
      },
      error: function error(result) {
        manageAjaxErrors(result);
      }
    });
  });
});
window.avoidSpace = function (event) {
  var k = event ? event.which : window.event.keyCode;
  if (k == 32 && event.path[0].value.length <= 0) {
    return false;
  }
};
var defaultAvatarImageUrl = "asset('assets/img/avatar.png')";
window.defaultImagePreview = function (imagePreviewSelector) {
  var id = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  if (id == 1) {
    $(imagePreviewSelector).css('background-image', 'url("' + defaultAvatarImageUrl + '")');
  } else {
    $(imagePreviewSelector).css('background-image', 'url("' + $('.defaultDocumentImageUrl').val() + '")');
  }
};
window.cancelAppointment = function (url, tableId, header, appointmentId) {
  swal({
    title: Lang.get('messages.common.cancel') + ' ' + Lang.get('messages.web_menu.appointment'),
    text: Lang.get('messages.appointment.are_you_sure_want_to_cancel') + ' ' + header + ' ?',
    type: 'warning',
    icon: 'warning',
    closeOnConfirm: false,
    confirmButtonColor: '#000000',
    showLoaderOnConfirm: true,
    buttons: {
      confirm: Lang.get('messages.common.yes'),
      cancel: Lang.get('messages.common.no')
    }
  }).then(function (result) {
    if (result) {
      cancelAppointmentAjax(url, tableId, header, appointmentId);
    }
  });
};
function cancelAppointmentAjax(url, tableId, header, appointmentId) {
  $.ajax({
    url: url,
    type: 'POST',
    success: function success(obj) {
      if (obj.success) {
        Livewire.emit('refresh');
      }
      swal({
        title: Lang.get('messages.common.canceled') + ' ' + Lang.get('messages.web_menu.appointment'),
        text: header + Lang.get('messages.appointment.has_been_cancelled'),
        icon: 'success',
        confirmButtonColor: '#D9214E',
        buttons: {
          confirm: Lang.get('messages.common.ok')
        },
        timer: 2000
      });
    },
    error: function error(data) {
      swal({
        title: 'Error',
        icon: 'error',
        text: data.responseJSON.message,
        type: 'error',
        confirmButtonColor: '#D9214E',
        buttons: {
          confirm: Lang.get('messages.common.ok')
        },
        timer: 5000
      });
    }
  });
}

/***/ }),

/***/ "./resources/assets/js/custom/delete.js":
/*!**********************************************!*\
  !*** ./resources/assets/js/custom/delete.js ***!
  \**********************************************/
/***/ (() => {

"use strict";


window.deleteItem = function (url) {
  var tableId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var header = arguments.length > 2 ? arguments[2] : undefined;
  var callFunction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  swal({
    title: $('.deleteVariable').val(),
    text: $('.confirmVariable').val() + header + '?',
    icon: $('.sweetAlertIcon').val(),
    buttons: {
      confirm: $('.yesVariable').val() + ', ' + $('.deleteVariable').val(),
      cancel: $('.noVariable').val() + ', ' + $('.cancelVariable').val()
    }
  }).then(function (result) {
    if (result) {
      Livewire.emit('refresh');
      deleteItemAjax(url, tableId = null, header, callFunction = null);
    }
  });
};
function deleteItemAjax(url) {
  var tableId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var header = arguments.length > 2 ? arguments[2] : undefined;
  var callFunction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  $.ajax({
    url: url,
    type: 'DELETE',
    dataType: 'json',
    success: function success(obj) {
      if (obj.success) {
        Livewire.emit('refresh');
      }
      swal({
        icon: 'success',
        title: $('.deletedVariable').val(),
        confirmButtonColor: '#f62947',
        text: header + ' ' + $('.hasBeenDeletedVariable').val(),
        timer: 2000,
        buttons: {
          confirm: $('.okVariable').val()
        }
      });
      if (callFunction) {
        eval(callFunction);
      }
    },
    error: function error(data) {
      swal({
        title: '',
        text: data.responseJSON.message,
        confirmButtonColor: '#f62947',
        icon: 'error',
        timer: 5000,
        buttons: {
          confirm: $('.okVariable').val()
        }
      });
    }
  });
}

/***/ }),

/***/ "./resources/assets/js/custom/helpers.js":
/*!***********************************************!*\
  !*** ./resources/assets/js/custom/helpers.js ***!
  \***********************************************/
/***/ (() => {

"use strict";


window.isEmpty = function (value) {
  return value === undefined || value === null || value === '';
};
window.randomCode = function () {
  var length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 6;
  return Math.random().toString(36).slice(-length);
};
window.listen = function (event, selector, callback) {
  $(document).on(event, selector, callback);
};
window.listenClick = function (selector, callback) {
  $(document).on('click', selector, callback);
};
window.listenSubmit = function (selector, callback) {
  $(document).on('submit', selector, callback);
};
window.listenHiddenBsModal = function (selector, callback) {
  $(document).on('hidden.bs.modal', selector, callback);
};
window.listenChange = function (selector, callback) {
  $(document).on('change', selector, callback);
};
window.listenKeyup = function (selector, callback) {
  $(document).on('keyup', selector, callback);
};
window.listenShownBsModal = function (selector, callback) {
  $(document).on('shown.bs.modal', selector, callback);
};

/***/ }),

/***/ "./resources/assets/js/custom/input_price_format.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/custom/input_price_format.js ***!
  \**********************************************************/
/***/ (() => {

"use strict";


window.setPrice = function (selector, price) {
  if (price != '' || price > 0) {
    if (typeof price !== 'number') {
      price = price.replace(/,/g, '');
    }
    var formattedPrice = addCommas(price);
    $(selector).val(formattedPrice);
  }
};
window.addCommas = function (nStr) {
  nStr += '';
  var x = nStr.split('.');
  var x1 = x[0];
  var x2 = x.length > 1 ? '.' + x[1] : '';
  var rgx = /(\d+)(\d{3})/;
  while (rgx.test(x1)) {
    x1 = x1.replace(rgx, '$1' + ',' + '$2');
  }
  return x1 + x2;
};
window.getFormattedPrice = function (price) {
  if (price != '' || price > 0) {
    if (typeof price !== 'number') {
      price = price.replace(/,/g, '');
    }
    return addCommas(price);
  }
};
window.priceFormatSelector = function (selector) {
  listen('input keyup keydown keypress', selector, function (event) {
    var price = $(this).val();
    if (price === '') {
      $(this).val('');
    } else {
      if (/^[0-9]+(,[0-9]+)*$/.test(price)) {
        $(this).val(getFormattedPrice(price));
        return true;
      } else {
        $(this).val(price.replace(/\D/g, ''));
      }
    }
  });
};
window.removeCommas = function (str) {
  return str.replace(/,/g, '');
};
priceFormatSelector('.price-input');

/***/ }),

/***/ "./resources/assets/js/custom/new-edit-modal-form.js":
/*!***********************************************************!*\
  !*** ./resources/assets/js/custom/new-edit-modal-form.js ***!
  \***********************************************************/
/***/ (() => {

"use strict";


window.newRecord = function (data, loadingButton) {
  var modalSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#AddModal';
  var formData = data.formSelector === '' ? data.formData : new FormData($(data.formSelector)[0]);
  loadingButton.attr('disabled', true);
  $.ajax({
    url: data.url,
    type: data.type,
    dataType: 'json',
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $(modalSelector).modal('hide');
        loadingButton.attr('disabled', false);
        // $(data.tableSelector).DataTable().ajax.reload(null, false);
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      displayErrorMessage(result.responseJSON.message);
      loadingButton.attr('disabled', false);
      // loadingButton.attr('disabled', false);
      // printErrorMessage('#validationErrorsBox', result);
      // displayErrorMessage($('#validationErrorsBox').text())
    },

    complete: function complete() {
      loadingButton.button('reset');
    }
  });
};
window.editRecord = function (data, loadingButton) {
  var modalSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#EditModal';
  var btnToDisabledSelector = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
  loadingButton.attr('disabled', true);
  var formData = data.formSelector === '' ? data.formData : new FormData($(data.formSelector)[0]);
  $.ajax({
    url: data.url,
    type: data.type,
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $(modalSelector).modal('hide');
        loadingButton.attr('disabled', false);
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      loadingButton.attr('disabled', false);
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
      $(btnToDisabledSelector).attr('disabled', true);
    }
  });
};
window.editRecordWithForm = function (data, loadingButton) {
  var modalSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#EditModal';
  var formData = data.formSelector === '' ? data.formData : $(data.formSelector).serialize();
  loadingButton.attr('disabled', true);
  $.ajax({
    url: data.url,
    type: data.type,
    data: formData,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $(modalSelector).modal('hide');
        loadingButton.attr('disabled', false);
        livewire.emit('refresh');
        // $(data.tableSelector).DataTable().ajax.reload(null, false);
      }
    },

    error: function error(result) {
      loadingButton.attr('disabled', false);
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
};

/***/ }),

/***/ "./resources/assets/js/custom/phone-number-country-code.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/js/custom/phone-number-country-code.js ***!
  \*****************************************************************/
/***/ (() => {

"use strict";
// 'use strict';
//
// let input = document.querySelector('.phoneNumber'),
//     errorMsg = document.querySelector('.error-msg'),
//     validMsg = document.querySelector('.valid-msg');
//
// let errorMap = [
//     'Invalid number',
//     'Invalid country code',
//     'Too short',
//     'Too long',
//     'Invalid number'];
//
// // initialise plugin
// let intl = window.intlTelInput(input, {
//     initialCountry: 'auto',
//     separateDialCode: true,
//     geoIpLookup: function (success, failure) {
//         $.get('https://ipinfo.io', function () {
//         }, 'jsonp').always(function (resp) {
//             var countryCode = (resp && resp.country)
//                 ? resp.country
//                 : '';
//             success(countryCode);
//         });
//     },
//     utilsScript: $('.utilsScript').val(),
// });
//
// let reset = function () {
//     input.classList.remove('error');
//     errorMsg.innerHTML = '';
//     errorMsg.classList.add('d-none');
//     validMsg.classList.add('d-none');
// };
//
// input.addEventListener('blur', function () {
//     reset();
//     if (input.value.trim()) {
//         if (intl.isValidNumber()) {
//             validMsg.classList.remove('d-none');
//         } else {
//             input.classList.add('error');
//             var errorCode = intl.getValidationError();
//             errorMsg.innerHTML = errorMap[errorCode];
//             errorMsg.classList.remove('d-none');
//         }
//     }
// });
//
// // on keyup / change flag: reset
// input.addEventListener('change', reset);
// input.addEventListener('keyup', reset);
// const phoneNo = $('.phoneNo').val();
// if (typeof phoneNo != 'undefined' && phoneNo !== '') {
//     setTimeout(function () {
//         $('.phoneNumber').trigger('change');
//     }, 500);
// }
// listen('blur keyup change countrychange', function () {
//     if (typeof phoneNo != 'undefined' && phoneNo !== '') {
//         intl.setNumber('+' + phoneNo);
//         phoneNo = '';
//     }
//     let getCode = intl.selectedCountryData['dialCode'];
//     $('.prefix_code').val(getCode);
// });
//
// if ($('.isEdit').val()) {
//     let getCode = intl.selectedCountryData['dialCode'];
//     $('.prefix_code').val(getCode);
// }
//
// let getPhoneNumber = $('.phoneNumber').val();
// let removeSpacePhoneNumber = getPhoneNumber.replace(/\s/g, '');
// $('.phoneNumber').val(removeSpacePhoneNumber);
//
// $(document).ready(function () {
//     $('.phoneNumber').focus();
//     $('.phoneNumber').blur();
//     let getPhoneNumber = $('.phoneNumber').val();
//     let removeSpacePhoneNumber = getPhoneNumber.replace(/\s/g, '');
//     $('.phoneNumber').val(removeSpacePhoneNumber);
// });



function _readOnlyError(name) { throw new TypeError("\"" + name + "\" is read-only"); }
document.addEventListener('turbo:load', loadPhoneNumberCountryCodeData);
function loadPhoneNumberCountryCodeData() {
  if (!$('.phoneNumber').length) {
    return false;
  }
  Lang.setLocale($('.userCurrentLanguage').val());
  var input = document.querySelector('.phoneNumber'),
    errorMsg = document.querySelector('.error-msg'),
    validMsg = document.querySelector('.valid-msg');
  var errorMap = [Lang.get('messages.common.invalid_number'), Lang.get('messages.common.invalid_country_code'), Lang.get('messages.common.too_short'), Lang.get('messages.common.too_long')];
  // initialise plugin
  if ($('.isEdit').val()) {
    var countryValue = $('.country_iso').val();
  } else {
    var countryValue = $('.getISOCode').val();
  }
  var intl = window.intlTelInput(input, {
    initialCountry: countryValue,
    separateDialCode: true,
    geoIpLookup: function geoIpLookup(success, failure) {
      $.get('https://ipinfo.io', function () {}, 'jsonp').always(function (resp) {
        var countryCode = resp && resp.country ? resp.country : '';
        success(countryCode);
      });
    },
    utilsScript: $('.utilsScript').val()
  });
  var reset = function reset() {
    input.classList.remove('error');
    errorMsg.innerHTML = '';
    errorMsg.classList.add('d-none');
    validMsg.classList.add('d-none');
  };
  input.addEventListener('blur', function () {
    reset();
    if (input.value.trim()) {
      if (intl.isValidNumber()) {
        validMsg.classList.remove('d-none');
      } else {
        input.classList.add('error');
        var errorCode = intl.getValidationError();
        errorMsg.innerHTML = errorMap[errorCode];
        errorMsg.classList.remove('d-none');
      }
    }
  });

  // on keyup / change flag: reset
  input.addEventListener('change', reset);
  input.addEventListener('keyup', reset);
  var phoneNo = $('.phoneNo').val();
  if (typeof phoneNo != 'undefined' && phoneNo !== '') {
    setTimeout(function () {
      $('.phoneNumber').trigger('change');
    }, 500);
  }
  listen('blur keyup change countrychange', function () {
    if (typeof phoneNo != 'undefined' && phoneNo !== '') {
      intl.setNumber('+' + phoneNo);
      '', _readOnlyError("phoneNo");
    }
    var getCode = intl.selectedCountryData['dialCode'];
    $('.prefix_code').val(getCode);
  });
  if ($('.isEdit').val()) {
    var getCode = intl.selectedCountryData['dialCode'];
    var country_iso = intl.selectedCountryData['iso2'];
    $('.prefix_code').val(getCode);
    $('.country_iso').val(country_iso);
  }
  $('.phoneNumber').focus();
  $('.phoneNumber').blur();
  var getPhoneNumber = $('.phoneNumber').val();
  var removeDashPhoneNumber = getPhoneNumber.replaceAll('-', ' ');
  var removeSpacePhoneNumber = removeDashPhoneNumber.replace(/\s/g, '');
  $('.phoneNumber').val(removeSpacePhoneNumber);
}

/***/ }),

/***/ "./resources/assets/js/custom/reset_models.js":
/*!****************************************************!*\
  !*** ./resources/assets/js/custom/reset_models.js ***!
  \****************************************************/
/***/ (() => {

"use strict";


listenHiddenBsModal('#AddModal', function () {
  $('.preview-image').prop('src', $('.defaultImageUrl').val());
  $('.select2-dd').val('').trigger('change.select2');
  resetModalForm('#addNewForm', '#validationErrorsBox');
});
listenHiddenBsModal('#EditModal', function () {
  $('.preview-image').prop('src', $('.defaultImageUrl').val());
  $('.select2-dd').val('').trigger('change.select2');
  resetModalForm('#editForm', '#editValidationErrorsBox');
});

/***/ }),

/***/ "./resources/assets/js/dashboard/dashboard.js":
/*!****************************************************!*\
  !*** ./resources/assets/js/dashboard/dashboard.js ***!
  \****************************************************/
/***/ (() => {

"use strict";


listenClick('.notice-board-view-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var noticeBoardId = $(event.currentTarget).attr('data-id');
  $.ajax({
    url: $('.noticeBoardUrl').val() + '/' + noticeBoardId,
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#showNoticeBoardTitle').html('');
        $('#showNoticeBoardDescription').html('');
        $('#showNoticeBoardTitle').append(result.data.title);
        $('#showNoticeBoardDescription').append(result.data.description);
        $('#show_notice_boards_modal').appendTo('body').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
});

/***/ }),

/***/ "./resources/assets/js/death_reports/create-edit.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/death_reports/create-edit.js ***!
  \**********************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadDeathReportsCreateEdit);
function loadDeathReportsCreateEdit() {
  if (!$('#addDeathReportForm').length && !$('#editDeathReportForm').length) {
    return false;
  }
  var deathCaseIdElement = $('#deathCaseId');
  var deathDoctorIdElement = $('#deathDoctorId');
  var editDeathCaseIdElement = $('#editDeathCaseId');
  var editDeathDoctorIdElement = $('#editDeathDoctorId');
  var deathDateElement = $('#deathDate');
  var editDeathDateElement = $('#editDeathDate');
  if (deathCaseIdElement.length) {
    $('#deathCaseId').select2({
      width: '100%',
      dropdownParent: $('#add_death_reports_modal')
    });
  }
  if (deathDoctorIdElement.length) {
    $('#deathDoctorId').select2({
      width: '100%',
      dropdownParent: $('#add_death_reports_modal')
    });
  }
  if (editDeathCaseIdElement.length) {
    $('#editDeathCaseId').select2({
      width: '100%',
      dropdownParent: $('#edit_death_reports_modal')
    });
  }
  if (editDeathDoctorIdElement.length) {
    $('#editDeathDoctorId').select2({
      width: '100%',
      dropdownParent: $('#edit_death_reports_modal')
    });
  }
  if (deathDateElement.length) {
    $('#deathDate').flatpickr({
      dateFormat: 'Y-m-d h:i K',
      useCurrent: true,
      enableTime: true,
      sideBySide: true,
      maxDate: new Date(),
      locale: $('.userCurrentLanguage').val()
    });
  }
  if (editDeathDateElement.length) {
    $('#editDeathDate').flatpickr({
      dateFormat: 'Y-m-d h:i K',
      useCurrent: true,
      enableTime: true,
      sideBySide: true,
      maxDate: new Date(),
      locale: $('.userCurrentLanguage').val()
    });
  }
}

// listenShownBsModal('#add_death_reports_modal, #edit_death_reports_modal', function () {
//     $('#deathCaseId, #editDeathCaseId:first').focus();
// });

listenSubmit('#addDeathReportForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#deathReportSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#indexDeathReportCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_death_reports_modal').modal('hide');
        Livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#deathReportErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenClick('.death-report-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var deathReportId = $(event.currentTarget).attr('data-id');
  renderDeathReportData(deathReportId);
});
function renderDeathReportData(id) {
  $.ajax({
    url: $('.deathReportUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#deathReportId').val(result.data.id);
        $('#editDeathCaseId').val(result.data.case_id).trigger('change.select2');
        $('#editDeathDoctorId').val(result.data.doctor_id).trigger('change.select2');
        $('#editDeathDescription').val(result.data.description);
        document.querySelector('#editDeathDate')._flatpickr.setDate(moment(result.data.date).format());
        $('#edit_death_reports_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
;
listenSubmit('#editDeathReportForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editDeathReportSave');
  loadingButton.button('loading');
  var id = $('#deathReportId').val();
  $.ajax({
    url: $('.deathReportUrl').val() + '/' + id,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_death_reports_modal').modal('hide');
        Livewire.emit('refresh');
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_death_reports_modal', function () {
  resetModalForm('#addDeathReportForm', '#deathReportErrorsBox');
  $('#deathCaseId, #deathDoctorId').val('').trigger('change.select2');
});
listenHiddenBsModal('#edit_death_reports_modal', function () {
  resetModalForm('#editDeathReportForm', '#c');
});

/***/ }),

/***/ "./resources/assets/js/death_reports/death_reports-details-edit.js":
/*!*************************************************************************!*\
  !*** ./resources/assets/js/death_reports/death_reports-details-edit.js ***!
  \*************************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/death_reports/death_reports.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/death_reports/death_reports.js ***!
  \************************************************************/
/***/ (() => {

"use strict";


listenClick('.death-report-delete-btn', function (event) {
  var deathReportId = $(event.currentTarget).attr('data-id');
  deleteItem($('.deathReportUrl').val() + '/' + deathReportId, '', $('#deathReport').val());
});

/***/ }),

/***/ "./resources/assets/js/diagnosis_category/diagnosis_category-details-edit.js":
/*!***********************************************************************************!*\
  !*** ./resources/assets/js/diagnosis_category/diagnosis_category-details-edit.js ***!
  \***********************************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/diagnosis_category/diagnosis_category.js":
/*!**********************************************************************!*\
  !*** ./resources/assets/js/diagnosis_category/diagnosis_category.js ***!
  \**********************************************************************/
/***/ (() => {

"use strict";


listenSubmit('#addDiagnosisCatForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#diagnosisCatSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#diagnosisCategoryCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_diagnosis_categories_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#diagnosisCatErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenClick('.diagnosis-category-delete-btn', function (event) {
  var diagnosisCategoryId = $(event.currentTarget).attr('data-id');
  deleteItem($('#diagnosisCategoryUrl').val() + '/' + diagnosisCategoryId, '', $('#diagnosisCategory').val());
});
listenClick('.diagnosis-category-edit-btn', function (event) {
  var diagnosisCategoryId = $(event.currentTarget).attr('data-id');
  renderDiagnosisCategoryData(diagnosisCategoryId);
});
function renderDiagnosisCategoryData(id) {
  $.ajax({
    url: $('#diagnosisCategoryUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#diagnosisCategoryId').val(result.data.id);
        $('#editDiagnosisCatName').val(result.data.name);
        $('#editDiagnosisCatDescription').val(result.data.description);
        $('#edit_diagnosis_categories_modal').modal('show');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#editDiagnosisCatForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editDiagnosisCatSave');
  loadingButton.button('loading');
  var id = $('#diagnosisCategoryId').val();
  $.ajax({
    url: $('#diagnosisCategoryUrl').val() + '/' + id,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_diagnosis_categories_modal').modal('hide');
        if ($('#diagnosisCategoryShowUrl').length) {
          window.location.href = $('#diagnosisCategoryShowUrl').val();
        } else {
          livewire.emit('refresh');
        }
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_diagnosis_categories_modal', function () {
  resetModalForm('#addDiagnosisCatForm', '#diagnosisCatErrorsBox');
});
listenHiddenBsModal('#edit_diagnosis_categories_modal', function () {
  resetModalForm('#editDiagnosisCatForm', '#editDiagnosisCatErrorsBox');
});

/***/ }),

/***/ "./resources/assets/js/doctor_opd_charges/doctor_opd_charges.js":
/*!**********************************************************************!*\
  !*** ./resources/assets/js/doctor_opd_charges/doctor_opd_charges.js ***!
  \**********************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadDoctorOpdChargeCreateEdit);
function loadDoctorOpdChargeCreateEdit() {
  if (!$('#addDoctorChargesForm').length && !$('#editDoctorChargesForm').length) {
    return false;
  }
  var chargesDoctorIdElement = $('#chargesDoctorId');
  var editChargesDoctorIdElement = $('#editChargesDoctorId');
  if (chargesDoctorIdElement.length) {
    $('#chargesDoctorId').select2({
      width: '100%',
      dropdownParent: $('#add_doctor_opd_charges_modal')
    });
  }
  if (editChargesDoctorIdElement.length) {
    $('#editChargesDoctorId').select2({
      width: '100%',
      dropdownParent: $('#edit_doctor_opd_charges_modal')
    });
  }
}
listenSubmit('#addDoctorChargesForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#doctorChargesSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#doctorOPDCreateChargeURLID').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_doctor_opd_charges_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#doctorChargesErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenClick('.doctor-opd-charge-delete-btn', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  deleteItem($('#doctorOPDChargeURLID').val() + '/' + id, null, $('#doctorOPDCharges').val());
});
listenClick('.doctor-opd-charge-edit-btn', function (event) {
  var doctorOPDChargeId = $(event.currentTarget).attr('data-id');
  renderDoctorOpdChargeData(doctorOPDChargeId);
});
function renderDoctorOpdChargeData(id) {
  $.ajax({
    url: $('#doctorOPDChargeURLID').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#doctorOPDChargeId').val(result.data.id);
        $('#editChargesDoctorId').val(result.data.doctor_id).trigger('change.select2');
        $('#editDoctorStandardCharge').val(result.data.standard_charge);
        $('.price-input').trigger('input');
        $('#edit_doctor_opd_charges_modal').modal('show');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#editDoctorChargesForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editDoctorChargesSave');
  loadingButton.button('loading');
  var id = $('#doctorOPDChargeId').val();
  $.ajax({
    url: $('#doctorOPDChargeURLID').val() + '/' + id,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_doctor_opd_charges_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_doctor_opd_charges_modal', function () {
  resetModalForm('#addDoctorChargesForm', '#doctorChargesErrorsBox');
  $('#chargesDoctorId').val('').trigger('change.select2');
});
listenHiddenBsModal('#edit_doctor_opd_charges_modal', function () {
  resetModalForm('#editDoctorChargesForm', '#editDoctorChargesErrorsBox');
});

// listenShownBsModal('#add_doctor_opd_charges_modal, #edit_doctor_opd_charges_modal', function () {
//     $('#chargesdoctorId, #editChargesDoctorId:first').focus();
// });

/***/ }),

/***/ "./resources/assets/js/doctors/create-edit.js":
/*!****************************************************!*\
  !*** ./resources/assets/js/doctors/create-edit.js ***!
  \****************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadDoctorsCreateEdit);
function loadDoctorsCreateEdit() {
  if ($('#createDoctorForm').length || $('#editDoctorForm').length) {
    var doctorBloodGroupElement = $('#doctorBloodGroup');
    var editDoctorBloodGroupElement = $('#editDoctorBloodGroup');
    var departmentIdElement = $('#departmentId');
    var doctorsDepartmentIdElement = $('#doctorsDepartmentId');
    var editDoctorsDepartmentIdElement = $('#editDoctorsDepartmentId');
    var createDoctorFormElement = $('#createDoctorForm');
    var editDoctorFormElement = $('#editDoctorForm');
    var doctorBirthDateElement = $('#doctorBirthDate');
    var editDoctorBirthDateElement = $('#editDoctorBirthDate');
    if (doctorBloodGroupElement.length) {
      $('#doctorBloodGroup').select2({
        width: '100%'
      });
    }
    if (editDoctorBloodGroupElement.length) {
      $('#editDoctorBloodGroup').select2({
        width: '100%'
      });
    }
    if (departmentIdElement.length) {
      $('#departmentId').select2({
        width: '100%'
      });
    }
    if (doctorsDepartmentIdElement.length) {
      $('#doctorsDepartmentId').select2({
        width: '100%'
      });
    }
    if (editDoctorsDepartmentIdElement.length) {
      $('#editDoctorsDepartmentId').select2({
        width: '100%'
      });
    }
    if (createDoctorFormElement.length) {
      $('#createDoctorForm').find('input:text:visible:first').focus();
    }
    if (editDoctorFormElement.length) {
      $('#editDoctorForm').find('input:text:visible:first').focus();
    }
    if (doctorBirthDateElement.length) {
      $('#doctorBirthDate').flatpickr({
        maxDate: new Date(),
        locale: $('.userCurrentLanguage').val()
      });
    }
    if (editDoctorBirthDateElement.length) {
      $('#editDoctorBirthDate').flatpickr({
        maxDate: new Date(),
        locale: $('.userCurrentLanguage').val()
      });
    }
  } else {
    return false;
  }
}
listenChange('.doctorProfileImage', function () {
  var extension = isValidImage($(this), '#customValidationErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#customValidationErrorsBox').html('').hide();
    displayDocument(this, '#customValidationErrorsBox', extension);
  } else {
    $(this).val('');
    $('#customValidationErrorsBox').removeClass('d-none hide');
    $('#customValidationErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=customValidationErrorsBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
listenChange('.editDoctorProfileImage', function () {
  var extension = isValidImage($(this), '#editDoctorErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#editDoctorErrorsBox').html('').hide();
    displayDocument(this, '#editDoctorErrorsBox', extension);
  } else {
    $(this).val('');
    $('#editDoctorErrorsBox').removeClass('d-none hide');
    $('#editDoctorErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=editDoctorErrorsBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
function isValidImage(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['jpg', 'png', 'jpeg']) == -1) {
    return false;
  }
  $(validationMessageSelector).hide();
  return true;
}
;
listenKeyup('#doctorFacebookUrl,#editDoctorFacebookUrl', function () {
  this.value = this.value.toLowerCase();
});
listenKeyup('#doctorTwitterUrl,#editDoctorTwitterUrl', function () {
  this.value = this.value.toLowerCase();
});
listenKeyup('#doctorInstagramUrl,#editDoctorInstagramUrl', function () {
  this.value = this.value.toLowerCase();
});
listenKeyup('#doctorLinkedInUrl,#editDoctorLinkedInUrl', function () {
  this.value = this.value.toLowerCase();
});
listenSubmit('#createDoctorForm, #editDoctorForm', function () {
  if ($('.error-msg').text() !== '') {
    $('.phoneNumber').focus();
    return false;
  }
  var facebookUrl = $('.facebookUrl').val();
  var twitterUrl = $('.twitterUrl').val();
  var instagramUrl = $('.instagramUrl').val();
  var linkedInUrl = $('.linkedInUrl').val();
  var facebookExp = new RegExp(/^(https?:\/\/)?((m{1}\.)?)?((w{2,3}\.)?)facebook.[a-z]{2,3}\/?.*/i);
  var twitterExp = new RegExp(/^(https?:\/\/)?((m{1}\.)?)?((w{2,3}\.)?)twitter\.[a-z]{2,3}\/?.*/i);
  var instagramUrlExp = new RegExp(/^(https?:\/\/)?((w{2,3}\.)?)instagram.[a-z]{2,3}\/?.*/i);
  var linkedInExp = new RegExp(/^(https?:\/\/)?((w{2,3}\.)?)linkedin\.[a-z]{2,3}\/?.*/i);
  var facebookCheck = facebookUrl == '' ? true : facebookUrl.match(facebookExp) ? true : false;
  if (!facebookCheck) {
    displayErrorMessage('Please enter a valid Facebook URL');
    return false;
  }
  var twitterCheck = twitterUrl == '' ? true : twitterUrl.match(twitterExp) ? true : false;
  if (!twitterCheck) {
    displayErrorMessage('Please enter a valid Twitter URL');
    return false;
  }
  var instagramCheck = instagramUrl == '' ? true : instagramUrl.match(instagramUrlExp) ? true : false;
  if (!instagramCheck) {
    displayErrorMessage('Please enter a valid Instagram URL');
    return false;
  }
  var linkedInCheck = linkedInUrl == '' ? true : linkedInUrl.match(linkedInExp) ? true : false;
  if (!linkedInCheck) {
    displayErrorMessage('Please enter a valid Linkedin URL');
    return false;
  }
});
listenClick('.doctor-remove-image', function () {
  defaultImagePreview('.previewImage', 1);
});

/***/ }),

/***/ "./resources/assets/js/doctors/doctors.js":
/*!************************************************!*\
  !*** ./resources/assets/js/doctors/doctors.js ***!
  \************************************************/
/***/ (() => {

"use strict";


listenClick('.doctor-delete-btn', function (event) {
  var doctorId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexDoctorUrl').val() + '/' + doctorId, '', $('#Doctor').val());
});
listenChange('.doctor-active-status', function (event) {
  var doctorId = $(event.currentTarget).attr('data-id');
  updateDoctorActiveStatus(doctorId);
});
function updateDoctorActiveStatus(id) {
  $.ajax({
    url: $('#indexDoctorUrl').val() + '/' + +id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        Livewire.emit('refresh');
      }
    }
  });
}
;
listenClick('#doctorResetFilter', function () {
  $('#doctorsHead').val(2).trigger('change');
  hideDropdownManually($('#doctorsFilterBtn'), $('.dropdown-menu'));
});
listenChange('#doctorsHead', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});

/***/ }),

/***/ "./resources/assets/js/doctors/doctors_data_listing.js":
/*!*************************************************************!*\
  !*** ./resources/assets/js/doctors/doctors_data_listing.js ***!
  \*************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/doctors_departments/doctor_departments_list.js":
/*!****************************************************************************!*\
  !*** ./resources/assets/js/doctors_departments/doctor_departments_list.js ***!
  \****************************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/doctors_departments/doctors_departments-details-edit.js":
/*!*************************************************************************************!*\
  !*** ./resources/assets/js/doctors_departments/doctors_departments-details-edit.js ***!
  \*************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/doctors_departments/doctors_departments.js":
/*!************************************************************************!*\
  !*** ./resources/assets/js/doctors_departments/doctors_departments.js ***!
  \************************************************************************/
/***/ (() => {

"use strict";


listenClick('.doctor-department-delete-btn', function (event) {
  var doctorDepartmentId = event.currentTarget.dataset.id;
  deleteItem($('#indexDoctorDepartmentUrl').val() + '/' + doctorDepartmentId, '', $('#doctorDepartment').val());
});
listenSubmit('#addDoctorDepartmentForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#doctorDepartmentSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#indexDoctorDepartmentCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_doctor_departments_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#doctorDepartmentErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenClick('.doctor-department-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var doctorDepartmentId = event.currentTarget.dataset.id;
  renderDoctorDepartmentData(doctorDepartmentId);
});
function renderDoctorDepartmentData(id) {
  $.ajax({
    url: $('#indexDoctorDepartmentUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#doctorDepartmentId').val(result.data.id);
        $('#editDoctorDepartmentTitle').val(result.data.title);
        $('#editDoctorDepartmentDescription').val(result.data.description);
        $('#edit_doctor_departments_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#editDoctorDepartmentForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editDoctorDepartmentSave');
  loadingButton.button('loading');
  var id = $('#doctorDepartmentId').val();
  $.ajax({
    url: $('#indexDoctorDepartmentUrl').val() + '/' + id,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_doctor_departments_modal').modal('hide');
        if ($('#showDoctorDepartmentUrl').length) {
          window.location.href = $('#showDoctorDepartmentUrl').val();
        } else {
          livewire.emit('refresh');
        }
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_doctor_departments_modal', function () {
  resetModalForm('#addDoctorDepartmentForm', '#doctorDepartmentErrorsBox');
});
listenHiddenBsModal('#edit_doctor_departments_modal', function () {
  resetModalForm('#editDoctorDepartmentForm', '#editDoctorDepartmentErrorsBox');
});

/***/ }),

/***/ "./resources/assets/js/document/document-details-edit.js":
/*!***************************************************************!*\
  !*** ./resources/assets/js/document/document-details-edit.js ***!
  \***************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/document/document.js":
/*!**************************************************!*\
  !*** ./resources/assets/js/document/document.js ***!
  \**************************************************/
/***/ (() => {

"use strict";


document.addEventListener('turbo:load', loadDocumentCreateEdit);
function loadDocumentCreateEdit() {
  if (!$('.addDocumentForm').length && !$('#editDocumentForm').length) {
    return false;
  }
  var documentPatientIdElement = $('#documentPatientId');
  var documentTypeIdElement = $('#documentTypeId');
  var editDocumentPatientIdElement = $('#editDocumentPatientId');
  var editDocumentTypeIdElement = $('#editDocumentTypeId');
  if (documentPatientIdElement.length) {
    editDocumentTypeId;
    $('#documentPatientId').select2({
      width: '100%',
      dropdownParent: $('#add_documents_modal')
    });
  }
  if (documentTypeIdElement.length) {
    $('#documentTypeId').select2({
      width: '100%',
      dropdownParent: $('#add_documents_modal')
    });
  }
  if (editDocumentPatientIdElement.length) {
    $('#editDocumentPatientId').select2({
      width: '100%',
      dropdownParent: $('#edit_documents_modal')
    });
  }
  if (editDocumentTypeIdElement.length) {
    $('#editDocumentTypeId').select2({
      width: '100%',
      dropdownParent: $('#edit_documents_modal')
    });
  }
}
listenClick('.document-delete-btn', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexDocumentsUrl').val() + '/' + id, '', $('#Documents').val());
});
var documentFileName;
listenChange('#documentImage,#editDocumentImage', function () {
  documentFileName = $(this).val();
});
listenSubmit('.addDocumentForm', function (event) {
  event.preventDefault();
  // if (documentFileName == null || documentFileName == '') {
  //     let message = 'Please select attachment';
  //     displayErrorMessage(message);
  //     return false;
  // }
  if ($('#documentErrorsBox').text() !== '') {
    $('#documentImage').focus();
    displayErrorMessage($('#documentErrorsBox').text());
    return false;
  }
  var loadingButton = jQuery(this).find('#documentSave');
  loadingButton.button('loading');
  loadingButton.button('loading');
  var data = {
    'formSelector': $(this),
    'url': $('#indexDocumentsCreateUrl').val(),
    'type': 'POST'
  };
  newRecord(data, loadingButton, '#add_documents_modal');
});
listenClick('.document-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var documentId = $(event.currentTarget).attr('data-id');
  renderDocumentData(documentId);
});
function renderDocumentData(id) {
  $.ajax({
    url: $('#indexDocumentsUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var ext = result.data.document_url.split('.').pop().toLowerCase();
        if (ext == 'pdf') {
          $('#editDocumentPreviewImage').css('background-image', 'url("' + $('.pdfDocumentImageUrl').val() + '")');
        } else if (ext == 'docx' || ext == 'doc') {
          $('#editDocumentPreviewImage').css('background-image', 'url("' + $('.docxDocumentImageUrl').val() + '")');
        } else {
          $('#editDocumentPreviewImage').css('background-image', 'url("' + result.data.document_url + '")');
        }
        $('#editDocumentTypeId').val(result.data.document_type_id).trigger('change.select2');
        $('#editDocumentPatientId').val(result.data.patient_id).trigger('change.select2');
        $('#editDocumentTitle').val(result.data.title);
        isEmpty(result.data.document_url) ? $('#editDocumentUrl').hide() : $('#editDocumentUrl').attr('href', result.data.document_url);
        $('#documentId').val(result.data.id);
        $('#editDocumentNotes').val(result.data.notes);
        $('#edit_documents_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#editDocumentForm', function (event) {
  event.preventDefault();
  if ($('#editDocumentErrorsBox').text() !== '') {
    $('#documentImage').focus();
    displayErrorMessage($('#editDocumentErrorsBox').text());
    return false;
  }
  var loadingButton = jQuery(this).find('#editDocumentSave');
  loadingButton.button('loading');
  var id = $('#documentId').val();
  var url = $('#indexDocumentsUrl').val() + '/' + id + '/update';
  var data = {
    'formSelector': $(this),
    'url': url,
    'type': 'POST'
  };
  editRecord(data, loadingButton, '#edit_documents_modal');
});
listenHiddenBsModal('#add_documents_modal', function () {
  $('#documentTypeId').val(null).trigger('change');
  $('#documentPatientId').val(null).trigger('change');
  $('#documentPreviewImage').css('background-image', 'url(' + $('#indexDefaultDocumentImageUrl').val() + ')');
  documentFileName = null;
  resetModalForm('.addDocumentForm', '#documentErrorsBox');
});
listenHiddenBsModal('#edit_documents_modal', function () {
  resetModalForm('#editDocumentForm', '#editDocumentErrorsBox');
});
listenShownBsModal('#add_documents_modal,#edit_documents_modal', function () {
  $('#documentTypeId,#documentPatientId').select2({
    width: '100%',
    dropdownParent: $('#add_documents_modal')
  });
  $('#editDocumentTypeId,#editDocumentPatientId').select2({
    width: '100%',
    dropdownParent: $('#edit_documents_modal')
  });
});
listenChange('#documentImage', function () {
  var extension = isValidDocument($(this), '#documentErrorsBox', this);
  if (!isEmpty(extension) && extension != false) {
    $('#documentErrorsBox').html('').hide();
    displayDocument(this, '#documentPreviewImage', extension);
  }
});
listenChange('#editDocumentImage', function () {
  var extension = isValidDocument($(this), '#editDocumentErrorsBox', this);
  if (!isEmpty(extension) && extension != false) {
    $('#editDocumentErrorsBox').html('').hide();
    displayDocument(this, '#editPreviewImage', extension);
  }
});
function isValidDocument(inputSelector, validationMessageSelector, input) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if (input.files[0].size > 10000000) {
    $(inputSelector).val('');
    $(validationMessageSelector).html('The document must be less than 10 mb').show();
    setTimeout(function () {
      $(validationMessageSelector).slideUp(500);
    }, 5000);
    return false;
  }
  if ($.inArray(ext, ['png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx', 'webp']) == -1) {
    $(inputSelector).val('');
    $(validationMessageSelector).html('The document must be a file of type: jpeg, jpg, png, pdf, doc, docx, webp').show();
    setTimeout(function () {
      $(validationMessageSelector).slideUp(500);
    }, 5000);
    return false;
  }
  return ext;
}

/***/ }),

/***/ "./resources/assets/js/document_type/doc_type-details-edit.js":
/*!********************************************************************!*\
  !*** ./resources/assets/js/document_type/doc_type-details-edit.js ***!
  \********************************************************************/
/***/ (() => {

"use strict";


listenClick('.editDocTypeBtn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var docTypeId = $(event.currentTarget).attr('data-id');
  renderDocTypeDetailData(docTypeId);
});
window.renderDocTypeDetailData = function (id) {
  $.ajax({
    url: $('#showDocTypeUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#docTypeId').val(result.data.id);
        $('#editDocTypeName').val(result.data.name);
        $('#edit_document_types_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
};
listenSubmit('#editDocTypeForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editDocTypeSave');
  loadingButton.button('loading');
  var id = $('#docTypeId').val();
  var url = $('#showDocTypeUrl').val() + '/' + id;
  var data = {
    'formSelector': $(this),
    'url': url,
    'type': 'PUT'
  };
  editDocumentTypeRecordWithForm(data, loadingButton);
});
window.editDocumentTypeRecordWithForm = function (data, loadingButton) {
  var formData = data.formSelector === '' ? data.formData : $(data.formSelector).serialize();
  $.ajax({
    url: data.url,
    type: data.type,
    data: formData,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_document_types_modal').modal('hide');
        setTimeout(function () {
          window.location.reload();
        }, 3000);
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
};

/***/ }),

/***/ "./resources/assets/js/document_type/doc_type.js":
/*!*******************************************************!*\
  !*** ./resources/assets/js/document_type/doc_type.js ***!
  \*******************************************************/
/***/ (() => {

listenSubmit('#addDocTypeForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#docTypeSave');
  loadingButton.button('loading');
  var data = {
    'formSelector': $(this),
    'url': $('#indexDocTypeCreateUrl').val(),
    'type': 'POST'
  };
  newRecord(data, loadingButton, '#add_document_types_modal');
});
listenClick('.editDocTypBtn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var docTypeId = $(event.currentTarget).attr('data-id');
  renderDocTypeData(docTypeId);
});
function renderDocTypeData(id) {
  $.ajax({
    url: $('#indexDocTypeUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#docTypeId').val(result.data.id);
        $('#editDocTypeName').val(result.data.name);
        $('#edit_document_types_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#editDocTypForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editDocTypeSave');
  loadingButton.button('loading');
  var id = $('#docTypeId').val();
  var url = $('.docTypeUrl').val() + '/' + id;
  var data = {
    'formSelector': $(this),
    'url': url,
    'type': 'PUT'
  };
  editRecordWithForm(data, loadingButton, '#edit_document_types_modal');
});
listenClick('.deleteDocTypeBtn', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexDocTypeUrl').val() + '/' + id, '', $('#documentType').val());
});
listenHiddenBsModal('#add_document_types_modal', function () {
  resetModalForm('#addDocTypeForm', '#docTypeErrorsBox');
});

/***/ }),

/***/ "./resources/assets/js/document_type/user_documents.js":
/*!*************************************************************!*\
  !*** ./resources/assets/js/document_type/user_documents.js ***!
  \*************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/employee/bill.js":
/*!**********************************************!*\
  !*** ./resources/assets/js/employee/bill.js ***!
  \**********************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/employee/doctors.js":
/*!*************************************************!*\
  !*** ./resources/assets/js/employee/doctors.js ***!
  \*************************************************/
/***/ (() => {

listenChange('#doctorsHead', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listenClick('#doctorResetFilter', function () {
  $('#doctorsHead').val(2).trigger('change');
  hideDropdownManually($('#doctorsFilterBtn'), $('.dropdown-menu'));
});

/***/ }),

/***/ "./resources/assets/js/employee/invoice.js":
/*!*************************************************!*\
  !*** ./resources/assets/js/employee/invoice.js ***!
  \*************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadEmployeeDoctorData);
function loadEmployeeDoctorData() {
  if (!$('#invoice_status_filter').length) {
    return;
  }
  $('#invoice_status_filter').select2({
    width: '100%'
  });
}
listenChange('#invoice_status_filter', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listen('click', '#resetEmployeeInvoiceFilter', function () {
  $('#invoice_status_filter').val(0).trigger('change');
});

/***/ }),

/***/ "./resources/assets/js/employee/my_payrolls.js":
/*!*****************************************************!*\
  !*** ./resources/assets/js/employee/my_payrolls.js ***!
  \*****************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/employee/notice_boards.js":
/*!*******************************************************!*\
  !*** ./resources/assets/js/employee/notice_boards.js ***!
  \*******************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/employee/patient_admission.js":
/*!***********************************************************!*\
  !*** ./resources/assets/js/employee/patient_admission.js ***!
  \***********************************************************/
/***/ (() => {

listenChange('#patient_admission_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
  hideDropdownManually($('#patientAdmissionFilterBtn'), $('#patientAdmissionFilterDiv'));
});
listenClick('#admissionResetFilter', function () {
  $('#patient_admission_filter_status').val(0).trigger('change');
  hideDropdownManually($('#patientAdmissionFilterBtn'), $('#patientAdmissionFilterDiv'));
});

/***/ }),

/***/ "./resources/assets/js/employee/patient_diagnosis_test.js":
/*!****************************************************************!*\
  !*** ./resources/assets/js/employee/patient_diagnosis_test.js ***!
  \****************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/employee_payrolls/edit.js":
/*!*******************************************************!*\
  !*** ./resources/assets/js/employee_payrolls/edit.js ***!
  \*******************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadEditEmployeePayrollData);
function loadEditEmployeePayrollData() {
  if (!$('#type').length) {
    return;
  }
  setTimeout(function () {
    $('#type').trigger('change');
  }, 1000);
}

/***/ }),

/***/ "./resources/assets/js/employee_payrolls/employee_payrolls.js":
/*!********************************************************************!*\
  !*** ./resources/assets/js/employee_payrolls/employee_payrolls.js ***!
  \********************************************************************/
/***/ (() => {

listen('click', '#ePayrollResetFilter', function () {
  $('#employee_payroll_filter_status').val(0).trigger('change');
  hideDropdownManually($('#employeePayrollFilterBtn'), $('.dropdown-menu'));
});
listen('click', '.deleteEmpPayrollBtn', function (event) {
  var employeePayrollId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexEmployeePayrollUrl').val() + '/' + employeePayrollId, '', $('#employeePayroll').val());
});
listen('click', '.showEPayrollBtn', function (event) {
  event.preventDefault();
  var employeePayrollId = $(event.currentTarget).attr('data-id');
  renderEPayrollData(employeePayrollId);
});
function renderEPayrollData(id) {
  $.ajax({
    url: $('#employeesPayrollShowModal').val() + '/' + id,
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#sr_no').text(result.data.sr_no);
        $('#payroll_id').text(result.data.payroll_id);
        $('#payroll_role').text(result.data.type_string);
        $('#employee_full_name').text(result.data.full_name);
        $('#payroll_month').text(result.data.month);
        $('#payroll_year').text(result.data.year);
        $('#salary').text(addCommas(result.data.basic_salary));
        $('#allowance').text(addCommas(result.data.allowance));
        $('#deductions').text(addCommas(result.data.deductions));
        $('#net_salary').text(addCommas(result.data.net_salary));
        $('#employee_status').empty();
        var unPaidStatus = $('#employeesPayrollStatusUnPaid').val();
        var paidStatus = $('#employeesPayrollStatusPaid').val();
        if (result.data.status == 1) {
          $('#employee_status').append('<span class="badge bg-light-success">' + paidStatus + '</span>');
        } else {
          $('#employee_status').append('<span class="badge bg-light-danger">' + unPaidStatus + '</span>');
        }
        $('#created_on').text(moment(result.data.created_at).fromNow());
        $('#updated_on').text(moment(result.data.updated_at).fromNow());
        setValueOfEmptySpan();
        $('#showEmployeePayrolls').appendTo('body').modal('show');
      }
    },
    error: function error(result) {
      displayErrorMessage(result.responseJSON.message);
    }
  });
}
;
listenChange('#employee_payroll_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});

/***/ }),

/***/ "./resources/assets/js/employee_payrolls/payrolls.js":
/*!***********************************************************!*\
  !*** ./resources/assets/js/employee_payrolls/payrolls.js ***!
  \***********************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadEmployeePayrollData);
function loadEmployeePayrollData() {
  if (!$('#createPayroll').length && !$('#editPayroll').length) {
    return;
  }
  $('.price-input').trigger('input');
  $('.type').focus();
}
listenChange('.basicSalary,#allowance,#deductions', function () {
  var basicSalary = parseFloat(removeCommas($('.basicSalary').val()));
  var allowance = parseFloat(removeCommas($('#allowance').val()));
  var deductions = parseFloat(removeCommas($('#deductions').val()));
  basicSalary = !isNaN(basicSalary) ? basicSalary : 0;
  allowance = !isNaN(allowance) ? allowance : 0;
  deductions = !isNaN(deductions) ? deductions : 0;
  var netSalary = basicSalary + allowance;
  if (deductions > netSalary) {
    $('#validationErrorsBox').removeClass('d-none');
    $('#validationErrorsBox').text('Deductions cannot be greater than Basic salary + Allowance').show();
    $('#deductions').val(null);
    deductions = 0;
    setTimeout(function () {
      $('#validationErrorsBox').addClass('d-none');
      $('#validationErrorsBox').text('');
    }, 7000);
  }
  netSalary = basicSalary + allowance - deductions;
  !isNaN(netSalary) ? $('#netSalary').val(netSalary).trigger('input') : $('#netSalary').val(0);
});
listenChange('#type', function () {
  if ($(this).val() !== '') {
    $.ajax({
      url: $('.employeeUrl').val(),
      type: 'get',
      dataType: 'json',
      data: {
        id: $(this).val()
      },
      success: function success(data) {
        $('#ownerType').removeAttr('disabled');
        $.each(data.data, function (i, v) {
          $('#ownerType').append($('<option></option>').attr('value', i).text(v));
        });
        var isEdit = $('.isEdit').val();
        if (isEdit) {
          $('#ownerType').val($('.employeeOwnerId').val()).trigger('change');
          isEdit = false;
        }
      }
    });
  }
  $('#ownerType').empty();
  $('#ownerType').prepend('<option value="0">Select Employee</option>');
  $('#ownerType').prop('disabled', true);
});
listenSubmit('#createPayroll, #editPayroll', function () {
  $('.btnSave').attr('disabled', true);
});

/***/ }),

/***/ "./resources/assets/js/employee_prescriptions/employee_prescriptions.js":
/*!******************************************************************************!*\
  !*** ./resources/assets/js/employee_prescriptions/employee_prescriptions.js ***!
  \******************************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/enquiry/enquiry.js":
/*!************************************************!*\
  !*** ./resources/assets/js/enquiry/enquiry.js ***!
  \************************************************/
/***/ (() => {

listenChange('.enquiryStatus', function () {
  var enquiryId = $(this).attr('data-id');
  updateEnquiryStatus(enquiryId);
});
function updateEnquiryStatus(id) {
  $.ajax({
    url: $('#indexEnquiryUrl').val() + '/' + +id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        Livewire.emit('refresh');
      }
    }
  });
}
;
listenClick('#resetEnquiryFilter', function () {
  $('#enquiriesHead').val(2).trigger('change');
  hideDropdownManually($('#enquiriesFilterBtn'), $('.dropdown-menu'));
});
listenChange('#enquiriesHead', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});

/***/ }),

/***/ "./resources/assets/js/expenses/expenses-details-edit.js":
/*!***************************************************************!*\
  !*** ./resources/assets/js/expenses/expenses-details-edit.js ***!
  \***************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/expenses/expenses.js":
/*!**************************************************!*\
  !*** ./resources/assets/js/expenses/expenses.js ***!
  \**************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadExpense);
function loadExpense() {
  if (!$('#indexExpenseUrl').length) {
    return;
  }
  $('#expenseHead').select2({
    width: '100%'
  });
  $('#expenseId').select2({
    width: '100%',
    dropdownParent: $('#add_expenses_modal')
  });
  $('#editExpenseHeadId').select2({
    width: '100%',
    dropdownParent: $('#edit_expenses_modal')
  });
  $('#expenseDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: true,
    sideBySide: true,
    locale: $('.userCurrentLanguage').val()
  });
  var editDate = $('#editExpenseDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: true,
    sideBySide: true,
    locale: $('.userCurrentLanguage').val()
  });
  listenShownBsModal('#add_expenses_modal, #edit_expenses_modal', function () {
    $('#expenseId, #editExpenseHeadId:first').focus();
    $('#expenseId').select2({
      width: '100%',
      dropdownParent: $('#add_expenses_modal')
    });
    $('#editExpenseHeadId').select2({
      width: '100%',
      dropdownParent: $('#edit_expenses_modal')
    });
  });
  listenClick('.deleteExpenseBtn', function (event) {
    var id = $(event.currentTarget).attr('data-id');
    deleteItem($('#indexExpenseUrl').val() + '/' + id, '', $('#Expenses').val());
  });
  listenClick('.editExpensesBtn', function (event) {
    if ($('.ajaxCallIsRunning').val()) {
      return;
    }
    ajaxCallInProgress();
    var expenseId = $(event.currentTarget).attr('data-id');
    renderExpenseData(expenseId);
  });
  function renderExpenseData(id) {
    $.ajax({
      url: $('#indexExpenseUrl').val() + '/' + id + '/edit',
      type: 'GET',
      success: function success(result) {
        if (result.success) {
          var ext = result.data.document_url.split('.').pop().toLowerCase();
          if (ext == 'pdf') {
            $('#editExpensePreviewImage').css('background-image', 'url("' + $('.pdfDocumentImageUrl').val() + '")');
          } else if (ext == 'docx' || ext == 'doc') {
            $('#editExpensePreviewImage').css('background-image', 'url("' + $('.docxDocumentImageUrl').val() + '")');
          } else if (ext == '') {
            $('#editExpensePreviewImage').css('background-image', 'url("' + $('#indexExpenseDefaultDocumentImageUrl').val() + '")');
          } else {
            $('#editExpensePreviewImage').css('background-image', 'url("' + result.data.document_url + '")');
          }
          $('#editExpenseId').val(result.data.id);
          $('#editExpenseHeadId').val(result.data.expense_head).trigger('change.select2');
          $('#editExpenseName').val(result.data.name);
          editDate.setDate(format(result.data.date));
          $('#editExpenseInvoiceNumber').val(result.data.invoice_number);
          $('#editExpenseAmount').val(result.data.amount);
          $('.price-input').trigger('input');
          $('#editExpenseDescription').val(result.data.description);
          if (isEmpty(result.data.document_url)) {
            $('#expenseDocumentUrl').hide();
            $('.btn-view').hide();
          } else {
            $('#expenseDocumentUrl').show();
            $('.btn-view').show();
            $('#expenseDocumentUrl').attr('href', result.data.document_url);
          }
          $('#edit_expenses_modal').appendTo('body').modal('show');
          ajaxCallCompleted();
        }
      },
      error: function error(result) {
        manageAjaxErrors(result);
      }
    });
  }
}
listenSubmit('#addExpenseForm', function (event) {
  event.preventDefault();
  $('#expenseSave').attr('disabled', true);
  var loginButton = jQuery(this).find('#expenseSave');
  loginButton.button('loading');
  var data = {
    'formSelector': $(this),
    'url': $('#indexExpenseCreateUrl').val(),
    'type': 'POST'
  };
  newRecord(data, loginButton, '#add_expenses_modal');
});
listenSubmit('#editExpensesForm', function (event) {
  event.preventDefault();
  $('#editExpenseSave').attr('disabled', true);
  var loadingButton = jQuery(this).find('#editExpenseSave');
  loadingButton.button('loading');
  var id = $('#editExpenseId').val();
  var url = $('#indexExpenseUrl').val() + '/' + id + '/update';
  var data = {
    'formSelector': $(this),
    'url': url,
    'type': 'POST'
  };
  window.Livewire.emit('refresh');
  editRecord(data, loadingButton, '#edit_expenses_modal');
});
listenClick('#ExpenseResetFilter', function () {
  $('#ExpenseHead').val(0).trigger('change');
  hideDropdownManually($('#ExpenseFilterBtn'), $('.dropdown-menu'));
});
listenHiddenBsModal('#add_expenses_modal', function () {
  resetModalForm('#addExpenseForm', '#expenseErrorsBox');
  $('#expenseSave').attr('disabled', false);
  $('#expenseId').val('').trigger('change.select2');
  $('#expensePreviewImage').css('background-image', 'url(' + $('#indexExpenseDefaultDocumentImageUrl').val() + ')');
});
listenChange('#expenseAttachment', function () {
  var extension = isValidIncomeDocument($(this), '#expenseErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#editIncomeErrorsBox').html('').hide();
    displayDocument(this, '#expensePreviewImage', extension);
  } else {
    $(this).val('');
    displayErrorMessage('The image must be a file of type: jpg, jpeg, png.');
    // $('#expenseErrorsBox').removeClass('d-none hide');
    // $('#expenseErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    // $('[id=expenseErrorsBox]').focus();
    // $("html, body").animate({ scrollTop: "0" },  500);
    // $('.alert').delay(5000).slideUp(300)
  }
});

listenChange('#editExpenseAttachment', function () {
  var extension = isValidIncomeDocument($(this), '#editExpenseErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#editIncomeErrorsBox').html('').hide();
    displayDocument(this, '#editExpensePreviewImage', extension);
  } else {
    $(this).val('');
    displayErrorMessage('The image must be a file of type: jpg, jpeg, png.');
    // $('#editExpenseErrorsBox').removeClass('d-none hide');
    // $('#editExpenseErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    // $('[id=editExpenseErrorsBox]').focus();
    // $("html, body").animate({ scrollTop: "0" },  500);
    // $('.alert').delay(5000).slideUp(300)
  }
});

function isValidIncomeDocument(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx']) == -1) {
    $(inputSelector).val('');
    $(validationMessageSelector).html($('#indexIncomeDocumentError').val()).show();
    return false;
  }
  return ext;
}
// window.isValidIncomeDocument = function (
//     inputSelector, validationMessageSelector) {
//     let ext = $(inputSelector).val().split('.').pop().toLowerCase()
//     if ($.inArray(ext, ['png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx']) ==
//         -1) {
//         $(inputSelector).val('')
//         $(validationMessageSelector).
//             html($('#indexIncomeDocumentError').val()).
//             show()
//         return false
//     }
//     return ext
// }

listenHiddenBsModal('#edit_expenses_modal', function () {
  $('#editExpenseSave').attr('disabled', false);
  resetModalForm('#editExpensesForm', '#editExpenseErrorsBox');
});
listenClick('.removeExpenseImage', function () {
  defaultImagePreview('#expensePreviewImage');
});
listenClick('.removeExpenseImageEdit', function () {
  defaultImagePreview('#editExpensePreviewImage');
});
listenChange('#ExpenseHead', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});

/***/ }),

/***/ "./resources/assets/js/front_settings/cms/create-edit.js":
/*!***************************************************************!*\
  !*** ./resources/assets/js/front_settings/cms/create-edit.js ***!
  \***************************************************************/
/***/ (() => {

// import Quill from 'quill';
document.addEventListener('turbo:load', loadFrontSettingCMSData);
function loadFrontSettingCMSData() {
  if (!$('#termConditionPrivacyPolicy').length) {
    return;
  }
  if (typeof $('#termConditionPrivacyPolicy').val() != 'undefined' && $('#termConditionPrivacyPolicy').val() == true) {
    var quill1 = new Quill('#termConditionId', {
      modules: {
        toolbar: [[{
          header: [1, 2, false]
        }], ['bold', 'italic', 'underline'], ['image', 'code-block']]
      },
      placeholder: 'Terms & Conditions',
      theme: 'snow' // or 'bubble'
    });

    quill1.on('text-change', function (delta, oldDelta, source) {
      if (quill1.getText().trim().length === 0) {
        quill1.setContents([{
          insert: ''
        }]);
      }
    });
    var quill2 = new Quill('#privacyPolicyId', {
      modules: {
        toolbar: [[{
          header: [1, 2, false]
        }], ['bold', 'italic', 'underline'], ['image', 'code-block']]
      },
      placeholder: 'Privacy Policy',
      theme: 'snow' // or 'bubble'
    });

    quill2.on('text-change', function (delta, oldDelta, source) {
      if (quill2.getText().trim().length === 0) {
        quill2.setContents([{
          insert: ''
        }]);
      }
    });
    var element = document.createElement('textarea');
    element.innerHTML = $('.termConditionData').val();
    quill1.root.innerHTML = element.value;
    element.innerHTML = $('.privacyPolicyData').val();
    quill2.root.innerHTML = element.value;
    listenSubmit('#termsAndCondition', function () {
      var element = document.createElement('textarea');
      var editor_content_1 = quill1.root.innerHTML;
      element.innerHTML = editor_content_1;
      var editor_content_2 = quill2.root.innerHTML;
      if (quill1.getText().trim().length === 0) {
        displayErrorMessage('The Terms & Conditions is required.');
        return false;
      }
      if (quill2.getText().trim().length === 0) {
        displayErrorMessage('The Privacy Policy is required.');
        return false;
      }
      $('#termData').val(editor_content_1.toString());
      $('#privacyData').val(editor_content_2.toString());
    });
  }
}
listenChange('.homePageImage', function () {
  var extension = isValidCmsImage($(this), '#homeErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#homeErrorsBox').html('').hide();
    displayDocument(this, '#homePreviewImage', extension);
  }
});
listenChange('.homeDoctorImage', function () {
  var extension = isValidCmsImage($(this), '#homeErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#homeErrorsBox').html('').hide();
    displayDocument(this, '#homeDoctorPreviewImage', extension);
  }
});
function isValidCmsImage(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['jpg', 'png', 'jpeg']) == -1) {
    $(inputSelector).val('');
    $(validationMessageSelector).removeClass('d-none');
    $(validationMessageSelector).html('The image must be a file of type: jpg, jpeg, png.').show();
    return false;
  }
  $(validationMessageSelector).hide();
  return true;
}
;
listenSubmit('#addCMSForm', function () {
  var title = $('#homeTitleId').val();
  // let empty = title.trim().replace(/ \r\n\t/g, '') === '';
  var homePageExperience = $('#homePageExperience').val();
  var shortDescription = $('#homeShortDescription').val();
  var homePageBoxTitle = $('#homePageBoxTitle').val();
  var homePageBoxDes = $('#homePageBoxDes').val();
  var homeDoctorTextId = $('#homeDoctorTextId').val();
  var homeDoctorTitleId = $('#homeDoctorTitleId').val();
  var homeDoctorDescription = $('#homeDoctorDescription').val();
  var homePageCerBoxTl = $('#homePageCerBoxTl').val();
  var homePageCerBoxDes = $('#homePageCerBoxDes').val();
  var homePageStep1Tl = $('#homePageStep1Tl').val();
  var homePageStep1Des = $('#homePageStep1Des').val();
  var homePageStep2Tl = $('#homePageStep2Tl').val();
  var homePageStep2Des = $('#homePageStep2Des').val();
  var homePageStep3Tl = $('#homePageStep3Tl').val();
  var homePageStep3Des = $('#homePageStep3Des').val();
  var homePageStep4Tl = $('#homePageStep4Tl').val();
  var homePageStep4Des = $('#homePageStep4Des').val();
  if (isEmpty($.trim(homePageExperience))) {
    displayErrorMessage('Home page experience field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(title))) {
    displayErrorMessage('Home page title field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(shortDescription))) {
    displayErrorMessage('Home page description field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homePageBoxTitle))) {
    displayErrorMessage('Home page box title field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homePageBoxDes))) {
    displayErrorMessage('Home page box descriptions field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homeDoctorTextId))) {
    displayErrorMessage('Home page certified doctor text field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homeDoctorTitleId))) {
    displayErrorMessage('home page certified doctor Title field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homeDoctorDescription))) {
    displayErrorMessage('Home page certified doctor description field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homePageCerBoxTl))) {
    displayErrorMessage('Home page certified box title field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homePageCerBoxDes))) {
    displayErrorMessage('Home page certified certified description field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homePageStep1Tl))) {
    displayErrorMessage('Home page step 1 title field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homePageStep1Des))) {
    displayErrorMessage('Home page step 1  description field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homePageStep2Tl))) {
    displayErrorMessage('Home page step 2 title field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homePageStep2Des))) {
    displayErrorMessage('Home page step 2 description field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homePageStep3Tl))) {
    displayErrorMessage('Home page step 3 title field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homePageStep3Des))) {
    displayErrorMessage('Home page step 3 description field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homePageStep4Tl))) {
    displayErrorMessage('Home page step 4 title field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homePageStep4Tl))) {
    displayErrorMessage('Home page step 4 title field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(homePageStep4Des))) {
    displayErrorMessage('Home page step 4 description field is not contain only white space');
    return false;
  }

  // if (empty) {
  //     displayErrorMessage(
  //         'Home Page Title field is not contain only white space');
  //     return false;
  // }
});

listenSubmit('#createAboutUs', function () {
  var aboutUsTitle = $('#aboutUsTitle').val();
  var aboutUsDes = $('#aboutUsDes').val();
  var aboutUsMission = $('#aboutUsMission').val();
  if (isEmpty($.trim(aboutUsTitle))) {
    displayErrorMessage('About us title field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(aboutUsDes))) {
    displayErrorMessage('About us description field is not contain only white space');
    return false;
  }
  if (isEmpty($.trim(aboutUsMission))) {
    displayErrorMessage('About us mission field is not contain only white space');
    return false;
  }
});

/***/ }),

/***/ "./resources/assets/js/front_settings/front_services/front_services.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/js/front_settings/front_services/front_services.js ***!
  \*****************************************************************************/
/***/ (() => {

listenSubmit('#addFrontServiceForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#frontServiceSave');
  $('#frontServiceSave').attr('disabled', true);
  loadingButton.button('loading');
  var formData = new FormData($(this)[0]);
  $.ajax({
    url: $('#indexFrontServicesUrl').val(),
    type: 'POST',
    dataType: 'json',
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_front_service_modal').modal('hide');
        $('#frontServiceSave').attr('disabled', false);
        // $(tableName).DataTable().ajax.reload(null, false);
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      $('#frontServiceSave').attr('disabled', false);
      printErrorMessage('#frontServiceErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listen('click', '.editFrontServiceBtn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var frontServiceId = $(event.currentTarget).attr('data-id');
  renderFrontServiceData(frontServiceId);
});
function renderFrontServiceData(id) {
  $.ajax({
    url: $('#indexFrontServicesUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#frontServiceId').val(result.data.id);
        if (result.data.icon_url) $('#editFrontServicePreviewImage').css('background-image', 'url("' + result.data.icon_url + '")');else $('#editFrontServicePreviewImage').css('background-image', 'url("' + $('#indexServiceDefaultDocumentImageUrl').val() + '")');
        $('#editFrontServiceName').val(result.data.name);
        $('#editFrontServiceDescription').val(result.data.short_description);
        if (isEmpty(result.data.icon_url)) {
          $('#frontServiceIconUrl').hide();
          $('.btn-view').hide();
        } else {
          $('#frontServiceIconUrl').show();
          $('.btn-view').show();
          $('#frontServiceIconUrl').attr('href', result.data.icon_url);
        }
        $('#edit_front_service_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
;
listenSubmit('#editFrontServiceForm', function (event) {
  event.preventDefault();
  // let loadingButton = jQuery(this).find('#btnEditSave');
  // loadingButton.button('loading');
  var loadingButton = jQuery(this).find('#editFrontServiceSave');
  $('#editFrontServiceSave').attr('disabled', true);
  loadingButton.button('loading');
  var id = $('#frontServiceId').val();
  var formData = new FormData($(this)[0]);
  $.ajax({
    url: $('#indexFrontServicesUrl').val() + '/' + id,
    type: 'post',
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#editFrontServiceSave').attr('disabled', false);
        $('#edit_front_service_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      $('#editFrontServiceSave').attr('disabled', false);
      manageAjaxErrors(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_front_service_modal', function () {
  resetModalForm('#addFrontServiceForm', '#add_front_service_modal #frontServiceErrorsBox');
  $('#frontServiceSave').attr('disabled', false);
  $('#frontServicePreviewImage').attr('src', $('#indexServiceDefaultDocumentImageUrl').val()).css('background-image', "url(".concat($('#indexServiceDefaultDocumentImageUrl').val(), ")"));
});
listenShownBsModal('#add_front_service_modal', function () {
  $('#add_front_service_modal #frontServiceErrorsBox').show();
  $('#add_front_service_modal #frontServiceErrorsBox').addClass('d-none');
});
listenHiddenBsModal('#edit_front_service_modal', function () {
  resetModalForm('#editFrontServiceForm', '#edit_front_service_modal #editFrontServiceErrorsBox');
  $('#editFrontServiceSave').attr('disabled', false);
  $('#editFrontServicePreviewImage').attr('src', $('#indexServiceDefaultDocumentImageUrl').val()).css('background-image', "url(".concat($('#indexServiceDefaultDocumentImageUrl').val(), ")"));
});
listenShownBsModal('#edit_front_service_modal', function () {
  $('#edit_front_service_modal #editFrontServiceErrorsBox').show();
  $('#edit_front_service_modal #editFrontServiceErrorsBox').addClass('d-none');
});
listen('click', '.deleteFrontServiceBtn', function (event) {
  var frontServiceId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexFrontServicesUrl').val() + '/' + frontServiceId, '', $('#frontService').val());
});

/***/ }),

/***/ "./resources/assets/js/front_settings/front_settings.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/front_settings/front_settings.js ***!
  \**************************************************************/
/***/ (() => {

listenChange('#aboutUsImage', function () {
  var extension = isValidFrontSettingImage($(this), '#aboutUsErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#aboutUsErrorsBox').html('').hide();
    displayDocument(this, '#aboutUsPreviewImage', extension);
  }
});
function isValidFrontSettingImage(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['jpg', 'png', 'jpeg']) == -1) {
    $(inputSelector).val('');
    $(validationMessageSelector).removeClass('d-none');
    $(validationMessageSelector).html(Lang.get('messages.allow_file_type')).show();
    return false;
  }
  $(validationMessageSelector).hide();
  return true;
}
;

/***/ }),

/***/ "./resources/assets/js/hospital_schedule/create-edit.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/hospital_schedule/create-edit.js ***!
  \**************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadHospitalScheduleData);
function loadHospitalScheduleData() {
  if (!$('saveHospitalScheduleForm').length) {
    return;
  }
  listenChange('select[name^="startTimes"]', function (e) {
    var selectedIndex = $(this)[0].selectedIndex;
    var endTimeOptions = $(this).closest('.weekly-row').find('select[name^="endTimes"] option');
    endTimeOptions.eq(selectedIndex + 1).prop('selected', true).trigger('change');
    endTimeOptions.each(function (index) {
      if (index <= selectedIndex) {
        $(this).attr('disabled', true);
      } else {
        $(this).attr('disabled', false);
      }
    });
  });
}
listenSubmit('#saveHospitalScheduleForm', function (event) {
  event.preventDefault();
  var data = new FormData($(this)[0]);
  $.ajax({
    url: $('#saveHospitalScheduleUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    cache: false,
    success: function success(result) {
      saveUpdateForm(data);
    },
    error: function error(result) {
      Swal.fire({
        title: 'Delete !',
        text: result.responseJSON.message,
        type: 'warning',
        icon: 'warning',
        showCancelButton: true,
        closeOnConfirm: true,
        confirmButtonColor: '#266CB0',
        showLoaderOnConfirm: true,
        cancelButtonText: 'No, Cancel',
        confirmButtonText: 'Yes, Update!'
      }).then(function (result) {
        if (result.isConfirmed) {
          saveUpdateForm(data);
        }
      });
    }
  });
});
function saveUpdateForm(data) {
  $.ajax({
    url: $(this).attr('action'),
    type: 'POST',
    data: data,
    processData: false,
    contentType: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        setTimeout(function () {
          location.reload();
        }, 1500);
      }
    },
    error: function error(result) {
      displayErrorMessage(result.message);
    },
    complete: function complete() {}
  });
}

/***/ }),

/***/ "./resources/assets/js/incomes/incomes-details-edit.js":
/*!*************************************************************!*\
  !*** ./resources/assets/js/incomes/incomes-details-edit.js ***!
  \*************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/incomes/incomes.js":
/*!************************************************!*\
  !*** ./resources/assets/js/incomes/incomes.js ***!
  \************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadIncome);
function loadIncome() {
  if (!$('#addIncomeForm').length && !$('#editIncomesForm').length) {
    return;
  }
  listenShownBsModal('#add_incomes_modal, #edit_incomes_modal', function () {
    $('#incomeId, #editIncomeHeadId:first').focus();
    $('#incomeId').select2({
      width: '100%',
      dropdownParent: $('#add_incomes_modal')
    });
    $('#editIncomeHeadId').select2({
      width: '100%',
      dropdownParent: $('#edit_incomes_modal')
    });
  });
  $('#incomeHead').select2({
    width: '100%'
  });
  $('#incomeDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: false,
    sideBySide: false,
    locale: $('.userCurrentLanguage').val()
  });
  var editDate = $('#editIncomeDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: false,
    sideBySide: false,
    locale: $('.userCurrentLanguage').val()
  });
}
listenSubmit('#addIncomeForm', function (event) {
  event.preventDefault();
  $('#incomeSave').attr('disabled', true);
  var loginButton = jQuery(this).find('#incomeSave');
  loginButton.button('loading');
  $.ajax({
    url: $('#indexIncomeCreateUrl').val(),
    type: 'POST',
    data: new FormData(this),
    dataType: 'JSON',
    processData: false,
    contentType: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_incomes_modal').modal('hide');
        $('#incomeSave').attr('disabled', false);
        Livewire.emit('refresh');
      }
    },
    error: function error(result) {
      // $('#incomeSave').attr('disabled', false)
      // printErrorMessage('#incomeErrorsBox', result)
      // displayErrorMessage($('#incomeErrorsBox').text())
      manageAjaxErrors(result);
      $('#incomeSave').attr('disabled', false);
    },
    complete: function complete() {
      loginButton.button('reset');
    }
  });
});
listenClick('.deleteIncomesBtn', function (event) {
  var deleteIncomeId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexIncomeUrl').val() + '/' + deleteIncomeId, null, $('#Income').val());
});
listenClick('#incomeResetFilter', function () {
  $('#incomeHead').val(0).trigger('change');
  hideDropdownManually($('#incomeFilterBtn'), $('.dropdown-menu'));
});
listenClick('.editIncomesBtn', function (event) {
  var id = event.currentTarget.dataset.id;
  renderIncomeData(id);
});
function renderIncomeData(id) {
  $.ajax({
    url: $('#indexIncomeUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var ext = result.data.document_url.split('.').pop().toLowerCase();
        if (ext == 'pdf') {
          $('#editIncomePreviewImage').css('background-image', 'url("' + $('.pdfDocumentImageUrl').val() + '")');
        } else if (ext == 'docx' || ext == 'doc') {
          $('#editIncomePreviewImage').css('background-image', 'url("' + $('.docxDocumentImageUrl').val() + '")');
        } else if (ext == '') {
          $('#editIncomePreviewImage').css('background-image', 'url("' + $('#indexIncomeDefaultDocumentImageUrl').val() + '")');
        } else {
          $('#editIncomePreviewImage').css('background-image', 'url("' + result.data.document_url + '")');
        }
        $('#editIncomeId').val(result.data.id);
        $('#editIncomeHeadId').val(result.data.income_head).trigger('change.select2');
        $('#editIncomeName').val(result.data.name);
        document.querySelector('#editIncomeDate')._flatpickr.setDate(moment(result.data.date).format());
        $('#editIncomeInvoiceNumber').val(result.data.invoice_number);
        $('#editIncomeAmount').val(result.data.amount);
        $('.price-input').trigger('input');
        $('#editIncomeDescription').val(result.data.description);
        if (isEmpty(result.data.document_url)) {
          $('#editIncomeDocumentUrl').hide();
          $('.btn-view').hide();
        } else {
          $('#editIncomeDocumentUrl').show();
          $('.btn-view').show();
          $('#editIncomeDocumentUrl').attr('href', result.data.document_url);
        }
        $('#edit_incomes_modal').appendTo('body').modal('show');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#editIncomesForm', function (event) {
  event.preventDefault();
  $('#editIncomeSave').attr('disabled', true);
  var loadingButton = jQuery(this).find('#editIncomeSave');
  loadingButton.button('loading');
  var id = $('#editIncomeId').val();
  var url = $('#indexIncomeUrl').val() + '/' + id + '/update';
  var data = {
    'formSelector': $(this),
    'url': url,
    'type': 'POST',
    'tableSelector': null
  };
  Livewire.emit('refresh');
  editRecord(data, loadingButton, '#edit_incomes_modal');
  $('#avatar_remove').val('');
});
listenHiddenBsModal('#add_incomes_modal', function () {
  resetModalForm('#addIncomeForm', '#incomeErrorsBox');
  $('#incomeSave').attr('disabled', false);
  $('#incomeId').val('').trigger('change.select2');
  // $('#previewImage').attr('src', $('#indexIncomeDefaultDocumentImageUrl').val());
  $('#incomePreviewImage').css('background-image', 'url("' + $('#indexIncomeDefaultDocumentImageUrl').val() + '")');
});
listenHiddenBsModal('#edit_incomes_modal', function () {
  resetModalForm('#editIncomesForm', '#editIncomeErrorsBox');
  $('#editIncomeSave').attr('disabled', false);
});

// listenChange('#incomeAttachment', function () {
//     let extension = isValidIncomeDocument($(this), '#incomeErrorsBox')
//     if (!isEmpty(extension) && extension != false) {
//         $('#incomeErrorsBox').html('').hide()
//         displayDocument(this, '#incomePreviewImage', extension)
//     }
// })

listenChange('#editIncomeAttachment', function () {
  var extension = isValidIncomeDocument($(this), '#editIncomeErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#editIncomeErrorsBox').html('').hide();
    displayDocument(this, '#editIncomePreviewImage', extension);
  } else {
    $(this).val('');
    $('#editIncomeErrorsBox').removeClass('d-none hide');
    $('#editIncomeErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=customValidationErrorsBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
window.isValidIncomeDocument = function (inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx']) == -1) {
    $(inputSelector).val('');
    $(validationMessageSelector).html($('#indexIncomeDocumentError').val()).show();
    return false;
  }
  return ext;
};
listenClick('.removeIncomesImage', function () {
  defaultImagePreview('#incomePreviewImage');
});
listenClick('.removeIncomesImageEdit', function () {
  defaultImagePreview('#editIncomePreviewImage');
});
listenChange('#incomeHead', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});

/***/ }),

/***/ "./resources/assets/js/insurances/create-edit.js":
/*!*******************************************************!*\
  !*** ./resources/assets/js/insurances/create-edit.js ***!
  \*******************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadUpdateInsurancesData);
function loadUpdateInsurancesData() {
  $('.price-input').trigger('input');
  if ($('.insuranceDiscount').val() < 0) {
    $('.discount').val(0);
  }
  if ($('.addInsuranceItem').val() < 0) {
    $('.discount').val(0);
  }
  $('#insuranceDiscountId').blur(function () {
    if ($('#insuranceDiscountId').val().length == 0) {
      $('#insuranceDiscountId').val(0);
    }
  });
  $('.insuranceForm').find('input:text:visible:first').focus();
  window.isInsuranceNumberKey = function (evt, element) {
    var charCode = evt.which ? evt.which : event.keyCode;
    return !((charCode !== 46 || $(element).val().indexOf('.') !== -1) && (charCode < 48 || charCode > 57));
  };
  listenKeyup('.disease-charge', function () {
    calculateAndSetInsuranceAmount();
  });
  listenChange('.service-tax, .discount, .hospital-rate, .disease-charge', function () {
    calculateAndSetInsuranceAmount();
  });
  window.calculateAndSetInsuranceAmount = function () {
    var totalAmount = 0;
    var serviceTax = parseInt($('.service-tax').val() !== '' ? removeCommas($('.service-tax').val()) : 0);
    var hospitalRate = parseInt($('.hospital-rate').val() !== '' ? removeCommas($('.hospital-rate').val()) : 0);
    var discount = parseFloat($('.discount').val());
    totalAmount = serviceTax + hospitalRate;
    $('.disease-item-container>tr').each(function () {
      var itemTotal = parseInt($(this).find('.disease-charge').val() != '' ? removeCommas($(this).find('.disease-charge').val()) : 0);
      totalAmount += itemTotal;
    });
    totalAmount -= totalAmount * discount / 100;
    $('#insuranceTotal').text($('.currentCurrency').val() + addCommas(totalAmount.toFixed(2)));
    $('#insuranceTotal_amount').val(totalAmount);
  };
}
listenSubmit('#insuranceForm', function (event) {
  event.preventDefault();
  // screenLock();
  $('#insuranceSaveBtn').attr('disabled', true);
  var loadingButton = jQuery(this).find('#insuranceSaveBtn');
  loadingButton.button('loading');
  var formData = new FormData($(this)[0]);
  $.ajax({
    url: $('.insuranceSaveUrl').val(),
    type: 'POST',
    dataType: 'json',
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      displaySuccessMessage(result.message);
      window.location.href = $('.insuranceUrl').val();
      $('#insuranceSaveBtn').attr('disabled', false);
    },
    error: function error(result) {
      printErrorMessage('#insuranceValidationErrorsBox', result);
      $('#insuranceSaveBtn').attr('disabled', false);
    }
    // complete: function () {
    //     screenUnLock()
    //     loadingButton.button('reset')
    // },
  });
});

var uniqueInsuranceId = $('.insuranceUniqueId').val();
listenClick('#addInsuranceItem', function () {
  var data = {
    'uniqueId': uniqueInsuranceId
  };
  var diseaseItemHtml = prepareTemplateRender('#insuranceDiseaseTemplate', data);
  $('.disease-item-container').append(diseaseItemHtml);
  uniqueInsuranceId++;
  resetInsuranceItemIndex();
});
listenClick('.delete-disease', function () {
  $(this).parents('tr').remove();
  resetInsuranceItemIndex();
  calculateAndSetInsuranceAmount();
});
function resetInsuranceItemIndex() {
  var index = 1;
  $('.disease-item-container>tr').each(function () {
    $(this).find('.item-number').text(index);
    index++;
  });
  if (index - 1 == 0) {
    $('#insuranceTotal').text('0');
    $('#insuranceBillTbl tbody').append('<tr>' + '<td class="text-center item-number">1</td>' + '<td><input class="form-control disease-name" required name="disease_name[]" type="text"></td>' + '<td><input class="form-control disease-charge price-input" required name="disease_charge[]" type="text"></td>' + '<td class="text-center"><a href="javascript:void(0)" title="{{__(\'messages.common.delete\')}}"  class="delete-disease btn px-1 text-danger fs-3 pe-0">\n' + '                    <i class="fa-solid fa-trash"></i>\n' + '                            </a></td>' + '</tr>');
  }
}

/***/ }),

/***/ "./resources/assets/js/insurances/insurances.js":
/*!******************************************************!*\
  !*** ./resources/assets/js/insurances/insurances.js ***!
  \******************************************************/
/***/ (() => {

listenClick('.deleteInsuranceBtn', function (event) {
  var insuranceId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexInsuranceUrl').val() + '/' + insuranceId, '', $('#Insurance').val());
});
listenChange('.insuranceStatus', function (event) {
  var insuranceId = $(event.currentTarget).attr('data-id');
  updateInsuranceStatus(insuranceId);
});
listenClick('#insuranceResetFilter', function () {
  $('#filter_status').val(2).trigger('change');
});
window.updateInsuranceStatus = function (id) {
  $.ajax({
    url: $('#indexInsuranceUrl').val() + '/' + id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        livewire.emit('refresh');
      }
    }
  });
};
listenChange('#insurance_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listenClick('#insuranceResetFilter', function () {
  $('#insurance_filter_status').val(0).trigger('change');
  hideDropdownManually($('#insuranceFilterBtn'), $('.dropdown-menu'));
});

/***/ }),

/***/ "./resources/assets/js/investigation_reports/create-edit.js":
/*!******************************************************************!*\
  !*** ./resources/assets/js/investigation_reports/create-edit.js ***!
  \******************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadInsurancesCreateEdit);
function loadInsurancesCreateEdit() {
  if (!$('#createInvestigationForm').length && !$('#editInvestigationForm').length) {
    return;
  }
  $('#investigationDate,#editInvestigationDate').flatpickr({
    format: 'YYYY-MM-DD HH:mm:ss',
    useCurrent: true,
    sideBySide: true,
    enableTime: true,
    locale: $('.userCurrentLanguage').val()
  });
  $('#investigationPatientId,#investigationDoctorId,#investigationStatus').select2({
    width: '100%'
  });
  $('#createInvestigationForm, #editInvestigationForm').find('input:text:visible:first').focus();
}
;

// listenChange('#investigationAttachment', function () {
//     let extension = isValidInvestigationDocument($(this), '#investigationErrorsBox');
//     if (!isEmpty(extension) && extension != false) {
//         $('#investigationErrorsBox').html('').hide();
//         //document url
//         if (extension === 'pdf') {
//             $('.image-input-wrapper').css('background-image', 'url(' + $('.pdfDocumentImageUrl').val() + ')');
//         } else if (extension === 'doc') {
//             $('.image-input-wrapper').css('background-image', 'url(' + $('.docxDocumentImageUrl').val() + ')');
//         }
//         //old preview
//         // displayDocument(this, '#previewImage', extension);
//     }
// });

// function isValidInvestigationDocument(inputSelector, validationMessageSelector) {
//     let ext = $(inputSelector).val().split('.').pop().toLowerCase();
//     if ($.inArray(ext, ['png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx']) == -1) {
//         $(inputSelector).val('');
//         $(validationMessageSelector).html(
//             'The document must be a file of type: jpeg, jpg, png, pdf, doc, docx.').show();
//         return false;
//     }
//     return ext;
// }

listenClick('.removeInvestigationImage', function () {
  defaultImagePreview('#investigationPreviewImage');
});

/***/ }),

/***/ "./resources/assets/js/investigation_reports/investigation_reports.js":
/*!****************************************************************************!*\
  !*** ./resources/assets/js/investigation_reports/investigation_reports.js ***!
  \****************************************************************************/
/***/ (() => {

listenClick('#investigationResetFilter', function () {
  $('#investigationHead').val(0).trigger('change');
  hideDropdownManually($('#investigationFilterBtn'), $('.dropdown-menu'));
});
listenClick('.deleteInvestigationBtn', function (event) {
  var investigationReportId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexInvestigationReportUrl').val() + '/' + investigationReportId, '', $('#investigationReport').val());
});
listenChange('#investigationHead', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});

/***/ }),

/***/ "./resources/assets/js/invoices/invoice.js":
/*!*************************************************!*\
  !*** ./resources/assets/js/invoices/invoice.js ***!
  \*************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadAdminInvoiceData);
function loadAdminInvoiceData() {
  listen('click', '#resetEmployeeInvoiceFilter', function () {
    $('#invoice_status_filter').val(2).trigger('change');
    hideDropdownManually($('#invoiceFilterBtn'), $('.dropdown-menu'));
  });
}
listen('click', '.deleteInvoicesBtn', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexInvoiceUrl').val() + '/' + id, '', $('#Invoices').val());
});
listenChange('#invoice_status_filter', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});

/***/ }),

/***/ "./resources/assets/js/invoices/new.js":
/*!*********************************************!*\
  !*** ./resources/assets/js/invoices/new.js ***!
  \*********************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadUpdateInvoiceData);
function loadUpdateInvoiceData() {
  if (!$('.invoiceSaveUrl')) {
    return;
  }
  $('input:text:not([readonly="readonly"])').first().blur();
  $('#invoicePatientId').focus();
  dropdownToSelect2Account('.accountId');
  $('#invoice_date').flatpickr({
    defaultDate: new Date(),
    dateFormat: 'Y-m-d',
    locale: $('.userCurrentLanguage').val()
  });
  $('#editInvoiceDate').flatpickr({
    dateFormat: 'Y-m-d',
    locale: $('.userCurrentLanguage').val()
  });
  window.isNumberKey = function (evt, element) {
    var charCode = evt.which ? evt.which : event.keyCode;
    return !((charCode !== 46 || $(element).val().indexOf('.') !== -1) && (charCode < 48 || charCode > 57));
  };
  listenClick('.deleteInvoiceItem', function () {
    $(this).parents('tr').remove();
    resetInvoiceItemIndex();
    calculateAndSetInvoiceAmount();
  });
  listenKeyup('.qty', function () {
    var qty = parseInt($(this).val());
    var rate = $(this).parent().siblings().find('.price').val();
    rate = parseInt(removeCommas(rate));
    var amount = calculateAmount(qty, rate);
    $(this).parent().siblings('.amount').text(addCommas(amount.toString()));
    calculateAndSetInvoiceAmount();
  });
  listenKeyup('.price', function () {
    var rate = $(this).val();
    rate = parseInt(removeCommas(rate));
    var qty = parseInt($(this).parent().siblings().find('.qty').val());
    var amount = calculateAmount(qty, rate);
    $(this).parent().siblings('.amount').text(addCommas(amount.toString()));
    calculateAndSetInvoiceAmount();
  });
  var calculateAmount = function calculateAmount(qty, rate) {
    if (qty > 0 && rate > 0) {
      return qty * rate;
    } else {
      return 0;
    }
  };
  var calculateAndSetInvoiceAmount = function calculateAndSetInvoiceAmount() {
    var totalAmount = 0;
    $('.invoice-item-container>tr').each(function () {
      var itemTotal = $(this).find('.item-total').text();
      itemTotal = removeCommas(itemTotal);
      itemTotal = isEmpty($.trim(itemTotal)) ? 0 : parseInt(itemTotal);
      totalAmount += itemTotal;
    });
    totalAmount = parseFloat(totalAmount);
    $('#total').text(addCommas(totalAmount.toFixed(2)));

    //set hidden input value
    $('#total_amount').val(totalAmount);
    calculateDiscount();
  };
  var calculateDiscount = function calculateDiscount() {
    var discount = $('#discount').val();
    var totalAmount = removeCommas($('#total').text());
    if (isEmpty(discount) || isEmpty(totalAmount)) {
      discount = 0;
    }
    var discountAmount = totalAmount * discount / 100;
    var finalAmount = totalAmount - discountAmount;
    $('#finalAmount').text(addCommas(finalAmount.toFixed(2)));
    $('#total_amount').val(finalAmount.toFixed(2));
    $('#discountAmount').text(addCommas(discountAmount.toFixed(2)));
  };
  listenKeyup('#discount', function (e) {
    calculateDiscount();
  });
}
listenSubmit('.invoiceForm', function (event) {
  event.preventDefault();
  // screenLock();
  var formData = new FormData($(this)[0]);
  $.ajax({
    url: $('.invoiceSaveUrl').val(),
    type: 'POST',
    dataType: 'json',
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      displaySuccessMessage(result.message);
      window.location.href = $('.invoiceUrl').val() + '/' + result.data.id;
    },
    error: function error(result) {
      printErrorMessage('#validationErrorsBox', result);
    }
    // complete: function () {
    //     screenUnLock();
    // },
  });
});

listenClick('#addInvoiceItem', function () {
  var uniqueId = $('.uniqueId').val();
  var data = {
    'accounts': JSON.parse($('.invoiceAccounts').val()),
    'uniqueId': uniqueId
  };
  var invoiceItemHtml = prepareTemplateRender('#invoiceItemTemplate', data);
  $('.invoice-item-container').append(invoiceItemHtml);
  dropdownToSelect2Account('.accountId');
  uniqueId++;
  resetInvoiceItemIndex();
});
var resetInvoiceItemIndex = function resetInvoiceItemIndex() {
  var index = 1;
  $('.invoice-item-container>tr').each(function () {
    $(this).find('.item-number').text(index);
    index++;
  });
  if (index - 1 == 0) {
    var uniqueId = $('.uniqueId').val();
    var data = {
      'accounts': JSON.parse($('.invoiceAccounts').val()),
      'uniqueId': uniqueId
    };
    var invoiceItemHtml = prepareTemplateRender('#invoiceItemTemplate', data);
    $('.invoice-item-container').append(invoiceItemHtml);
    dropdownToSelect2Account('.accountId');
    uniqueId++;
  }
};
function dropdownToSelect2Account(selector) {
  $(selector).select2({
    placeholder: 'Select Account',
    width: '100%'
  });
}

/***/ }),

/***/ "./resources/assets/js/ipd_bills/ipd_bills.js":
/*!****************************************************!*\
  !*** ./resources/assets/js/ipd_bills/ipd_bills.js ***!
  \****************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadIpdBills);
function loadIpdBills() {
  if (!$('#ipdBillForm').length) {
    return false;
  }
  var totalCharges = 0;
  var totalPayments = 0;
  var grossTotal = 0;
  var discountPercent = 0;
  var taxPercentage = 0;
  var otherCharges = 0;
  var netPayabelAmount = 0;
  var totalDiscount = 0;
  var totalTax = 0;
  if ($('#showIpdBillStatus').val() == 1) {
    $(' #discountPercent, #taxPercentage,#otherCharges ').prop('disabled', true);
  }
  calculateIpdBill();
  if (grossTotal <= 0) {
    $('#grossTotal').text(0);
    $(' #discountPercent, #taxPercentage,#otherCharges ').prop('disabled', true);
  }
}
listenKeyup('#discountPercent, #taxPercentage, #otherCharges', function () {
  if (this.id == 'discountPercent' || this.id == 'taxPercentage') {
    if (parseInt(removeCommas($(this).val())) > 100) {
      $(this).val(100);
    }
  }
  calculateIpdBill();
});
listenSubmit('#ipdBillForm', function (e) {
  e.preventDefault();
  $(' #discountPercent, #taxPercentage,#otherCharges').prop('disabled', false);
  screenLock();
  $('#saveIpdBillbtn').attr('disabled', true);
  var loadingButton = jQuery(this).find('#saveIpdBillbtn');
  loadingButton.button('loading');
  calculateIpdBill();
  var formData = new FormData($(this)[0]);
  formData.append('total_charges', totalCharges);
  formData.append('total_payments', totalPayments);
  formData.append('gross_total', grossTotal);
  formData.append('net_payable_amount', netPayabelAmount);
  $.ajax({
    url: $('#showIpdBillSaveUrl').val(),
    type: 'POST',
    dataType: 'json',
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      displaySuccessMessage(result.message);
      window.location.reload();
    },
    error: function error(result) {
      UnprocessableInputError(result);
      $('#saveIpdBillbtn').attr('disabled', false);
    },
    complete: function complete() {
      screenUnLock();
      loadingButton.button('reset');
    }
  });
});
function removeCurrencySymbol(amount) {
  var result = amount.replace(/\D/g, '');
  return parseInt(result);
}
function calculateIpdBill() {
  // console.log(removeCurrencySymbol($('#totalCharges').text()))

  totalCharges = removeCurrencySymbol($('#totalCharges').text());
  totalPayments = removeCurrencySymbol($('#totalPayments').text());
  grossTotal = removeCurrencySymbol($('#grossTotal').text());
  discountPercent = removeCurrencySymbol($('#discountPercent').val());
  taxPercentage = removeCurrencySymbol($('#taxPercentage').val());
  otherCharges = removeCurrencySymbol($('#otherCharges').val());

  // discountPercent = (isNaN(discountPercent)) ? 0 : discountPercent
  // taxPercentage = (isNaN(taxPercentage)) ? 0 : taxPercentage
  // otherCharges = (isNaN(otherCharges)) ? 0 : otherCharges

  //calculate
  var total = totalCharges - (totalPayments - otherCharges);
  totalDiscount = percentage(discountPercent, totalCharges);
  totalTax = percentage(taxPercentage, totalCharges);
  netPayabelAmount = isNaN(totalCharges + otherCharges + totalTax - (totalPayments + totalDiscount)) ? 0 : totalCharges + otherCharges + totalTax - (totalPayments + totalDiscount);
  if (netPayabelAmount > 0) $('#billStatus').html('Unpaid');else {
    netPayabelAmount = 0;
    $('#billStatus').html('Paid');
  }
  $('#netPayabelAmount').text(addCommas(netPayabelAmount));
}
function percentage(percent, total) {
  return percent / 100 * total;
}

/***/ }),

/***/ "./resources/assets/js/ipd_charges/ipd_charges.js":
/*!********************************************************!*\
  !*** ./resources/assets/js/ipd_charges/ipd_charges.js ***!
  \********************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadIpdChargesData);
function loadIpdChargesData() {
  if (!$('#editIpdChargesForm').length && !$('#addIpdChargeNewForm').length) {
    return;
  }
  $('#btnIpdChargeSave,#btnEditCharges').prop('disabled', true);
  $('#ipdChargeDate, #ipdEditChargeDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: false,
    sideBySide: true,
    minDate: $('#showIpdPatientCaseDate').val(),
    locale: $('.userCurrentLanguage').val()
  });
  $('#ipdChargeTypeId, #ipdChargeCategoryId, #ipdChargeId').select2({
    dropdownParent: $('#addIpdChargesModal')
  });
  $('#editIpdChargeTypeId, #editIpdChargeCategoryId, #editIpdChargeId').select2({
    dropdownParent: $('#editIpdChargesModal')
  });
}
var editIpdChargeCategoryId = null;
var editIpdChargeId = null;
var editIpdStandardRate = null;
var editAppliedIpdCharge = null;
function renderIpdChargesData(id) {
  $.ajax({
    url: $('#showIpdChargesUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        editIpdChargeCategoryId = result.data.charge_category_id;
        editIpdChargeId = result.data.charge_id;
        editIpdStandardRate = result.data.standard_charge;
        editAppliedIpdCharge = result.data.applied_charge;
        $('#ipdChargesId').val(result.data.id);
        document.querySelector('#ipdEditChargeDate')._flatpickr.setDate(moment(result.data.date).format());
        $('#editIpdChargeTypeId').val(result.data.charge_type_id).trigger('change', [{
          onceOnEditRender: true
        }]);
        $('.price-input').trigger('input');
        $('#appliedChargeId').text(editAppliedIpdCharge);
        $('#editIpdChargesModal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listen('click', '.edit-charges-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var ipdChargesId = $(event.currentTarget).attr('data-id');
  renderIpdChargesData(ipdChargesId);
});
listen('click', '.ipd-charge-delete-btn', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  deleteItem($('#showIpdChargesUrl').val() + '/' + id, '', $('#ipdCharge').val());
});
listenChange('#ipdChargeTypeId, #editIpdChargeTypeId', function (e, onceOnEditRender) {
  var isChargeEdit = $(this).data('is-charge-edit');
  if ($(this).val() !== '') {
    $.ajax({
      url: $('#showIpdChargeCategoryUrl').val(),
      type: 'get',
      dataType: 'json',
      data: {
        id: $(this).val()
      },
      beforeSend: function beforeSend() {
        makeIpdChargesBtnDisabled(isChargeEdit);
      },
      success: function success(data) {
        if (data.data.length !== 0) {
          $(!isChargeEdit ? '#ipdChargeCategoryId' : '#editIpdChargeCategoryId').empty();
          $(!isChargeEdit ? '#ipdChargeCategoryId' : '#editIpdChargeCategoryId').removeAttr('disabled');
          $.each(data.data, function (i, v) {
            $(!isChargeEdit ? '#ipdChargeCategoryId' : '#editIpdChargeCategoryId').append($('<option></option>').attr('value', i).text(v));
          });
          if (!isChargeEdit) $('#ipdChargeCategoryId').trigger('change');else {
            if (typeof onceOnEditRender == 'undefined') $('#editIpdChargeCategoryId').trigger('change');else {
              $('#editIpdChargeCategoryId').val(editIpdChargeCategoryId).trigger('change', onceOnEditRender);
            }
          }
          $(!isChargeEdit ? '#btnIpdChargeSave' : '#btnEditCharges').prop('disabled', false);
        } else {
          $(!isChargeEdit ? '#ipdChargeCategoryId, #ipdChargeId' : '#editIpdChargeCategoryId, #editIpdChargeId').empty();
          $(!isChargeEdit ? '#ipdStandardCharge, #ipdAppliedCharge' : '#editIpdStandardCharge, #editIpdAppliedCharge').val('');
          $(!isChargeEdit ? '#ipdChargeCategoryId, #ipdChargeId, #btnIpdChargeSave' : '#editIpdChargeCategoryId, #editIpdChargeId, #btnEditCharges').prop('disabled', true);
        }
      }
    });
  }
  $(!isChargeEdit ? '#ipdChargeCategoryId, #ipdChargeId' : '#editIpdChargeCategoryId, #editIpdChargeId').empty();
  $(!isChargeEdit ? '#ipdStandardCharge, #ipdAppliedCharge' : '#editIpdStandardCharge, #editIpdAppliedCharge').val('');
  $(!isChargeEdit ? '#ipdChargeCategoryId, #ipdChargeId' : '#editIpdChargeCategoryId, #editIpdChargeId').prop('disabled', true);
  $('#ipdChargeCategoryId ,#ipdChargeId').select2({
    width: '100%',
    placeholder: 'Choose Case',
    dropdownParent: $('#addIpdChargesModal')
  });
  $('#editIpdChargeCategoryId, #editIpdChargeId').select2({
    width: '100%',
    placeholder: 'Choose Case',
    dropdownParent: $('#editIpdChargesModal')
  });
});
listenHiddenBsModal('#addIpdChargesModal,#editIpdChargesModal', function () {
  $('#ipdChargeCategoryId ,#ipdChargeId,#editIpdChargeCategoryId, #editIpdChargeId').attr('disabled', true);
});
listenChange('#ipdChargeCategoryId, #editIpdChargeCategoryId', function (e, onceOnEditRender) {
  var isChargeEdit = $(this).data('is-charge-edit');
  if ($(this).val() !== '') {
    $.ajax({
      url: $('#showIpdChargeUrl').val(),
      type: 'get',
      dataType: 'json',
      data: {
        id: $(this).val()
      },
      beforeSend: function beforeSend() {
        makeIpdChargesBtnDisabled(isChargeEdit);
      },
      success: function success(data) {
        if (data.data.length !== 0) {
          $(!isChargeEdit ? '#ipdChargeId' : '#editIpdChargeId').empty();
          $(!isChargeEdit ? '#ipdChargeId' : '#editIpdChargeId').removeAttr('disabled');
          $.each(data.data, function (i, v) {
            $(!isChargeEdit ? '#ipdChargeId' : '#editIpdChargeId').append($('<option></option>').attr('value', i).text(v));
          });
          if (!isChargeEdit) $('#ipdChargeId').trigger('change');else {
            if (typeof onceOnEditRender == 'undefined') $('#editIpdChargeId').trigger('change');else $('#editIpdChargeId').val(editIpdChargeId).trigger('change', onceOnEditRender);
          }
        } else {
          $(!isChargeEdit ? '#ipdChargeId' : '#editIpdChargeId').prop('disabled', true);
        }
      }
    });
  }
  $(!isChargeEdit ? '#ipdChargeId' : '#editIpdChargeId').empty();
  $(!isChargeEdit ? '#ipdChargeId' : '#editIpdChargeId').prop('disabled', true);
});
listenChange('#ipdChargeId, #editIpdChargeId', function (e, onceOnEditRender) {
  var isChargeEdit = $(this).data('is-charge-edit');
  $.ajax({
    url: $('#showIpdChargeStandardRateUrl').val(),
    type: 'get',
    dataType: 'json',
    data: {
      id: $(this).val(),
      isEdit: isChargeEdit,
      onceOnEditRender: onceOnEditRender,
      ipdChargeId: $('#ipdChargesId').val()
    },
    beforeSend: function beforeSend() {
      makeIpdChargesBtnDisabled(isChargeEdit);
    },
    success: function success(data) {
      if (!isChargeEdit) {
        $('#ipdStandardCharge, #ipdAppliedCharge').val(data.data);
        $('#btnIpdChargeSave').prop('disabled', false);
      } else {
        if (data.data != null) {
          $('#editIpdStandardCharge').val(data.data.standard_charge);
          $('#appliedChargeId').text(data.data.applied_charge);
          $('#editIpdAppliedCharge').val(data.data.applied_charge);
          $('.price-input').trigger('input');
          $('#btnEditCharges').prop('disabled', false);
        } else {
          console.log('from else');
        }
      }
    }
  });
});
listen('keypress', '#editIpdAppliedCharge', function () {
  var ipdAppliedChargeVal = $('#editIpdAppliedCharge').val();
  $('#appliedChargeId').text(ipdAppliedChargeVal);
});
listenSubmit('#addIpdChargeNewForm', function (event) {
  event.preventDefault();
  $('#btnIpdChargeSave').attr('disabled', true);
  var formData = new FormData($(this)[0]);
  $.ajax({
    url: $('#showIpdChargesCreateUrl').val(),
    type: 'POST',
    dataType: 'json',
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#addIpdChargesModal').modal('hide');
        livewire.emit('refresh');
        $('#btnIpdChargeSave').attr('disabled', false);
      }
    },
    error: function error(result) {
      printErrorMessage('#ipdChargevalidationErrorsBox', result);
      $('#btnIpdChargeSave').attr('disabled', false);
    }
  });
});
listenSubmit('#editIpdChargesForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnEditCharges');
  loadingButton.button('loading');
  var id = $('#ipdChargesId').val();
  var url = $('#showIpdChargesUrl').val() + '/' + id;
  var data = {
    'formSelector': $(this),
    'url': url,
    'type': 'POST'
  };
  editRecord(data, loadingButton, '#editIpdChargesModal', '#btnEditCharges');
});
listenHiddenBsModal('#addIpdChargesModal', function () {
  $('#addIpdChargeNewForm')[0].reset();
  $('#ipdChargeTypeId, #ipdChargeCategoryId, #ipdChargeId, #ipdStandardCharge, #ipdAppliedCharge').val('');
  $('#ipdChargeCategoryId, #ipdChargeId').empty();
  $('#ipdChargeCategoryId').append($('<option>Select Charge Category</option>'));
  $('#ipdChargeId').append($('<option>Select Code</option>'));
  $('#ipdChargeTypeId').trigger('change.select2');
  $('#btnIpdChargeSave').prop('disabled', true);
  $("#ipdChargeDate").flatpickr().clear();
});
listenHiddenBsModal('#editIpdChargesModal', function () {
  $('#btnEditCharges').prop('disabled', true);
});
function makeIpdChargesBtnDisabled(isChargeOnEdit) {
  $(!isChargeOnEdit ? '#btnIpdChargeSave' : '#btnEditCharges').prop('disabled', true);
}

/***/ }),

/***/ "./resources/assets/js/ipd_consultant_register/ipd_consultant_register.js":
/*!********************************************************************************!*\
  !*** ./resources/assets/js/ipd_consultant_register/ipd_consultant_register.js ***!
  \********************************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadIpdConsultantData);
function loadIpdConsultantData() {
  if (!$('#showIpdConsultantRegisterUrl').length) {
    return;
  }
  $('.doctorId').select2({
    width: '100%',
    dropdownParent: $('#addConsultantInstructionModal')
  });
  $('#editConsultantDoctorId').select2({
    width: '100%',
    dropdownParent: $('#editIpdConsultantInstructionModal')
  });
  addDateTimePicker();
}
var removeReadOnlyAttrInDate = function removeReadOnlyAttrInDate(selector) {
  $(selector).attr('readonly', false);
};
removeReadOnlyAttrInDate('.appliedDate');
removeReadOnlyAttrInDate('.instructionDate');
var addDateTimePicker = function addDateTimePicker() {
  $('.appliedDate').flatpickr({
    enableTime: true,
    dateFormat: "Y-m-d H:i",
    useCurrent: false,
    sideBySide: true,
    allowInput: false,
    widgetPositioning: {
      horizontal: 'left',
      vertical: 'bottom'
    },
    minDate: $('#showIpdPatientCaseDate').val(),
    locale: $('.userCurrentLanguage').val()
  });
  $('.instructionDate').flatpickr({
    enableTime: false,
    format: 'YYYY-MM-DD',
    useCurrent: true,
    sideBySide: true,
    widgetPositioning: {
      horizontal: 'left',
      vertical: 'bottom'
    },
    minDate: $('#showIpdPatientCaseDate').val()
  });
};
var dropdownToSelect2 = function dropdownToSelect2(selector) {
  $(selector).select2({
    placeholder: 'Select Doctor',
    width: '100%',
    dropdownParent: $('#addConsultantInstructionModal')
  });
};
listen('click', '#addIpdConsultantItem', function () {
  var uniqueId = $('#showIpdUniqueId').val();
  var data = {
    'doctors': JSON.parse($('#showIpdDoctors').val()),
    'uniqueId': uniqueId
  };
  var ipdConsultantItemHtml = prepareTemplateRender('#ipdConsultantInstructionItemTemplate', data);
  $('.ipd-consultant-item-container').append(ipdConsultantItemHtml);
  dropdownToSelect2('.doctorId');
  addDateTimePicker();
  // removeReadOnlyAttrInDate('.appliedDate');
  // removeReadOnlyAttrInDate('.instructionDate');
  uniqueId++;
  resetIpdConsultantItemIndex();
});
var resetIpdConsultantItemIndex = function resetIpdConsultantItemIndex() {
  var index = 1;
  var uniqueId = $('#showIpdUniqueId').val();
  $('.ipd-consultant-item-container>tr').each(function () {
    $(this).find('.item-number').text(index);
    index++;
  });
  if (index - 1 == 0) {
    var data = {
      'doctors': JSON.parse($('#showIpdDoctors').val()),
      'uniqueId': uniqueId
    };
    var ipdConsultantItemHtml = prepareTemplateRender('#ipdConsultantInstructionItemTemplate', data);
    $('.ipd-consultant-item-container').append(ipdConsultantItemHtml);
    dropdownToSelect2('.doctorId');
    addDateTimePicker();
    uniqueId++;
  }
};
listen('click', '.deleteIpdConsultantInstruction', function () {
  $(this).parents('tr').remove();
  resetIpdConsultantItemIndex();
});
listen('click', '.delete-consultant-btn', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  deleteItem($('#showIpdConsultantRegisterUrl').val() + '/' + id, '', $('#ipdConsultantRegister').val());
});
listenSubmit('#addIpdConsultantNewForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnIpdConsultantSave');
  loadingButton.button('loading');
  var data = {
    'formSelector': $(this),
    'url': $('#showIpdConsultantRegisterCreateUrl').val(),
    'type': 'POST'
    // 'tableSelector': tableName,
  };

  newRecord(data, loadingButton, '#addConsultantInstructionModal');
  loadingButton.attr('disabled', false);
});
listen('click', '.edit-consultant-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var ipdConsultantId = $(event.currentTarget).attr('data-id');
  renderIpdConsultantData(ipdConsultantId);
});
function renderIpdConsultantData(id) {
  $.ajax({
    url: $('#showIpdConsultantRegisterUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#ipdEditConsultantId').val(result.data.id);
        document.querySelector('#editConsultantAppliedDate')._flatpickr.setDate(moment(result.data.applied_date).format());
        $('#editConsultantDoctorId').val(result.data.doctor_id).trigger('change.select2');
        $('#editConsultantDoctorId').select2({
          width: '100%',
          dropdownParent: $('#editIpdConsultantInstructionModal')
        });
        document.querySelector('#editConsultantInstructionDate')._flatpickr.setDate(moment(result.data.instruction_date).format());
        $('#editConsultantInstruction').val(result.data.instruction);
        $('#editIpdConsultantInstructionModal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#editIpdConsultantNewForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editConsultantSave');
  loadingButton.button('loading');
  var id = $('#ipdEditConsultantId').val();
  var url = $('#showIpdConsultantRegisterUrl').val() + '/' + id;
  var data = {
    'formSelector': $(this),
    'url': url,
    'type': 'POST'
    // 'tableSelector': tableName,
  };

  editRecord(data, loadingButton, '#editIpdConsultantInstructionModal');
});
listenHiddenBsModal('#addConsultantInstructionModal', function () {
  resetModalForm('#addIpdConsultantNewForm', '#ipdConsultantErrorsBox');
  $('#ipdConsultantInstructionTbl').find('tr:gt(1)').remove();
  $('.doctorId').val('');
  $('.doctorId').trigger('change');
});

/***/ }),

/***/ "./resources/assets/js/ipd_diagnosis/ipd_diagnosis.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/ipd_diagnosis/ipd_diagnosis.js ***!
  \************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadIpdDiagnosisData);
function loadIpdDiagnosisData() {
  if (!$('#ipdDiagnosisReportDate').length && !$('#editIpdDiagnosisReportDate').length) {
    return;
  }
  $('#ipdDiagnosisReportDate, #editIpdDiagnosisReportDate').flatpickr({
    enableTime: true,
    defaultDate: new Date(),
    dateFormat: "Y-m-d H:i",
    minDate: $('#showIpdPatientCaseDate').val(),
    locale: $('.userCurrentLanguage').val(),
    widgetPositioning: {
      horizontal: 'left',
      vertical: 'bottom'
    }
  });
}
listen('click', '.ipdDignosis-delete-btn', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  deleteItem($('#showIpdDiagnosisUrl').val() + '/' + id, '', $('#ipdDiagnosisDelete').val());
});
listenSubmit('#addIpdDiagnosisForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnSave');
  loadingButton.button('loading');
  var data = {
    'formSelector': $(this),
    'url': $('#showIpdDiagnosisCreateUrl').val(),
    'type': 'POST'
  };
  newRecord(data, loadingButton, '#add_ipd_diagnosis_modal');
});
listen('click', '.ipdDignosis-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var ipdDiagnosisId = $(event.currentTarget).attr('data-id');
  renderDataIpdDiagnosis(ipdDiagnosisId);
});
function renderDataIpdDiagnosis(id) {
  $.ajax({
    url: $('#showIpdDiagnosisUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var ext = result.data.ipd_diagnosis_document_url.split('.').pop().toLowerCase();
        if (ext == 'pdf') {
          $('#editIpdDiagnosisPreviewImage').css('background-image', 'url("' + $('.pdfDocumentImageUrl').val() + '")');
        } else if (ext == 'docx' || ext == 'doc') {
          $('#editIpdDiagnosisPreviewImage').css('background-image', 'url("' + $('.docxDocumentImageUrl').val() + '")');
        } else {
          if (result.data.ipd_diagnosis_document_url != '') {
            $('#editIpdDiagnosisPreviewImage').css('background-image', 'url("' + result.data.ipd_diagnosis_document_url + '")');
          }
        }
        $('#ipdDiagnosisId').val(result.data.id);
        $('#editIpdDiagnosisReportType').val(result.data.report_type);
        document.querySelector('#editIpdDiagnosisReportDate')._flatpickr.setDate(moment(result.data.report_date).format());
        $('#editIpdDiagnosisDescription').val(result.data.description);
        if (result.data.ipd_diagnosis_document_url != '') {
          $('#editIpdDiagnosisDocumentViewUrl').show();
          $('.btn-view').show();
          $('#editIpdDiagnosisDocumentViewUrl').attr('href', result.data.ipd_diagnosis_document_url);
        } else {
          $('#editIpdDiagnosisDocumentViewUrl').hide();
          $('.btn-view').hide();
        }
        $('#edit_ipd_diagnosis_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
;
listenSubmit('#editIpdDiagnosisForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editIpdDiagnosisSave');
  loadingButton.button('loading');
  var id = $('#ipdDiagnosisId').val();
  var url = $('#showIpdDiagnosisUrl').val() + '/' + id;
  var data = {
    'formSelector': $(this),
    'url': url,
    'type': 'POST'
  };
  editRecord(data, loadingButton, '#edit_ipd_diagnosis_modal');
});
listenHiddenBsModal('#add_ipd_diagnosis_modal', function () {
  resetModalForm('#addIpdDiagnosisForm', '#ipdDiagnosisErrorsBox');
  $('#ipdDiagnosisPreviewImage').attr('src', $('#showDefaultDocumentImageUrl').val());
  $('#ipdDiagnosisPreviewImage').css('background-image', 'url("' + $('#showDefaultDocumentImageUrl').val() + '")');
});
listenHiddenBsModal('#edit_ipd_diagnosis_modal', function () {
  resetModalForm('#editIpdDiagnosisForm', '#editIpdDiagnosisErrorsBox');
  $('#editIpdDiagnosisPreviewImage').attr('src', $('#showDefaultDocumentImageUrl').val());
  $('#editIpdDiagnosisPreviewImage').css('background-image', 'url("' + $('#showDefaultDocumentImageUrl').val() + '")');
});
listenChange('#documentImage', function () {
  var extension = isValidIpdDiagnosisDocument($(this), '#ipdDiagnosisErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#ipdDiagnosisErrorsBox').html('').hide();
    displayDocument(this, '#ipdDiagnosisPreviewImage', extension);
  }
});
listenChange('#editDocumentImage', function () {
  var extension = isValidIpdDiagnosisDocument($(this), '#editIpdDiagnosisErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#editIpdDiagnosisErrorsBox').html('').hide();
    displayDocument(this, '#editIpdDiagnosisPreviewImage', extension);
  }
});
function isValidIpdDiagnosisDocument(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx']) == -1) {
    $(inputSelector).val('');
    $(validationMessageSelector).html('The document must be a file of type: jpeg, jpg, png, pdf, doc, docx.').show();
    return false;
  }
  return ext;
}
;
listen('click', '.removeIpdDiagnosisImage', function () {
  defaultImagePreview('.previewImage');
});
listen('click', '.removeIpdDiagnosisImageEdit', function () {
  defaultImagePreview('.previewImage');
});

/***/ }),

/***/ "./resources/assets/js/ipd_patients/create.js":
/*!****************************************************!*\
  !*** ./resources/assets/js/ipd_patients/create.js ***!
  \****************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadIpdPatientCreate);
function loadIpdPatientCreate() {
  if (!$('#ipdAdmissionDate').length && !$('#editIpdAdmissionDate').length) {
    return;
  }
  $('#ipdPatientId, #ipdDoctorId, #ipdBedTypeId,#editIpdPatientId, #editIpdDoctorId, #editIpdBedTypeId').select2({
    width: '100%'
  });
  $('#ipdCaseId, #editIpdCaseId ').select2({
    width: '100%',
    placeholder: 'Choose Case'
  });
  $('#ipdBedId, #editIpdBedId').select2({
    width: '100%',
    placeholder: 'Choose Bed'
  });
  var admissionFlatPicker = $('#ipdAdmissionDate, #editIpdAdmissionDate').flatpickr({
    enableTime: true,
    dateFormat: 'Y-m-d H:i',
    locale: $('.userCurrentLanguage').val()
  });
  if ($('.isEdit').val()) {
    $('.ipdPatientId, .ipdBedTypeId').trigger('change');
    admissionFlatPicker.set('minDate', $('.ipdAdmissionDate').val());
  } else {
    admissionFlatPicker.setDate(new Date());
    admissionFlatPicker.set('minDate', new Date());
  }
}
listenKeyup('.ipdDepartmentFloatNumber', function () {
  if ($(this).val().indexOf('.') != -1) {
    if ($(this).val().split('.')[1].length > 2) {
      if (isNaN(parseFloat(this.value))) return;
      this.value = parseFloat(this.value).toFixed(2);
    }
  }
  return this;
});
listenSubmit('#createIpdPatientForm, #editIpdPatientDepartmentForm', function () {
  $('#ipdSave, #btnIpdPatientEdit').attr('disabled', true);
});
listenChange('.ipdPatientId', function () {
  if ($(this).val() !== '') {
    $.ajax({
      url: $('.patientCasesUrl').val(),
      type: 'get',
      dataType: 'json',
      data: {
        id: $(this).val()
      },
      success: function success(data) {
        if (data.data.length !== 0) {
          $('#ipdDepartmentCaseId,#editIpdDepartmentCaseId').empty();
          $('#ipdDepartmentCaseId,#editIpdDepartmentCaseId').removeAttr('disabled');
          $.each(data.data, function (i, v) {
            $('#ipdDepartmentCaseId,#editIpdDepartmentCaseId').append($('<option></option>').attr('value', i).text(v));
          });
          $('#ipdDepartmentCaseId,#editIpdDepartmentCaseId').val($('#editIpdPatientCaseId').val()).trigger('change.select2');
        } else {
          $('#ipdDepartmentCaseId,#editIpdDepartmentCaseId').prop('disabled', true);
        }
      }
    });
  }
  $('#ipdDepartmentCaseId,#editIpdDepartmentCaseId').empty();
  $('#ipdDepartmentCaseId,#editIpdDepartmentCaseId').prop('disabled', true);
  $('#ipdDepartmentCaseId, #editIpdDepartmentCaseId ').select2({
    width: '100%',
    placeholder: 'Choose Case'
  });
});
listenChange('.ipdBedTypeId', function () {
  var bedId = null;
  var bedTypeId = null;
  if (typeof $('#editIpdPatientBedId').val() != 'undefined' && typeof $('#editIpdPatientBedTypeId').val() != 'undefined') {
    bedId = $('#editIpdPatientBedId').val();
    bedTypeId = $('#editIpdPatientBedTypeId').val();
  }
  if ($(this).val() !== '') {
    var bedType = $(this).val();
    $.ajax({
      url: $('.patientBedsUrl').val(),
      type: 'get',
      dataType: 'json',
      data: {
        id: $(this).val(),
        isEdit: $('.isEdit').val(),
        bedId: bedId,
        ipdPatientBedTypeId: bedTypeId
      },
      success: function success(data) {
        if (data.data !== null) {
          if (data.data.length !== 0) {
            $('#ipdBedId,#editIpdBedId').empty();
            $('#ipdBedId,#editIpdBedId').removeAttr('disabled');
            $.each(data.data, function (i, v) {
              $('#ipdBedId,#editIpdBedId').append($('<option></option>').attr('value', i).text(v));
            });
            if (typeof $('#editIpdPatientBedId').val() != 'undefined' && typeof $('#editIpdPatientBedTypeId').val() != 'undefined') {
              if (bedType === $('#editIpdPatientBedTypeId').val()) {
                $('#ipdBedId,#editIpdBedId').val($('#editIpdPatientBedId').val()).trigger('change.select2');
              }
            }
            $('#ipdBedId,#editIpdBedId').prop('required', true);
          }
        } else {
          $('#ipdBedId,#editIpdBedId').prop('disabled', true);
        }
      }
    });
  }
  $('#ipdBedId,#editIpdBedId').empty();
  $('#ipdBedId,#editIpdBedId').prop('disabled', true);
  $('#ipdBedId, #editIpdBedId').select2({
    width: '100%',
    placeholder: 'Choose Bed'
  });
});

/***/ }),

/***/ "./resources/assets/js/ipd_patients/ipd_patients.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/ipd_patients/ipd_patients.js ***!
  \**********************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadIpdPatientData);
function loadIpdPatientData() {
  if (!$('#ipd_patients_filter_status').length) {
    return;
  }
  $('#ipd_patients_filter_status').select2();
}
listenChange('#ipd_patients_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listenClick('#ipdResetFilter', function () {
  $('#ipd_patients_filter_status').val('0').trigger('change');
  hideDropdownManually($('#ipdPatientDepartmentFilterBtn'), $('.dropdown-menu'));
});
listen('click', '.deleteIpdDepartmentBtn', function (event) {
  var ipdPatientId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexIpdPatientUrl').val() + '/' + ipdPatientId, '', $('#ipdPatientDepartment').val());
});

/***/ }),

/***/ "./resources/assets/js/ipd_patients_list/ipd_charges.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/ipd_patients_list/ipd_charges.js ***!
  \**************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/ipd_patients_list/ipd_consultant_register.js":
/*!**************************************************************************!*\
  !*** ./resources/assets/js/ipd_patients_list/ipd_consultant_register.js ***!
  \**************************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/ipd_patients_list/ipd_diagnosis.js":
/*!****************************************************************!*\
  !*** ./resources/assets/js/ipd_patients_list/ipd_diagnosis.js ***!
  \****************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/ipd_patients_list/ipd_patients.js":
/*!***************************************************************!*\
  !*** ./resources/assets/js/ipd_patients_list/ipd_patients.js ***!
  \***************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/ipd_patients_list/ipd_payments.js":
/*!***************************************************************!*\
  !*** ./resources/assets/js/ipd_patients_list/ipd_payments.js ***!
  \***************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/ipd_patients_list/ipd_prescriptions.js":
/*!********************************************************************!*\
  !*** ./resources/assets/js/ipd_patients_list/ipd_prescriptions.js ***!
  \********************************************************************/
/***/ (() => {

listenClick('.viewIpdPrescription', function () {
  $.ajax({
    url: $('#showIpdPrescriptionUrl').val() + '/' + $(this).data('id'),
    type: 'get',
    success: function success(result) {
      $('#ipdPrescriptionViewData').html(result);
      $('#showIpdPrescriptionModal').modal('show');
      ajaxCallCompleted();
    }
  });
});
listenClick('.printIpdPrescription', function () {
  var divToPrint = document.getElementById('DivIdToPrint');
  var newWin = window.open('', 'Print-Window');
  newWin.document.open();
  newWin.document.write('<html><link href="' + $('#showListBootstrapUrl').val() + '" rel="stylesheet" type="text/css"/>' + '<body onload="window.print()">' + divToPrint.innerHTML + '</body></html>');
  newWin.document.close();
  setTimeout(function () {
    newWin.close();
  }, 10);
});

/***/ }),

/***/ "./resources/assets/js/ipd_patients_list/ipd_stripe_payment.js":
/*!*********************************************************************!*\
  !*** ./resources/assets/js/ipd_patients_list/ipd_stripe_payment.js ***!
  \*********************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadIpdStrikePaymentData);
function loadIpdStrikePaymentData() {
  $.ajaxSetup({
    headers: {
      'X-CSRF-TOKEN': $('meta[name="csrf-token"]').attr('content')
    }
  });
}
listenClick('#ipdPaymentBtn', function () {
  var _this = this;
  var payloadData = {
    amount: parseInt($('#billAmount').val()),
    ipdNumber: $('#ipdNumber').val()
    // charge_currency: $('#payment_currency').val(),
  };

  var stripeKey = $('#stripeConfigKey').val();
  var stripe = Stripe(stripeKey);

  // return false;
  $(this).html('<div class="spinner-border spinner-border-sm " role="status">\n' + '                                            <span class="sr-only">Loading...</span>\n' + '                                        </div>').addClass('disabled');
  $.post($('#showListIpdStripePaymentUrl').val(), payloadData).done(function (result) {
    var sessionId = result.data.sessionId;
    stripe.redirectToCheckout({
      sessionId: sessionId
    }).then(function (result) {
      $(this).html('Make Payment').removeClass('disabled');
      manageAjaxErrors(result);
    });
  })["catch"](function (error) {
    $(_this).html('Make Payment').removeClass('disabled');
    manageAjaxErrors(error);
  });
});

/***/ }),

/***/ "./resources/assets/js/ipd_patients_list/ipd_timelines.js":
/*!****************************************************************!*\
  !*** ./resources/assets/js/ipd_patients_list/ipd_timelines.js ***!
  \****************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadIpdTimelineData);
function loadIpdTimelineData() {
  if (!$('#showListIpdPatientDepartmentId').length) {
    return;
  }
  getPatientListIpdTimelines($('#showListIpdPatientDepartmentId').val());
}
function getPatientListIpdTimelines(ipdPatientDepartmentId) {
  $.ajax({
    url: $('#showListIpdTimelinesUrl').val(),
    type: 'get',
    data: {
      id: ipdPatientDepartmentId
    },
    success: function success(data) {
      $('#ipdTimelines').html(data);
    }
  });
}
;

/***/ }),

/***/ "./resources/assets/js/ipd_payments/ipd_payments.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/ipd_payments/ipd_payments.js ***!
  \**********************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadIpdPaymentData);
function loadIpdPaymentData() {
  if (!$('#addIpdPaymentNewForm').length && !$('#editIpdPaymentForm').length) {
    return;
  }
  $('#ipdPaymentDate,#editIpdPaymentDate').flatpickr({
    dateFormat: "Y-m-d",
    enableTime: false,
    minDate: $('#showIpdPatientCaseDate').val(),
    locale: $('.userCurrentLanguage').val(),
    widgetPositioning: {
      horizontal: 'right',
      vertical: 'bottom'
    }
  });
  $('#ipdPaymentModeId').select2({
    width: '100%',
    dropdownParent: $('#addIpdPaymentModal')
  });
  $('#editIpdPaymentModeId').select2({
    width: '100%',
    dropdownParent: $('#editIpdPaymentModal')
  });
}
listen('click', '.ipdpayment-delete-btn', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  deleteItem($('#showIpdPaymentUrl').val() + '/' + id, null, $('#ipdPaymentButton').val());
});
listen('click', '.ipdpayment-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var ipdPaymentId = $(event.currentTarget).attr('data-id');
  renderIpdPaymentData(ipdPaymentId);
});
listenSubmit('#addIpdPaymentNewForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnIpdPaymentSave');
  loadingButton.button('loading');
  var formData = new FormData($(this)[0]);
  $.ajax({
    url: $('#showIpdPaymentCreateUrl').val(),
    type: 'POST',
    dataType: 'json',
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#addIpdPaymentModal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#ipdPaymentValidationErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
function renderIpdPaymentData(id) {
  $.ajax({
    url: $('#showIpdPaymentUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var ext = result.data.ipd_payment_document_url.split('.').pop().toLowerCase();
        if (ext == 'pdf') {
          $('#editIpdPaymentPreviewImage').css('background-image', 'url("' + $('.pdfDocumentImageUrl').val() + '")');
        } else if (ext == 'docx' || ext == 'doc') {
          $('#editIpdPaymentPreviewImage').css('background-image', 'url("' + $('.docxDocumentImageUrl').val() + '")');
        } else {
          if (result.data.ipd_payment_document_url != '') {
            $('#editIpdPaymentPreviewImage').css('background-image', 'url("' + result.data.ipd_payment_document_url + '")');
          } else {
            $('#editIpdPaymentPreviewImage').css('background-image', 'url("' + $('.showDefaultDocumentImageUrl').val() + '")');
          }
        }
        $('#ipdPaymentId').val(result.data.id);
        $('#editIpdPaymentAmount').val(result.data.amount);
        document.querySelector('#editIpdPaymentDate')._flatpickr.setDate(moment(result.data.date).format('YYYY-MM-DD h:mm A'));
        $('#editIpdPaymentNote').val(result.data.notes);
        $('#editIpdPaymentModeId').val(result.data.payment_mode).trigger('change.select2');
        $('#editIpdPaymentModal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
;
listenSubmit('#editIpdPaymentForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnEditIpdPaymentSave');
  loadingButton.button('loading');
  var id = $('#ipdPaymentId').val();
  var url = $('#showIpdPaymentUrl').val() + '/' + id;
  var data = {
    'formSelector': $(this),
    'url': url,
    'type': 'POST'
  };
  editIpdPaymentRecord(data, loadingButton, '#editIpdPaymentModal');
});
listenHiddenBsModal('#addIpdPaymentModal', function () {
  resetModalForm('#addIpdPaymentNewForm', '#ipdPaymentValidationErrorsBox');
  $('#ipdPaymentPreviewImage').attr('src', $('#showDefaultDocumentImageUrl').val());
  $('#ipdPaymentPreviewImage').css('background-image', 'url("' + $('#showDefaultDocumentImageUrl').val() + '")');
});
listenHiddenBsModal('#editIpdPaymentModal', function () {
  resetModalForm('#editIpdPaymentForm', '#editIpdPaymentValidationErrorsBox');
});
listenChange('#ipdPaymentDocumentImage', function () {
  var extension = isValidIpdPaymentDocument($(this), '#ipdPaymentValidationErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#ipdPaymentValidationErrorsBox').html('').hide();
    displayDocument(this, '#ipdPaymentPreviewImage', extension);
  }
});
listenChange('#editIpdPaymentDocumentImage', function () {
  var extension = isValidIpdPaymentDocument($(this), '#editIpdPaymentValidationErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#editIpdPaymentValidationErrorsBox').html('').hide();
    displayDocument(this, '#editIpdPaymentPreviewImage', extension);
  }
});
function isValidIpdPaymentDocument(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx']) == -1) {
    $(inputSelector).val('');
    $(validationMessageSelector).html('The document must be a file of type: jpeg, jpg, png, pdf, doc, docx.').show();
    return false;
  }
  return ext;
}
;
function deleteItemPaymentAjax(url, tableId, header) {
  var callFunction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  $.ajax({
    url: url,
    type: 'DELETE',
    dataType: 'json',
    success: function success(obj) {
      if (obj.success) {
        Livewire.emit('resetPage');
      }
      Swal.fire({
        icon: 'success',
        title: 'Deleted!',
        confirmButtonColor: '#009ef7',
        text: header + ' has been deleted.',
        timer: 2000
      });
      if (callFunction) {
        eval(callFunction);
      }
    },
    error: function error(data) {
      Swal.fire({
        title: '',
        text: data.responseJSON.message,
        confirmButtonColor: '#009ef7',
        icon: 'error',
        timer: 5000
      });
    }
  });
}
window.editIpdPaymentRecord = function (data, loadingButton) {
  var modalSelector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '#EditModal';
  var formData = data.formSelector === '' ? data.formData : new FormData($(data.formSelector)[0]);
  $.ajax({
    url: data.url,
    type: data.type,
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $(modalSelector).modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
};
listen('click', '#ipdPaymentDocumentImage', function () {
  defaultImagePreview('#ipdPaymentPreviewImage');
});
listen('click', '.removeIpdPaymentImageEdit', function () {
  defaultImagePreview('#editIpdPaymentPreviewImage');
});

/***/ }),

/***/ "./resources/assets/js/ipd_prescriptions/ipd_prescriptions.js":
/*!********************************************************************!*\
  !*** ./resources/assets/js/ipd_prescriptions/ipd_prescriptions.js ***!
  \********************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadIpdPrescriptionData);
function loadIpdPrescriptionData() {
  if (!$('#editIpdPrescriptionForm').length && !$('#addIpdPrescriptionForm').length) {
    return;
  }
}
listen('click', '.deleteIpdPrescriptionBtn', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  deleteItem($('#showIpdPrescriptionUrl').val() + '/' + id, '', $('#ipdPrescription').val());
});
var dropdownToSelect2 = function dropdownToSelect2(selector) {
  if (selector === '#ipdPrescriptionItemTemplate') {
    $('.ipdCategoryId').select2({
      placeholder: 'Select Category',
      width: '100%',
      dropdownParent: $('#addIpdPrescriptionModal')
    });
  } else {
    $('.ipdCategoryId').select2({
      placeholder: 'Select Category',
      width: '100%',
      dropdownParent: $('#editIpdPrescriptionModal')
    });
  }
};
dropdownToSelect2('#ipdPrescriptionItemTemplate');
var medicineSelect2 = function medicineSelect2(selector) {
  if (selector === 'addIpdPrescriptionModal') {
    $('.medicineId').select2({
      placeholder: 'Select Category',
      width: '100%',
      dropdownParent: $('#addIpdPrescriptionModal')
    });
  } else {
    $('.medicineId').select2({
      placeholder: 'Select Medicine',
      width: '100%',
      dropdownParent: $('#editIpdPrescriptionModal')
    });
  }
};
listenClick('#addPrescriptionItem, #addPrescriptionItemOnEdit', function () {
  var itemSelector = parseInt($(this).data('edit')) ? '#editIpdPrescriptionItemTemplate' : '#ipdPrescriptionItemTemplate';
  var tbodyItemSelector = parseInt($(this).data('edit')) ? '.edit-ipd-prescription-item-container' : '.ipd-prescription-item-container';
  var uniqueId = $('#showIpdUniqueId').val();
  var data = {
    'medicineCategories': JSON.parse($('#showMedicineCategories').val()),
    'uniqueId': uniqueId
  };
  var ipdPrescriptionItemHtml = prepareTemplateRender(itemSelector, data);
  $(tbodyItemSelector).append(ipdPrescriptionItemHtml);
  dropdownToSelect2(itemSelector);
  uniqueId++;
  $('#showIpdUniqueId').val(uniqueId);
  resetIpdPrescriptionItemIndex(parseInt($(this).data('edit')));
});
var resetIpdPrescriptionItemIndex = function resetIpdPrescriptionItemIndex(itemMode) {
  var itemSelector = itemMode ? '#editIpdPrescriptionItemTemplate' : '#ipdPrescriptionItemTemplate';
  var tbodyItemSelector = itemMode ? '.edit-ipd-prescription-item-container' : '.ipd-prescription-item-container';
  var itemNo = itemMode ? '.edit-prescription-item-number' : '.prescription-item-number';
  var index = 1;
  $(tbodyItemSelector + '>tr').each(function () {
    $(this).find(itemNo).text(index);
    index++;
  });
  var uniqueId = $('#showIpdUniqueId').val();
  if (index - 1 == 0) {
    var data = {
      'medicineCategories': JSON.parse($('#showMedicineCategories').val()),
      'uniqueId': uniqueId
    };
    var ipdPrescriptionItemHtml = prepareTemplateRender(itemSelector, data);
    $(tbodyItemSelector).append(ipdPrescriptionItemHtml);
    dropdownToSelect2(itemSelector);
    uniqueId++;
  }
};
listenClick('.editIpdPrescriptionBtn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var ipdPrescriptionId = event.currentTarget.dataset.id;
  renderOpdPrescriptionData(ipdPrescriptionId);
});
listenClick('.deleteIpdPrescription, .deleteIpdPrescriptionOnEdit', function () {
  $(this).parents('tr').remove();
  resetIpdPrescriptionItemIndex(parseInt($(this).data('edit')));
});
listenChange('.ipdCategoryId', function (e, rData) {
  var medicineId = $(document).find('[data-medicine-id=\'' + $(this).data('id') + '\']');
  if ($(this).val() !== '') {
    $.ajax({
      url: $('#showMedicinesListUrl').val(),
      type: 'get',
      dataType: 'json',
      data: {
        id: $(this).val()
      },
      success: function success(data) {
        if (data.data.length !== 0) {
          medicineId.empty();
          medicineId.removeAttr('disabled');
          $.each(data.data, function (i, v) {
            medicineId.append($('<option></option>').attr('value', i).text(v));
          });
          if ($('.modal').hasClass('show')) {
            medicineSelect2($('.modal.fade.show').attr('id'));
          }
          if (typeof rData != 'undefined') {
            medicineId.val(rData.medicineId).trigger('change.select2');
          }
        } else {
          medicineId.append($('<option></option>').text('Select Medicine'));
        }
      }
    });
  }
  medicineId.empty();
  medicineId.prop('disabled', true);
});
function renderOpdPrescriptionData(id) {
  $.ajax({
    url: $('#showIpdPrescriptionUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var ipdPrescriptionData = result.data.ipdPrescription;
        var ipdPrescriptionItemsData = result.data.ipdPrescriptionItems;
        $('#ipdEditPrescriptionId').val(ipdPrescriptionData.id);
        $('#editHeaderNote').val(ipdPrescriptionData.header_note);
        $('#editFooterNote').val(ipdPrescriptionData.footer_note);
        $.each(ipdPrescriptionItemsData, function (i, v) {
          $('#addPrescriptionItemOnEdit').trigger('click');
          var rowId = $('#showIpdUniqueId').val() - 1;
          $(document).find('[data-id=\'' + rowId + '\']').val(v.category_id).trigger('change', [{
            medicineId: v.medicine_id
          }]);
          $(document).find('[data-dosage-id=\'' + rowId + '\']').val(v.dosage);
          $(document).find('[data-instruction-id=\'' + rowId + '\']').val(v.instruction);
        });
        var index = 1;
        $('.edit-ipd-prescription-item-container>tr').each(function () {
          $(this).find('.prescription-item-number').text(index);
          index++;
        });
        $('#editIpdPrescriptionModal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenClick('.printIpdPrescription', function () {
  var divToPrint = document.getElementById('DivIdToPrint');
  var newWin = window.open('', 'Print-Window');
  newWin.document.open();
  newWin.document.write('<html><link href="' + $('#showIpdBootstrapUrl').val() + '" rel="stylesheet" type="text/css"/>' + '<body onload="window.print()">' + divToPrint.innerHTML + '</body></html>');
  newWin.document.close();
  setTimeout(function () {
    newWin.close();
  }, 1000000);
});
listenHiddenBsModal('#addIpdPrescriptionModal', function () {
  resetModalForm('#addIpdPrescriptionForm', '#validationErrorsBox');
  $('#ipdPrescriptionTbl').find('tr:gt(1)').remove();
  $('.ipdCategoryId').val('');
  $('.ipdCategoryId').trigger('change');
});
listenShownBsModal('#addIpdPrescriptionModal', function () {
  medicineSelect2('.medicineId');
  dropdownToSelect2('#ipdPrescriptionItemTemplate');
});
listenHiddenBsModal('#editIpdPrescriptionModal', function () {
  $('#editIpdPrescriptionTbl').find('tr:gt(0)').remove();
  resetModalForm('#editIpdPrescriptionForm', '#editIpdPrescriptionErrorsBox');
});
listenClick('.viewIpdPrescription', function (event) {
  var ipdPrescriptionShowId = event.currentTarget.dataset.id;
  $.ajax({
    url: $('#showIpdPrescriptionUrl').val() + '/' + ipdPrescriptionShowId,
    type: 'get',
    beforeSend: function beforeSend() {
      screenLock();
    },
    success: function success(result) {
      $('#ipdPrescriptionViewData').html(result);
      $('#showIpdPrescriptionModal').modal('show');
      ajaxCallCompleted();
    },
    complete: function complete() {
      screenUnLock();
    }
  });
});
listenSubmit('#addIpdPrescriptionForm', function (event) {
  event.preventDefault();
  if (checkOpdMedicine() !== true) {
    return false;
  }
  var loadingButton = jQuery(this).find('#btnIpdPrescriptionSave');
  loadingButton.button('loading');
  var data = {
    'formSelector': $(this),
    'url': $('#showIpdPrescriptionCreateUrl').val(),
    'type': 'POST'
  };
  newRecord(data, loadingButton, '#addIpdPrescriptionModal');
});
function checkOpdMedicine() {
  var result = true;
  $('.medicineId').each(function xyz() {
    if ($(this).val() == 'Select Medicine') {
      displayErrorMessage('Medicine field is required');
      result = false;
      return false;
    }
  });
  return result;
}
listenSubmit('#editIpdPrescriptionForm', function (event) {
  event.preventDefault();
  if (checkOpdMedicine() !== true) {
    return false;
  }
  var loadingButton = jQuery(this).find('#btnEditIpdPrescriptionSave');
  loadingButton.button('loading');
  var id = $('#ipdEditPrescriptionId').val();
  var url = $('#showIpdPrescriptionUrl').val() + '/' + id;
  var data = {
    'formSelector': $(this),
    'url': url,
    'type': 'POST'
    // 'tableSelector': tableName,
  };

  editRecord(data, loadingButton, '#editIpdPrescriptionModal');
});

/***/ }),

/***/ "./resources/assets/js/ipd_timelines/ipd_timelines.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/ipd_timelines/ipd_timelines.js ***!
  \************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadIpdTimelineData);
function loadIpdTimelineData() {
  if (!$('#editIpdTimelineForm').length && !$('#addIpdTimelineNewForm').length) {
    return;
  }
  getIpdTimelines($('#ipdPatientDepartmentId').val());
  $('#ipdTimelineDate, #editIpdTimelineDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: true,
    sideBySide: true,
    minDate: $('#showIpdPatientCaseDate').val(),
    locale: $('.userCurrentLanguage').val()
  });
}
listenSubmit('#addIpdTimelineNewForm', function (e) {
  e.preventDefault();
  var loadingButton = jQuery(this).find('#btnIpdTimelineSave');
  loadingButton.button('loading');
  var data = {
    'formSelector': $(this),
    'url': $('#showIpdTimelineCreateUrl').val(),
    'type': 'POST',
    'tableSelector': '#tbl'
  };
  newRecord(data, loadingButton, '#addIpdTimelineModal');
  loadingButton.attr('disabled', false);
  setTimeout(function () {
    getIpdTimelines($('#ipdPatientDepartmentId').val());
  }, 500);
});
listenClick('.edit-timeline-btn', function () {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var ipdTimelineId = $(this).data('timeline-id');
  renderIpdTimelineData(ipdTimelineId);
});
function renderIpdTimelineData(id) {
  $.ajax({
    url: $('#showIpdTimelinesUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        if (result.data.ipd_timeline_document_url != '') {
          var ext = result.data.ipd_timeline_document_url.split('.').pop().toLowerCase();
          if (ext == 'pdf') {
            $('#editPreviewIpdTimelineImage').css('background-image', 'url("' + $('.pdfDocumentImageUrl').val() + '")');
          } else if (ext == 'docx' || ext == 'doc') {
            $('#editPreviewIpdTimelineImage').css('background-image', 'url("' + $('.docxDocumentImageUrl').val() + '")');
          } else {
            $('#editPreviewIpdTimelineImage').css('background-image', 'url("' + result.data.ipd_timeline_document_url + '")');
          }
          $('#ipdTimeDocumentUrl').show();
          $('.btn-view').show();
        } else {
          $('#ipdTimeDocumentUrl').hide();
          $('.btn-view').hide();
          $('#editPreviewIpdTimelineImage').css('background-image', 'url("' + $('#showDefaultDocumentImageUrl').val() + '")');
        }
        $('#ipdTimelineId').val(result.data.id);
        $('#editIpdTimelineTitle').val(result.data.title);
        document.querySelector('#editIpdTimelineDate')._flatpickr.setDate(moment(result.data.date).format());
        $('#editIpdTimelineDescription').val(result.data.description);
        $('#ipdTimeDocumentUrl').attr('href', result.data.ipd_timeline_document_url);
        result.data.visible_to_person == 1 ? $('#editIpdTimelineVisibleToPerson').prop('checked', true) : $('#editIpdTimelineVisibleToPerson').prop('checked', false);
        $('#editIpdTimelineModal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
;
listenSubmit('#editIpdTimelineForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnIpdTimelineEdit');
  loadingButton.button('loading');
  var id = $('#ipdTimelineId').val();
  var url = $('#showIpdTimelinesUrl').val() + '/' + id;
  var data = {
    'formSelector': $(this),
    'url': url,
    'type': 'POST',
    'tableSelector': '#tbl'
  };
  editRecord(data, loadingButton, '#editIpdTimelineModal');
  // location.reload();
  setTimeout(function () {
    getIpdTimelines($('#ipdPatientDepartmentId').val());
  }, 500);
});
listenClick('.delete-timeline-btn', function () {
  var id = $(this).data('timeline-id');
  swal({
    title: $('.deleteVariable').val(),
    text: $('.confirmVariable').val() + $('#ipdTimeline').val() + '?',
    type: 'warning',
    icon: 'warning',
    showCancelButton: true,
    closeOnConfirm: false,
    confirmButtonColor: '#50cd89',
    showLoaderOnConfirm: true,
    buttons: {
      confirm: $('.yesVariable').val() + $('.deleteVariable').val(),
      cancel: $('.noVariable').val() + $('.cancelVariable').val()
    }
  }).then(function (result) {
    if (result) {
      $.ajax({
        url: $('#showIpdTimelinesUrl').val() + '/' + id,
        type: 'DELETE',
        dataType: 'json',
        success: function success(obj) {
          if (obj.success) {
            setTimeout(function () {
              getIpdTimelines($('#ipdPatientDepartmentId').val());
            }, 500);
          }
          swal({
            title: $('.deletedVariable').val(),
            text: $('#ipdTimeline').val() + $('.hasBeenDeletedVariable').val(),
            icon: 'success',
            confirmButtonColor: '#50cd89',
            timer: 2000
          });
          livewire.emit('refresh');
        }
      });
    }
  });
});
listenHiddenBsModal('#addIpdTimelineModal', function () {
  resetModalForm('#addIpdTimelineNewForm', '#ipdTimelineErrorsBox');
  $('#previewIpdTimelineImage').attr('src', $('#showDefaultDocumentImageUrl').val());
  $('#previewIpdTimelineImage').css('background-image', 'url("' + $('#showDefaultDocumentImageUrl').val() + '")');
});
listenHiddenBsModal('#editIpdTimelineModal', function () {
  resetModalForm('#editIpdTimelineForm', '#editIpdTimelineErrorsBox');
});

// listenChange('#ipdTimelineDocumentImage', function () {
//     let extension = isValidTimelineIpdDocument($(this), '#ipdTimelineErrorsBox');
//     if (!isEmpty(extension) && extension != false) {
//         $('#ipdTimelineErrorsBox').html('').hide();
//         displayDocument(this, '#previewIpdTimelineImage', extension);
//     }
// });

// listenChange('#editIpdTimelineDocumentImage', function () {
//     let extension = isValidTimelineIpdDocument($(this),
//         '#editIpdTimelineErrorsBox');
//     if (!isEmpty(extension) && extension != false) {
//         $('#editIpdTimelineErrorsBox').html('').hide();
//         displayDocument(this, '#editPreviewIpdTimelineImage', extension);
//     }
// });

// function isValidTimelineIpdDocument(
//     inputSelector, validationMessageSelector) {
//     let ext = $(inputSelector).val().split('.').pop().toLowerCase();
//     if ($.inArray(ext, ['png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx']) == -1) {
//         $(inputSelector).val('');
//         $(validationMessageSelector).html(
//             'The document must be a file of type: jpeg, jpg, png, pdf, doc, docx.').show();
//         return false;
//     }
//     return ext;
// }

function getIpdTimelines(ipdPatientDepartmentId) {
  $.ajax({
    url: $('#showIpdTimelinesUrl').val(),
    type: 'get',
    data: {
      id: ipdPatientDepartmentId
    },
    success: function success(data) {
      $('#ipdTimelines').html(data);
    }
  });
}
listenClick('.removeIpdTimeline', function () {
  defaultImagePreview('#previewIpdTimelineImage');
});
listenClick('.removeIpdTimelineEdit', function () {
  defaultImagePreview('#editPreviewIpdTimelineImage');
});

/***/ }),

/***/ "./resources/assets/js/issued_items/create.js":
/*!****************************************************!*\
  !*** ./resources/assets/js/issued_items/create.js ***!
  \****************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadIssuedItems);
function loadIssuedItems() {
  $('#issueItemCategory, #issueUserType').select2({
    width: '100%'
  });
  $('#issueTo').select2({
    placeholder: 'Select User',
    width: '100%'
  });
  $('#issueItems').select2({
    placeholder: 'Select Item',
    width: '100%'
  });
  var returnDate = $('#issueReturnDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: false,
    sideBySide: true,
    locale: $('.userCurrentLanguage').val()
  });
  $('#issueDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: true,
    sideBySide: true,
    locale: $('.userCurrentLanguage').val(),
    onChange: function onChange(selectedDates, dateStr, instance) {
      var minDate = moment($('#issueDate').val()).add(1, 'days').format();
      returnDate.set('minDate', minDate);
    }
  });
  $('#issueDate').on('dp.change', function (e) {
    var minDate = moment($('#issueDate').val()).add(1, 'days');
    $('#issueReturnDate').data('DateTimePicker').minDate(minDate);
  });
  setTimeout(function () {
    $('#issueItemCategory, #issueUserType').trigger('change');
  }, 300);
}
;
listenChange('#issueItemCategory', function () {
  if ($(this).val() !== '') {
    $.ajax({
      url: $('#issuedItemsUrl').val(),
      type: 'get',
      dataType: 'json',
      data: {
        id: $(this).val()
      },
      success: function success(data) {
        if (data.data.length !== 0) {
          $('#issueItems').empty();
          $('#issueItems').removeAttr('disabled');
          $.each(data.data, function (i, v) {
            $('#issueItems').append($('<option></option>').attr('value', i).text(v));
          });
          $('#issueItems').trigger('change');
        } else {
          $('#issueItems').prop('disabled', true);
          $('#itemQuantity').prop('disabled', true);
          $('#itemQuantity').val('');
          $('#showAvailableQuantity').text('0');
          $('#itemAvailableQuantity').val(0);
        }
      }
    });
  }
  $('#issueItems').empty();
  $('#issueItems').append('<option>Select Items</option>');
  $('#issueItems').prop('disabled', true);
});
listenChange('#issueUserType', function () {
  if ($(this).val() !== '') {
    $.ajax({
      url: $('#itemIssuedUsersUrl').val(),
      type: 'get',
      dataType: 'json',
      data: {
        id: $(this).val()
      },
      success: function success(data) {
        if (data.data.length !== 0) {
          $('#issueTo').empty();
          $('#issueTo').removeAttr('disabled');
          $.each(data.data, function (i, v) {
            $('#issueTo').append($('<option></option>').attr('value', i).text(v));
          });
        } else $('#issueTo').prop('disabled', true);
      }
    });
  }
  $('#issueTo').empty();
  $('#issueTo').append('<option>Select User</option>');
  $('#issueTo').prop('disabled', true);
});
listenChange('#issueItems', function () {
  $.ajax({
    url: $('#issuedItemAvailableQtyUrl').val(),
    type: 'get',
    dataType: 'json',
    data: {
      id: $(this).val()
    },
    success: function success(data) {
      $('#itemAvailableQuantity').val(data);
      $('#showAvailableQuantity').text(data);
      $('#itemQuantity').attr('max', data);
      $('#itemQuantity').attr('disabled', false);
    }
  });
});
listenChange('#itemQuantity', function () {
  var availableQuantity = parseInt($('#itemAvailableQuantity').val());
  var quantity = parseInt($(this).val());
  if (quantity <= availableQuantity) {
    $('#issuedItemSave').prop('disabled', false);
  } else if (quantity === 0) showIssueItemError('Quantity cannot be zero.');else showIssueItemError('Quantity must be less than Available quantity.');
});
function showIssueItemError(message) {
  toastr.error(message);
  $('#issuedItemSave').prop('disabled', true);
}
;
listenSubmit('#createIssuedItemForm, #editIssuedItemForm', function () {
  $('#issuedItemSave').attr('disabled', true);
});

/***/ }),

/***/ "./resources/assets/js/issued_items/issued_items.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/issued_items/issued_items.js ***!
  \**********************************************************/
/***/ (() => {

$('#filter_status').select2();
listenClick('#issuedItemResetFilter', function () {
  $('#issuedItemHead').val(2).trigger('change');
});
listenClick('.deleteIssuedItemBtn', function (event) {
  var issuedItemId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexIssuedItemUrl').val() + '/' + issuedItemId, '', $('#issuedItem').val());
});
listenClick('.changes-status-btn', function (event) {
  var issuedItemId = $(this).attr('data-id');
  var issuedItemStatus = $(this).attr('status');
  Lang.setLocale($('.userCurrentLanguage').val());
  if (!issuedItemStatus) {
    swal({
      title: Lang.get('messages.appointment.change_status') + '!',
      text: Lang.get('messages.issued_item.are_you_sure_want_to_return_this_item') + '?',
      type: 'warning',
      icon: 'warning',
      showCancelButton: true,
      closeOnConfirm: false,
      confirmButtonColor: '#50cd89',
      showLoaderOnConfirm: true,
      buttons: {
        confirm: Lang.get('messages.common.yes'),
        cancel: Lang.get('messages.common.no')
      }
    }).then(function (result) {
      if (result) {
        $.ajax({
          url: $('#indexReturnIssuedItemUrl').val(),
          type: 'get',
          dataType: 'json',
          data: {
            id: issuedItemId
          },
          success: function success(data) {
            swal({
              title: Lang.get('messages.issued_item.item_returned'),
              icon: 'success',
              confirmButtonColor: '#50cd89',
              timer: 2000
            });
            livewire.emit('refresh');
          }
        });
      }
    });
  }
});
listenChange('#issuedItemHead', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
  hideDropdownManually($('#issuedItemFilter'), $('#issuedItemFilter'));
});

/***/ }),

/***/ "./resources/assets/js/item_categories/item_categories.js":
/*!****************************************************************!*\
  !*** ./resources/assets/js/item_categories/item_categories.js ***!
  \****************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadItemCategoryDate);
function loadItemCategoryDate() {
  listenClick('.editItemCategoryBtn', function (event) {
    if ($('.ajaxCallIsRunning').val()) {
      return;
    }
    ajaxCallInProgress();
    var itemCategoryId = $(event.currentTarget).attr('data-id');
    renderItemCategoryData(itemCategoryId);
  });
  listenClick('.deleteItemCategoryBtn', function (event) {
    var itemCategoryId = $(event.currentTarget).attr('data-id');
    deleteItem($('#indexItemCategoriesUrl').val() + '/' + itemCategoryId, '', $('#localItemCategory').val());
  });
  function renderItemCategoryData(id) {
    $.ajax({
      url: $('#indexItemCategoriesUrl').val() + '/' + id + '/edit',
      type: 'GET',
      success: function success(result) {
        if (result.success) {
          var itemCategory = result.data;
          $('#itemCategoryId').val(itemCategory.id);
          $('#editItemCategoryName').val(itemCategory.name);
          $('#edit_item_categories_modal').modal('show');
          ajaxCallCompleted();
        }
      },
      error: function error(result) {
        manageAjaxErrors(result);
      }
    });
  }
  listenHiddenBsModal('#add_item_categories_modal', function () {
    resetModalForm('#addItemCategoryForm', '#itemCatErrorsBox');
  });
  listenHiddenBsModal('#edit_item_categories_modal', function () {
    resetModalForm('#editItemCatForm', '#editItemCatErrorsBox');
  });
}
listenSubmit('#addItemCategoryForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#itemCategorySave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#indexItemCategoryCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_item_categories_modal').modal('hide');
        Livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#itemCatErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenSubmit('#editItemCatForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editItemCategorySave');
  loadingButton.button('loading');
  var id = $('#itemCategoryId').val();
  $.ajax({
    url: $('#indexItemCategoriesUrl').val() + '/' + id,
    type: 'put',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_item_categories_modal').modal('hide');
        Livewire.emit('refresh');
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});

/***/ }),

/***/ "./resources/assets/js/item_stocks/create-edit.js":
/*!********************************************************!*\
  !*** ./resources/assets/js/item_stocks/create-edit.js ***!
  \********************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadItemStocks);
function loadItemStocks() {
  if (!$('#stockItemCategory').length && !$('#editStockItemCategory').length) {
    return;
  }
  $('#stockItemCategory, #editStockItemCategory').select2({
    width: '100%'
  });
  $('#stockItems, #editStockItems').select2({
    width: '100%',
    placeholder: 'Select Item'
  });
  if ($('.isEdit').val()) {
    $('.price-input').trigger('input');
    setTimeout(function () {
      $('#stockItemCategory, #editStockItemCategory').trigger('change');
    }, 300);
  }
}
listenChange('.stockCategory', function () {
  if ($(this).val() !== '') {
    $.ajax({
      url: $('.itemsUrl').val(),
      type: 'get',
      dataType: 'json',
      data: {
        id: $(this).val()
      },
      success: function success(data) {
        if (data.data.length !== 0) {
          $('.stockItems').empty();
          $('.stockItems').removeAttr('disabled');
          $.each(data.data, function (i, v) {
            $('.stockItems').append($('<option></option>').attr('value', i).text(v));
          });
          if ($('.isEdit').val()) {
            $('.stockItems').val($('#editStockItemId').val()).trigger('change.select2');
            isEdit = false;
          }
        } else $('.stockItems').prop('disabled', true);
      }
    });
  }
  $('.stockItems').empty();
  $('.stockItems').prop('disabled', true);
});

// listenChange('.stockAttachment', function () {
//     let extension = isValidItemStockDocument($(this));
//     if (!isEmpty(extension) && extension != false) {
//         displayDocument(this, '.previewImage', extension);
//     }
// });

// function isValidItemStockDocument(inputSelector) {
//     let ext = $(inputSelector).val().split('.').pop().toLowerCase();
//     if ($.inArray(ext, ['png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx']) == -1) {
//         $(inputSelector).val('');
//         UnprocessableInputError('result');
//         return false;
//     }
//     return ext;
// }

listenClick('.removeStockImage', function () {
  defaultImagePreview('.previewImage');
});

/***/ }),

/***/ "./resources/assets/js/item_stocks/item_stocks.js":
/*!********************************************************!*\
  !*** ./resources/assets/js/item_stocks/item_stocks.js ***!
  \********************************************************/
/***/ (() => {

listenClick('.deleteStockBtn', function (event) {
  var itemStockId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexItemStockUrl').val() + '/' + itemStockId, '', $('#itemStock').val());
});

/***/ }),

/***/ "./resources/assets/js/items/create-edit.js":
/*!**************************************************!*\
  !*** ./resources/assets/js/items/create-edit.js ***!
  \**************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadItemCategory);
function loadItemCategory() {
  if (!$('#itemCategory').length && !$('#editItemCategory').length) {
    return;
  }
  $('#itemCategory').select2({
    width: '100%'
  });
  $('#editItemCategory').select2({
    width: '100%'
  });
}

/***/ }),

/***/ "./resources/assets/js/items/items.js":
/*!********************************************!*\
  !*** ./resources/assets/js/items/items.js ***!
  \********************************************/
/***/ (() => {

listenClick('.deleteItemsBtn', function (event) {
  var itemId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexItemUrl').val() + '/' + itemId, '', $('#Items').val());
});

/***/ }),

/***/ "./resources/assets/js/lab_technicians/create-edit.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/lab_technicians/create-edit.js ***!
  \************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadLabTechnicianData);
function loadLabTechnicianData() {
  if (!$('#createLabTechnicianForm').length && !$('#editLabTechnicianForm').length) {
    return;
  }
  $('#technicianBloodGroup').select2({
    width: '100%'
  });
  $('#editTechnicianBloodGroup').select2({
    width: '100%'
  });
  $('.departmentId').select2({
    width: '100%'
  });
  var birthDate = $('.technicianBirthDate').flatpickr({
    dateFormat: 'Y-m-d',
    useCurrent: false,
    locale: $('.userCurrentLanguage').val()
  });
  birthDate.set('maxDate', new Date());
}
listenSubmit('#createLabTechnicianForm, #editLabTechnicianForm', function () {
  if ($('.error-msg').text() !== '') {
    $('.phoneNumber').focus();
    return false;
  }
});
$('#createLabTechnicianForm, #editLabTechnicianForm').find('input:text:visible:first').focus();
listenChange('.technicianProfileImage', function () {
  var extension = isValidImage($(this), '#technicianErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#technicianErrorsBox').html('').hide();
    displayDocument(this, '#technicianErrorsBox', extension);
  } else {
    $(this).val('');
    $('#technicianErrorsBox').removeClass('d-none hide');
    $('#technicianErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=technicianErrorsBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
listenChange('.editTechnicianProfileImage', function () {
  var extension = isValidImage($(this), '#editTechnicianErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#editTechnicianErrorsBox').html('').hide();
    displayDocument(this, '#editTechnicianErrorsBox', extension);
  } else {
    $(this).val('');
    $('#editTechnicianErrorsBox').removeClass('d-none hide');
    $('#editTechnicianErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=editTechnicianErrorsBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
function isValidImage(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['jpg', 'png', 'jpeg']) == -1) {
    return false;
  }
  $(validationMessageSelector).hide();
  return true;
}
;

/***/ }),

/***/ "./resources/assets/js/lab_technicians/lab_technicians.js":
/*!****************************************************************!*\
  !*** ./resources/assets/js/lab_technicians/lab_technicians.js ***!
  \****************************************************************/
/***/ (() => {

"use strict";


listen('click', '.deleteTechnicianBtn', function (event) {
  var labTechnicianId = $(event.currentTarget).attr('data-id');
  deleteItem($('#labTechnicianURL').val() + '/' + labTechnicianId, '', $('#labTechnician').val());
});
listenChange('.technicianStatus', function (event) {
  var labTechnicianId = $(event.currentTarget).attr('data-id');
  updateLabTechnicianStatus(labTechnicianId);
});
listenChange('#technicianFilterStatus', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listen('click', '#technicianResetFilter', function () {
  $('#technicianFilterStatus').val(0).trigger('change');
  hideDropdownManually($('#labTechnicianFilterBtn'), $('.dropdown-menu'));
});
window.updateLabTechnicianStatus = function (id) {
  $.ajax({
    url: $('#labTechnicianURL').val() + '/' + id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        livewire.emit('refresh');
      }
    }
  });
};

/***/ }),

/***/ "./resources/assets/js/lab_technicians/lab_technicians_data_listing.js":
/*!*****************************************************************************!*\
  !*** ./resources/assets/js/lab_technicians/lab_technicians_data_listing.js ***!
  \*****************************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/live_consultations/live_consultations.js":
/*!**********************************************************************!*\
  !*** ./resources/assets/js/live_consultations/live_consultations.js ***!
  \**********************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadConsultationData);
function loadConsultationData() {
  if (!$('#indexLiveConsultationUrl').length) {
    return;
  }
  listenShownBsModal('#add_consulatation_modal', function () {
    $('.doctor-name,.patient-name,.consultation-type,.consultation-type-number,.change-status').select2({
      width: '100%',
      dropdownParent: '#add_consulatation_modal'
    });
  });
  listenShownBsModal('#edit_consulatation_modal', function () {
    $('.edit-doctor-name,.edit-patient-name,.edit-consultation-type,.edit-consultation-type-number,.edit-change-status').select2({
      width: '100%',
      dropdownParent: '#edit_consulatation_modal'
    });
  });
  $('#liveConsultationFilterStatusArr').select2({
    width: '100%'
  });
  $('.consultation-date').flatpickr({
    enableTime: true,
    defaultDate: new Date(),
    minDate: new Date(),
    dateFormat: 'Y-m-d H:i',
    locale: $('.userCurrentLanguage').val()
  });
  $('.edit-consultation-date').flatpickr({
    enableTime: true,
    minDate: new Date(),
    dateFormat: 'Y-m-d H:i',
    locale: $('.userCurrentLanguage').val()
  });
  $('.change-consultation-status').select2({
    width: '100%'
  });
}
listenHiddenBsModal('#add_consulatation_modal', function () {
  resetModalForm('#addConsultationForm', '#consultationErrorsBox');
  $('.consultation-type, .consultation-type-number').val('').trigger('change');
  $('select').each(function (index, element) {
    var drpSelector = '#' + $(this).attr('id');
    $(drpSelector).val('');
    $(drpSelector).prop('selectedIndex', 0).trigger('change');
  });
  $('#consultationTypeNumber').val(null).trigger('change');
  $('#consultationTypeNumber').append($('<option selected="selected" value="">Select Type Number</option>'));
});
listenHiddenBsModal('#edit_consulatation_modal', function () {
  resetModalForm('#editConsultationForm', '#editConsultationErrorsBox');
});
listenChange('.patient-name, .edit-patient-name', function () {
  if ($(this).val() !== '') {
    consultationPatientId = $(this).val();
    $('.consultation-type-number, .edit-consultation-type-number').empty();
    $('.consultation-type-number, .edit-consultation-type-number').append('<option selected="selected" value="">Select Type Number</option>');
    $('.consultation-type, .edit-consultation-type').removeAttr('disabled');
  }
});
var consultationPatientId = null;
listenChange('.consultation-type', function () {
  $.ajax({
    url: $('#indexLiveConsultationTypeNumber').val(),
    type: 'get',
    dataType: 'json',
    data: {
      consultation_type: $(this).val(),
      patient_id: consultationPatientId
    },
    success: function success(data) {
      if (data.data.length !== 0) {
        $('.consultation-type-number').empty();
        $('.consultation-type-number').removeAttr('disabled');
        $('.consultation-type-number').append('<option selected="selected" value="">Select Type Number</option>');
        $.each(data.data, function (i, v) {
          $('.consultation-type-number').append($('<option></option>').attr('value', i).text(v));
        });
        $('.consultation-type-number').select2({
          width: '100%',
          dropdownParent: $('#add_consulatation_modal')
        });
        $('.edit-consultation-type-number').select2({
          width: '100%',
          dropdownParent: $('#edit_consulatation_modal')
        });
      } else {
        $('.consultation-type-number').empty();
        $('.consultation-type-number').append('<option selected="selected" value="">Select Type Number</option>');
        $('.consultation-type-number').prop('disabled', true);
      }
    }
  });
});
listenChange('.edit-consultation-type', function () {
  $.ajax({
    url: $('#indexLiveConsultationTypeNumber').val(),
    type: 'get',
    dataType: 'json',
    data: {
      consultation_type: $(this).val(),
      patient_id: consultationPatientId
    },
    success: function success(data) {
      if (data.data.length !== 0) {
        $('.edit-consultation-type-number').empty();
        $('.edit-consultation-type-number').removeAttr('disabled');
        $('.edit-consultation-type-number').append('<option selected="selected" value="">Select Type Number</option>');
        $.each(data.data, function (i, v) {
          $('.edit-consultation-type-number').append($('<option></option>').attr('value', i).text(v));
        });
        $('.consultation-type-number').select2({
          width: '100%',
          dropdownParent: $('#add_consulatation_modal')
        });
        $('.edit-consultation-type-number').select2({
          width: '100%',
          dropdownParent: $('#edit_consulatation_modal')
        });
      } else {
        $('.edit-consultation-type-number').empty();
        $('.edit-consultation-type-number').append('<option selected="selected" value="">Select Type Number</option>');
        $('.edit-consultation-type-number').prop('disabled', true);
      }
    }
  });
});
function changeConsultationTypeNumber(selector, id, consultationPatientId) {
  if ($(selector).val() !== '') {
    $.ajax({
      url: $('#indexLiveConsultationTypeNumber').val(),
      type: 'get',
      dataType: 'json',
      data: {
        consultation_type: id,
        patient_id: consultationPatientId
      },
      success: function success(data) {
        console.log(data.data);
        if (data.data.length !== 0) {
          $(selector).empty();
          $(selector).removeAttr('disabled');
          $(selector).append('<option selected="selected" value="">Select Type Number</option>');
          $.each(data.data, function (i, v) {
            $(selector).append($('<option></option>').attr('value', i).text(v));
          });
          $('.consultation-type-number').select2({
            width: '100%',
            dropdownParent: $('#add_consulatation_modal')
          });
          $('.edit-consultation-type-number').select2({
            width: '100%',
            dropdownParent: $('#edit_consulatation_modal')
          });
        } else {
          $(selector).empty();
          $(selector).append('<option selected="selected" value="">Select Type Number</option>');
          $(selector).prop('disabled', true);
        }
      }
    });
  }
  $(selector).empty();
  $(selector).prop('disabled', true);
  $(selector).append('<option>Select Type Number</option>');
}
listenSubmit('#addConsultationForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#consultationSave');
  loadingButton.button('loading');
  $('#consultationSave').attr('disabled', true);
  $.ajax({
    url: $('#indexLiveConsultationCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_consulatation_modal').modal('hide');
        $('#liveConsultationTable').DataTable().ajax.reload(null, false);
        setTimeout(function () {
          loadingButton.button('reset');
        }, 2500);
        $('#consultationSave').attr('disabled', false);
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#consultationErrorsBox', result);
      setTimeout(function () {
        loadingButton.button('reset');
      }, 2000);
      $('#consultationSave').attr('disabled', false);
    }
  });
});
listenSubmit('#editConsultationForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editConsultationSave');
  loadingButton.button('loading');
  $('#editConsultationSave').attr('disabled', true);
  var id = $('#liveConsultationId').val();
  $.ajax({
    url: $('#indexLiveConsultationUrl').val() + '/' + id,
    type: 'post',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_consulatation_modal').modal('hide');
        $('#liveConsultationTable').DataTable().ajax.reload(null, false);
        $('#editConsultationSave').attr('disabled', false);
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
      $('#editConsultationSave').attr('disabled', false);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
function renderConsultationData(id) {
  $.ajax({
    url: $('#indexLiveConsultationUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var liveConsultation = result.data;
        $('#liveConsultationId').val(liveConsultation.id);
        $('.edit-consultation-title').val(liveConsultation.consultation_title);
        // document.querySelector('.edit-consultation-date').
        //     _flatpickr.
        //     setDate(moment(liveConsultation.consultation_date).format('YYYY-MM-DD h:mm A'));
        $('.edit-consultation-date').val(moment(liveConsultation.consultation_date).format('YYYY-MM-DD h:mm A'));
        $('.edit-consultation-duration-minutes').val(liveConsultation.consultation_duration_minutes);
        $('.edit-patient-name').val(liveConsultation.patient_id).trigger('change');
        $('.edit-doctor-name').val(liveConsultation.doctor_id).trigger('change');
        $('.host-enable,.host-disabled').prop('checked', false);
        if (liveConsultation.host_video == 1) {
          $("input[name=\"host_video\"][value=".concat(liveConsultation.host_video, "]")).prop('checked', true);
        } else {
          $("input[name=\"host_video\"][value=".concat(liveConsultation.host_video, "]")).prop('checked', true);
        }
        $('.client-enable,.client-disabled').prop('checked', false);
        if (liveConsultation.participant_video == 1) {
          $("input[name=\"participant_video\"][value=".concat(liveConsultation.participant_video, "]")).prop('checked', true);
        } else {
          $("input[name=\"participant_video\"][value=".concat(liveConsultation.participant_video, "]")).prop('checked', true);
        }
        $('.edit-consultation-type').val(liveConsultation.type).trigger('change');
        setTimeout(function () {
          $('.edit-consultation-type-number').val(liveConsultation.type_number).trigger('change');
        }, 1000);
        $('.edit-description').val(liveConsultation.description);
        $('#edit_consulatation_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenClick('.editConsultationBtn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var liveConsultationId = $(event.currentTarget).attr('data-id');
  renderConsultationData(liveConsultationId);
});
listenClick('.startConsultationBtn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var liveConsultationId = $(event.currentTarget).attr('data-id');
  startRenderConsultationData(liveConsultationId);
});
function startRenderConsultationData(id) {
  $.ajax({
    url: $('#indexLiveConsultationUrl').val() + '/' + id + '/start',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var liveConsultation = result.data;
        $('#startConsultationId').val(liveConsultation.liveConsultation.id);
        $('.start-modal-title').text(liveConsultation.liveConsultation.consultation_title);
        $('.host-name').text(liveConsultation.liveConsultation.user.full_name);
        // $('.date').text(liveConsultation.liveConsultation.consultation_date);
        $('.date').text(moment(liveConsultation.liveConsultation.consultation_date).format('Do MMM, Y') + ' ' + moment(liveConsultation.liveConsultation.consultation_date).format('LT'));
        $('.minutes').text(liveConsultation.liveConsultation.consultation_duration_minutes);
        $('#startModal').find('.status').append(liveConsultation.zoomLiveData.data.status === 'started' ? $('.status').text('Started') : $('.status').text('Awaited'));
        $('.start').attr('href', $('#indexConsultationPatientRole').val() ? liveConsultation.liveConsultation.meta.join_url : liveConsultation.zoomLiveData.data.status === 'started' ? $('.start').addClass('disabled') : liveConsultation.liveConsultation.meta.start_url);
        $('#startModal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenClick('.deleteConsultationBtn', function (event) {
  var liveConsultationId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexLiveConsultationUrl').val() + '/' + liveConsultationId, '', $('#LiveConsultation').val());
});
listenChange('.change-consultation-status', function () {
  var statusId = $(this).val();
  $.ajax({
    url: $('#indexLiveConsultationUrl').val() + '/change-status',
    type: 'GET',
    data: {
      statusId: statusId,
      id: $(this).attr('data-id')
    },
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        livewire.emit('refresh');
        // $('#liveConsultationTable').DataTable().ajax.reload(null, false);
      }
    },

    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
});
listenClick('.showConsultationData', function (event) {
  var consultationId = $(event.currentTarget).attr('data-id');
  $.ajax({
    url: $('#indexLiveConsultationUrl').val() + '/' + consultationId,
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var liveConsultation = result.data.liveConsultation;
        var showModal = $('#show_live_consultations_modal');
        $('#startLiveConsultationId').val(liveConsultation.id);
        $('#showConsultationTitle').text(liveConsultation.consultation_title);
        $('#showConsultationDate').text(moment(liveConsultation.consultation_date).format('Do MMM, Y') + ' ' + moment(liveConsultation.consultation_date).format('LT'));
        $('#showConsultationDurationMinutes').text(liveConsultation.consultation_duration_minutes);
        $('#showConsultationPatient').text(liveConsultation.patient.patient_user.full_name);
        $('#showConsultationDoctor').text(liveConsultation.doctor.doctor_user.full_name);
        liveConsultation.type == 0 ? showModal.find('#showConsultationType').append('OPD') : showModal.find('#showConsultationType').append('IPD');
        liveConsultation.type == 0 ? showModal.find('#showConsultationTypeNumber').append(liveConsultation.opd_patient.opd_number) : showModal.find('#showConsultationTypeNumber').append(liveConsultation.ipd_patient.ipd_number);
        liveConsultation.host_video === 0 ? $('#showConsultationHostVideo').text('Disable') : $('#showConsultationHostVideo').text('Enable');
        liveConsultation.participant_video === 0 ? $('#showConsultationParticipantVideo').text('Disable') : $('#showConsultationParticipantVideo').text('Enable');
        isEmpty(liveConsultation.description) ? $('#showConsultationDescription').text('N/A') : $('#showConsultationDescription').text(liveConsultation.description);
        showModal.modal('show');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
});
listenHiddenBsModal('#show_live_consultations_modal', function () {
  $(this).find('#showConsultationTitle, #showConsultationDate, #showConsultationDurationMinutes, #showConsultationPatient, #showConsultationDoctor, #showConsultationType, #showConsultationTypeNumber, #showConsultationHostVideo, #showConsultationParticipantVideo, #showConsultationDescription').empty();
});
listenClick('.add-credential', function () {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var userId = $('#zoomUserId').val();
  renderUserZoomData(userId);
});
function renderUserZoomData(id) {
  $.ajax({
    url: 'user-zoom-credential/' + id + '/fetch',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var userZoomData = result.data;
        if (!isEmpty(userZoomData)) {
          $('#zoomApiKey').val(userZoomData.zoom_api_key);
          $('#zoomApiSecret').val(userZoomData.zoom_api_secret);
        }
        $('#addCredential').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#addZoomForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnZoomSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#indexZoomCredentialCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#addCredential').modal('hide');
        setTimeout(function () {
          loadingButton.button('reset');
        }, 2500);
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#credentialValidationErrorsBox', result);
      setTimeout(function () {
        loadingButton.button('reset');
      }, 2000);
    }
  });
});
listenChange('#liveConsultationFilterStatusArr', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listenClick('#consultationResetFilter', function () {
  $('#liveConsultationFilterStatusArr').val(0).trigger('change');
  hideDropdownManually($('#liveConsultationFilterBtn'), $('.dropdown-menu'));
});
listenChange('.consultation-type', function () {
  $('.consultation-type-number').val('').trigger('change');
});
listenChange('.patient-name', function () {
  $('.consultation-type').val('').trigger('change');
  $('.consultation-type-number').trigger('change');
});

/***/ }),

/***/ "./resources/assets/js/live_consultations/live_meetings.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/js/live_consultations/live_meetings.js ***!
  \*****************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadMeetingData);
function loadMeetingData() {
  if (!$('#indexLiveMeetingUrl').length) {
    return;
  }
  $('.change-meeting-status').select2({
    width: '100%'
  });
  $('#meetingUserId, #statusArr').select2({
    width: '100%'
  });
  $('.editUserId').select2({
    width: '100%'
  });
  $('.consultation-date, .edit-consultation-date').flatpickr({
    enableTime: true,
    minDate: new Date(),
    dateFormat: 'Y-m-d H:i',
    locale: $('.userCurrentLanguage').val()
  });
}
listenSubmit('#addLiveMeetingForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#meetingSave');
  // loadingButton.button('loading');
  $('#meetingSave').attr('disabled', true);
  $.ajax({
    url: $('#indexLiveMeetingCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_live_meeting_modal').modal('hide');
        loadingButton.attr('disabled', false);
        livewire.emit('refresh');
        $('.change-meeting-status').select2({
          width: '100%'
        });
        setTimeout(function () {
          loadingButton.attr('disabled', false);
        }, 3000);
      }
    },
    error: function error(result) {
      printErrorMessage('#meetingErrorsBox', result);
      setTimeout(function () {
        loadingButton.attr('disabled', false);
      }, 2000);
    }
  });
});
listenHiddenBsModal('#add_live_meeting_modal', function () {
  resetModalForm('#addLiveMeetingForm', '#meetingErrorsBox');
  $('#meetingUserId').val($('.loggedInUserId').val()).trigger('change.select2');
});
listenChange('.change-meeting-status', function () {
  var statusId = $(this).val();
  $.ajax({
    url: $('#indexLiveMeetingUrl').val() + '/change-status',
    type: 'GET',
    data: {
      statusId: statusId,
      id: $(this).attr('data-id')
    },
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
});
listen('click', '.startMeetingBtn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var liveConsultationId = $(event.currentTarget).attr('data-id');
  renderStartMeetingData(liveConsultationId);
});
function renderStartMeetingData(id) {
  $.ajax({
    url: $('#indexLiveMeetingUrl').val() + '/' + id + '/start',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var liveConsultation = result.data;
        $('#startLiveConsultationId').val(liveConsultation.liveMeeting.id);
        $('.start-modal-title').text(liveConsultation.liveMeeting.consultation_title);
        $('.host-name').text(liveConsultation.liveMeeting.user.full_name);
        // $('.date').text(liveConsultation.liveMeeting.consultation_date);
        $('.date').text(moment(liveConsultation.liveMeeting.consultation_date).format('Do MMM, Y') + ' ' + moment(liveConsultation.liveMeeting.consultation_date).format('LT'));
        $('.minutes').text(liveConsultation.liveMeeting.consultation_duration_minutes);
        $('#startConsultationModal').find('.status').append(liveConsultation.zoomLiveData.data.status === 'started' ? $('.status').text('Started') : $('.status').text('Awaited'));
        !($('#indexMeetingAdminRole').val() || $('#indexMeetingDoctorRole').val()) ? $('.start').attr('href', liveConsultation.liveMeeting.meta.join_url) : liveConsultation.zoomLiveData.data.status === 'started' ? $('.start').addClass('disabled') : $('.start').attr('href', liveConsultation.liveMeeting.meta.start_url);
        $('#startConsultationModal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listen('click', '.showMeetingData', function (event) {
  var meetingId = $(event.currentTarget).attr('data-id');
  $.ajax({
    url: $('#indexLiveMeetingUrl').val() + '/' + meetingId,
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var liveMeeting = result.data;
        $('#showMeetingId').val(liveMeeting.id);
        $('#showMeetingTitle').text(liveMeeting.consultation_title);
        $('#showMeetingDate').text(moment(liveMeeting.consultation_date).format('Do MMM, Y') + ' ' + moment(liveMeeting.consultation_date).format('LT'));
        $('#showMeetingMinutes').text(liveMeeting.consultation_duration_minutes);
        liveMeeting.host_video == 0 ? $('#showMeetingHost').text('Disable') : $('#showMeetingHost').text('Enable');
        liveMeeting.participant_video == 0 ? $('#showMeetingParticipant').text('Disable') : $('#showMeetingParticipant').text('Enable');
        isEmpty(liveMeeting.description) ? $('#showMeetingDescription').text('N/A') : $('#showMeetingDescription').text(liveMeeting.description);
        $('#show_live_meetings_modal').modal('show');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
});
listen('click', '.editMeetingBtn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var liveMeetingId = $(event.currentTarget).attr('data-id');
  renderMeetingData(liveMeetingId);
});
function renderMeetingData(id) {
  $.ajax({
    url: $('#indexLiveMeetingUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var liveMeeting = result.data;
        $('#liveMeetingId').val(liveMeeting.id);
        $('.edit-consultation-title').val(liveMeeting.consultation_title);
        $('.edit-consultation-date').val(moment(liveMeeting.consultation_date).format('YYYY-MM-DD h:mm A'));
        $('.edit-consultation-duration-minutes').val(liveMeeting.consultation_duration_minutes);
        $('.editUserId').val(liveMeeting.meetingUsers).trigger('change.select2');
        $('.host-enable,.host-disabled').prop('checked', false);
        if (liveMeeting.host_video == 1) {
          $("input[name=\"host_video\"][value=".concat(liveMeeting.host_video, "]")).prop('checked', true);
        } else {
          $("input[name=\"host_video\"][value=".concat(liveMeeting.host_video, "]")).prop('checked', true);
        }
        $('.client-enable,.client-disabled').prop('checked', false);
        if (liveMeeting.participant_video == 1) {
          $("input[name=\"participant_video\"][value=".concat(liveMeeting.participant_video, "]")).prop('checked', true);
        } else {
          $("input[name=\"participant_video\"][value=".concat(liveMeeting.participant_video, "]")).prop('checked', true);
        }
        $('.edit-description').val(liveMeeting.description);
        $('#edit_live_meeting_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#editMeetingForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editMeetingSave');
  loadingButton.button('loading');
  loadingButton.attr('disabled', true);
  var id = $('#liveMeetingId').val();
  $.ajax({
    url: $('#indexLiveMeetingUrl').val() + '/' + id,
    type: 'post',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_live_meeting_modal').modal('hide');
        loadingButton.attr('disabled', false);
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      loadingButton.attr('disabled', false);
      manageAjaxErrors(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listen('click', '.deleteMeetingBtn', function (event) {
  var liveMeetingId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexLiveMeetingUrl').val() + '/' + liveMeetingId, '', $('#LiveMeeting').val());
});
listenHiddenBsModal('#show_live_meetings_modal', function () {
  $(this).find('#showMeetingTitle,#showMeetingDate, #showMeetingMinutes, #showMeetingHost, #showMeetingParticipant, #showMeetingDescription').empty();
});
listenChange('#liveMeetingFilterArrID', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listenClick('#liveMeetingResetFilter', function () {
  $('#liveMeetingFilterArrID').val(0).trigger('change');
  hideDropdownManually($('#liveMeetingFilterBtn'), $('.dropdown-menu'));
});

/***/ }),

/***/ "./resources/assets/js/mail/mail.js":
/*!******************************************!*\
  !*** ./resources/assets/js/mail/mail.js ***!
  \******************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadMailData);
function loadMailData() {
  if (!$('#mailEmailId').length) {
    return;
  }
  $('#mailEmailId').focus();
}
listenChange('#mailDocumentImage', function () {
  var extension = isValidMailDocument($(this), '#mailValidationErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#mailValidationErrorsBox').html('').hide();
    displayDocument(this, '#mailPreviewImage', extension);
  }
});
window.isValidMailDocument = function (inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx']) == -1) {
    $(inputSelector).val('');
    $(validationMessageSelector).html('The document must be a file of type: jpeg, jpg, png, pdf, doc, docx.').show();
    return false;
  }
  return ext;
};
listenClick('.removeMailImage', function () {
  defaultImagePreview('#mailPreviewImage');
});

/***/ }),

/***/ "./resources/assets/js/medicines/medicines.js":
/*!****************************************************!*\
  !*** ./resources/assets/js/medicines/medicines.js ***!
  \****************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadMedicineCreateData);
'use strict';
function loadMedicineCreateData() {
  listenClick('.showMedicineBtn', function (event) {
    event.preventDefault();
    var medicineId = $(event.currentTarget).attr('data-id');
    renderMedicineData(medicineId);
  });
  function renderMedicineData(id) {
    $.ajax({
      url: $('#medicinesShowModal').val() + '/' + id,
      type: 'GET',
      success: function success(result) {
        if (result.success) {
          $('#showMedicineName').text(result.data.name);
          $('#showMedicineBrand').text(result.data.brand_name);
          $('#showMedicineCategory').text(result.data.category_name);
          $('#showMedicineSaltComposition').text(result.data.salt_composition);
          $('#showMedicineSellingPrice').text(result.data.selling_price);
          $('#showMedicineBuyingPrice').text(result.data.buying_price);
          $('#showMedicineSideEffects').text(result.data.side_effects);
          moment.locale($('#medicineLanguage').val());
          var createDate = moment(result.data.created_at);
          $('#showMedicineCreatedOn').text(createDate.fromNow());
          $('#showMedicineUpdatedOn').text(moment(result.data.updated_at).fromNow());
          $('#showMedicineDescription').text(result.data.description);
          setValueOfEmptySpan();
          $('#showMedicine').appendTo('body').modal('show');
        }
      },
      error: function error(result) {
        displayErrorMessage(result.responseJSON.message);
      }
    });
  }
}
listenClick('.deleteMedicineBtn', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexMedicineUrl').val() + '/' + id, '', $('#Medicine').val());
});

/***/ }),

/***/ "./resources/assets/js/medicines/new.js":
/*!**********************************************!*\
  !*** ./resources/assets/js/medicines/new.js ***!
  \**********************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadMedicineData);
function loadMedicineData() {
  if (!$('#createMedicine').length && !$('#editMedicine').length) {
    return;
  }
  var qtyEle = $('#qty');
  qtyEle.blur(function () {
    if (qtyEle.val() < 0) {
      qtyEle.val(0);
    }
  });
  $('#medicineBrandId,#medicineCategoryId').select2({
    width: '100%'
  });
  $('#medicineNameId').focus();
}
listenSubmit('#createMedicine, #editMedicine', function () {
  $('#medicineSave').attr('disabled', true);
});

/***/ }),

/***/ "./resources/assets/js/notice_boards/create-details-edit.js":
/*!******************************************************************!*\
  !*** ./resources/assets/js/notice_boards/create-details-edit.js ***!
  \******************************************************************/
/***/ (() => {

"use strict";


listenClick('.editNoticeboardBtn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var noticeBoardId = $(event.currentTarget).attr('data-id');
  renderNoticeBoardDetailData(noticeBoardId);
});
window.renderNoticeBoardDetailData = function (id) {
  $.ajax({
    url: $('#showNoticeBoardUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#noticeBoardId').val(result.data.id);
        $('#editNoticeBoardTitle').val(result.data.title);
        $('#editNoticeBoardDescription').val(result.data.description);
        $('#edit_notice_boards_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
};
listenSubmit('#editNoticeBoardForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editNoticeBoardSave');
  loadingButton.button('loading');
  var id = $('#noticeBoardId').val();
  $.ajax({
    url: $('#showNoticeBoardUrl').val() + '/' + id,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_notice_boards_modal').modal('hide');
        setTimeout(function () {
          window.location.reload();
        }, 3000);
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});

/***/ }),

/***/ "./resources/assets/js/notice_boards/create-edit.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/notice_boards/create-edit.js ***!
  \**********************************************************/
/***/ (() => {

"use strict";


listenSubmit('#addNoticeBoardForm', function (event) {
  event.preventDefault();
  $('#noticeBoardSave').attr('disabled', true);
  $.ajax({
    url: $('#indexNoticeBoardCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_notice_boards_modal').modal('hide');
        livewire.emit('refresh');
        $('#noticeBoardSave').attr('disabled', false);
      }
    },
    error: function error(result) {
      printErrorMessage('#noticeBoardErrorsBox', result);
      $('#noticeBoardSave').attr('disabled', false);
    }
  });
});
listen('click', '.notice-edit-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var noticeBoardId = $(event.currentTarget).attr('data-id');
  renderNoticeBoardUpdateData(noticeBoardId);
});
listen('click', '.notice-view-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var noticeBoardId = event.currentTarget.dataset.id;
  $.ajax({
    url: $('#indexNoticeBoardUrl').val() + '/' + noticeBoardId,
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#showNoticeBoardTitle').html('');
        $('#showNoticeBoardDescription').html('');
        $('#showNoticeBoardTitle').append(result.data.title);
        $('#showNoticeBoardDescription').append(result.data.description);
        $('#show_notice_boards_modal').appendTo('body').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
});
function renderNoticeBoardUpdateData(id) {
  $.ajax({
    url: $('#indexNoticeBoardUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#noticeBoardId').val(result.data.id);
        $('#editNoticeBoardTitle').val(result.data.title);
        $('#editNoticeBoardDescription').val(result.data.description);
        $('#edit_notice_boards_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
;
listenSubmit('#editNoticeBoardsForm', function (event) {
  event.preventDefault();
  $('#noticeBoardSave').attr('disabled', true);
  var id = $('#noticeBoardId').val();
  $.ajax({
    url: $('#indexNoticeBoardUrl').val() + '/' + id,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_notice_boards_modal').modal('hide');
        livewire.emit('refresh');
        $('#noticeBoardSave').attr('disabled', false);
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
      $('#noticeBoardSave').attr('disabled', false);
    }
  });
});
listenHiddenBsModal('#add_notice_boards_modal', function () {
  resetModalForm('#addNoticeBoardForm', '#noticeBoardErrorsBox');
  $('#noticeBoardSave').attr('disabled', false);
});
listenHiddenBsModal('#edit_notice_boards_modal', function () {
  resetModalForm('#editNoticeBoardsForm', '#editNoticeBoardErrorsBox');
});

/***/ }),

/***/ "./resources/assets/js/notice_boards/notice_boards.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/notice_boards/notice_boards.js ***!
  \************************************************************/
/***/ (() => {

listen('click', '.notice-board-delete-btn', function (event) {
  var noticeBoardId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexNoticeBoardUrl').val() + '/' + noticeBoardId, '', $('#noticeBoard').val());
});

/***/ }),

/***/ "./resources/assets/js/nurses/create-edit.js":
/*!***************************************************!*\
  !*** ./resources/assets/js/nurses/create-edit.js ***!
  \***************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadNurseData);
function loadNurseData() {
  if (!$('#createNurseForm').length && !$('#editNurseForm').length) {
    return;
  }
  $('#nurseBloodGroup').select2({
    width: '100%'
  });
  $('#editNurseBloodGroup').select2({
    width: '100%'
  });
  $('.nurseBirthDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: true,
    sideBySide: true,
    maxDate: new Date(),
    locale: $('.userCurrentLanguage').val()
  });
  $('#departmentId').select2({
    width: '100%'
  });
  $('#createNurseForm, #editNurseForm').find('input:text:visible:first').focus();
}
listenSubmit('#createNurseForm, #editNurseForm', function () {
  if ($('.error-msg').text() !== '') {
    $('.phoneNumber').focus();
    return false;
  }
});
listenChange('.nurseProfileImage', function () {
  var extension = isValidOpdTimelineDocument($(this), '#nurseErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('.alert').html('').hide();
    displayDocument(this, '.nursePreviewImage', extension);
  } else {
    $(this).val('');
    $('#nurseErrorsBox').removeClass('d-none hide');
    $('#nurseErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=nurseErrorsBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
listenChange('.nurseProfileImage', function () {
  var extension = isValidOpdTimelineDocument($(this), '#editNurseErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('.alert').html('').hide();
    displayDocument(this, '.nursePreviewImage', extension);
  } else {
    $(this).val('');
    $('#editNurseErrorsBox').removeClass('d-none hide');
    $('#editNurseErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=editNurseErrorsBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
function isValidImage(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['jpg', 'png', 'jpeg']) == -1) {
    return false;
  }
  $(validationMessageSelector).hide();
  return true;
}
;

/***/ }),

/***/ "./resources/assets/js/nurses/nurses.js":
/*!**********************************************!*\
  !*** ./resources/assets/js/nurses/nurses.js ***!
  \**********************************************/
/***/ (() => {

listen('click', '.deleteNurseBtn', function (event) {
  var nurseId = $(event.currentTarget).attr('data-id');
  deleteItem($('#nurseURL').val() + '/' + nurseId, '', $('#Nurse').val());
});
listenChange('.nurseStatus', function (event) {
  var nurseId = $(event.currentTarget).attr('data-id');
  updateNurseStatus(nurseId);
});
listen('click', '#nurseResetFilter', function () {
  $('#nurse_filter_status').val(0).trigger('change');
  hideDropdownManually($('#nurseFilterBtn'), $('.dropdown-menu'));
});
listenChange('#nurse_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
window.updateNurseStatus = function (id) {
  $.ajax({
    url: $('#nurseURL').val() + '/' + +id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        livewire.emit('refresh');
      }
    }
  });
};

/***/ }),

/***/ "./resources/assets/js/nurses/nurses_data_listing.js":
/*!***********************************************************!*\
  !*** ./resources/assets/js/nurses/nurses_data_listing.js ***!
  \***********************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/opd_diagnosis/opd_diagnosis.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/opd_diagnosis/opd_diagnosis.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! moment */ "./node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_0__);

document.addEventListener('turbo:load', loadOpdDiagnosisData);
function loadOpdDiagnosisData() {
  if (!$('#opdDiagnosisReportDate').length && !$('#editOpdDiagnosisReportDate').length) {
    return;
  }
  $('#opdDiagnosisReportDate, #editOpdDiagnosisReportDate').flatpickr({
    enableTime: true,
    defaultDate: new Date(),
    dateFormat: "Y-m-d H:i",
    useCurrent: true,
    sideBySide: true,
    minDate: moment__WEBPACK_IMPORTED_MODULE_0___default()($('#showOpdAppointmentDate').val()).format('YYYY-MM-DD'),
    locale: $('.userCurrentLanguage').val(),
    widgetPositioning: {
      horizontal: 'left',
      vertical: 'bottom'
    }
  });
}
listenClick('.deleteOpdDiagnosisBtn', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  deleteItem($('#showOpdDiagnosisUrl').val() + '/' + id, null, $('#opdDiagnosisDeleteBtn').val());
});
listenSubmit('#addOpdDiagnosisForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnOpdDiagnosisSave');
  loadingButton.button('loading');
  var data = {
    'formSelector': $(this),
    'url': $('#showOpdDiagnosisCreateUrl').val(),
    'type': 'POST'
  };
  newRecord(data, loadingButton, '#add_opd_diagnoses_modal');
  loadingButton.attr('disabled', false);
});
listenClick('.editOpdDiagnosisBtn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var opdDiagnosisId = $(event.currentTarget).attr('data-id');
  renderOpdDiagnosisData(opdDiagnosisId);
});
window.renderOpdDiagnosisData = function (id) {
  $.ajax({
    url: $('#showOpdDiagnosisUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var ext = result.data.opd_diagnosis_document_url.split('.').pop().toLowerCase();
        if (ext == 'pdf') {
          $('#editOpdDiagnosisPreviewImage').css('background-image', 'url("' + $('.pdfDocumentImageUrl').val() + '")');
        } else if (ext == 'docx' || ext == 'doc') {
          $('#editOpdDiagnosisPreviewImage').css('background-image', 'url("' + $('.docxDocumentImageUrl').val() + '")');
        } else {
          if (result.data.opd_diagnosis_document_url != '') {
            $('#editOpdDiagnosisPreviewImage').css('background-image', 'url("' + result.data.opd_diagnosis_document_url + '")');
          }
        }
        $('#opdDiagnosisId').val(result.data.id);
        $('#editOpdDiagnosisReportType').val(result.data.report_type);
        document.querySelector('#editOpdDiagnosisReportDate')._flatpickr.setDate(moment__WEBPACK_IMPORTED_MODULE_0___default()(result.data.report_date).format());
        $('#editOpdDiagnosisDescription').val(result.data.description);
        if (result.data.opd_diagnosis_document_url != '') {
          $('#opdDiagnosisDocumentUrl').show();
          $('.btn-view').show();
          $('#opdDiagnosisDocumentUrl').attr('href', result.data.opd_diagnosis_document_url);
        } else {
          $('#opdDiagnosisDocumentUrl').hide();
          $('.btn-view').hide();
        }
        $('#edit_opd_diagnoses_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
};
listenSubmit('#editOpdDiagnosisForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnEditOpdDiagnosisSave');
  loadingButton.button('loading');
  var id = $('#opdDiagnosisId').val();
  var url = $('#showOpdDiagnosisUrl').val() + '/' + id;
  var data = {
    'formSelector': $(this),
    'url': url,
    'type': 'POST',
    'tableSelector': null
  };
  editRecord(data, loadingButton, '#edit_opd_diagnoses_modal');
});
listenHiddenBsModal('#add_opd_diagnoses_modal', function () {
  resetModalForm('#addOpdDiagnosisForm', '#opdDiagnosisErrorsBox');
  $('#opdDiagnosisPreviewImage').attr('src', $('#showOpdDefaultDocumentImageUrl').val());
  $('#opdDiagnosisPreviewImage').css('background-image', 'url("' + $('#showOpdDefaultDocumentImageUrl').val() + '")');
});
listenHiddenBsModal('#edit_opd_diagnoses_modal', function () {
  resetModalForm('#editOpdDiagnosisForm', '#editOpdDiagnosisErrorsBox');
  $('#editOpdDiagnosisPreviewImage').attr('src', $('#showOpdDefaultDocumentImageUrl').val());
  $('#editOpdDiagnosisPreviewImage').css('background-image', 'url("' + $('#showOpdDefaultDocumentImageUrl').val() + '")');
});
listenChange('#opdDiagnosisDocumentImage', function () {
  var extension = isValidDocumentOpdDiagnosis($(this), '#opdDiagnosisErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#opdDiagnosisErrorsBox').html('').hide();
    displayDocument(this, '#opdDiagnosisPreviewImage', extension);
  }
});
listenChange('#editOpdDiagnosisDocumentImage', function () {
  var extension = isValidDocumentOpdDiagnosis($(this), '#editOpdDiagnosisErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#editOpdDiagnosisErrorsBox').html('').hide();
    displayDocument(this, '#editOpdDiagnosisPreviewImage', extension);
  }
});
window.isValidDocumentOpdDiagnosis = function (inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx']) == -1) {
    $(inputSelector).val('');
    $(validationMessageSelector).html('The document must be a file of type: jpeg, jpg, png, pdf, doc, docx.').show();
    return false;
  }
  return ext;
};
listenClick('.removeOpdDiagnosisImage', function () {
  defaultImagePreview('#opdDiagnosisPreviewImage');
});
listenClick('.removeOpdDiagnosisImageEdit', function () {
  defaultImagePreview('#editOpdDiagnosisPreviewImage');
});

/***/ }),

/***/ "./resources/assets/js/opd_patients/create.js":
/*!****************************************************!*\
  !*** ./resources/assets/js/opd_patients/create.js ***!
  \****************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadOpdPatientData);
function loadOpdPatientData() {
  if (!$('#createOpdPatientForm').length && !$('#editOpdPatientDepartmentForm').length) {
    return;
  }
  $('#opdPatientId, #opdDoctorId,#opdPaymentMode,#editOpdPatientId, #editOpdDoctorId,#editOpdPaymentMode').select2({
    width: '100%'
  });
  $('#opdCaseId ,#editOpdCaseId').select2({
    width: '100%',
    placeholder: 'Choose Case'
  });
  var appointmentDateFlatPicker = $("#opdAppointmentDate,#editOpdAppointmentDate ").flatpickr({
    enableTime: true,
    dateFormat: "Y-m-d H:i",
    locale: $('.userCurrentLanguage').val()
  });
  if ($('.lastVisit').val()) {
    $('#opdPatientId,#editOpdPatientId').val($('.lastVisit').val()).trigger('change');
    $('#opdPatientId,#editOpdPatientId').attr('disabled', true);
  }
  if ($('.isEdit').val()) {
    $('#opdPatientId,#editOpdPatientId').attr('disabled', true);
    $('#opdPatientId,#editOpdPatientId').trigger('change');
    appointmentDateFlatPicker.set('minDate', $('#opdAppointmentDate,#editOpdAppointmentDate').val());
  } else {
    appointmentDateFlatPicker.setDate(new Date());
    appointmentDateFlatPicker.set('minDate', new Date());
  }
}
listenSubmit('#createOpdPatientForm, #editOpdPatientDepartmentForm', function () {
  $('#opdPatientId,#editOpdPatientId').attr('disabled', false);
  $('#btnOpdSave,#btnEditOpdSave').attr('disabled', true);
});
listenChange('#opdPatientId,#editOpdPatientId', function () {
  if ($(this).val() !== '') {
    $.ajax({
      url: $('.opdPatientCasesUrl').val(),
      type: 'get',
      dataType: 'json',
      data: {
        id: $(this).val()
      },
      success: function success(data) {
        if (data.data.length !== 0) {
          $('#opdCaseId,#editOpdCaseId').empty();
          $('#opdCaseId,#editOpdCaseId').removeAttr('disabled');
          $.each(data.data, function (i, v) {
            if ($('.patientCaseId').val() == v) {
              $('#editOpdCaseId').append($('<option></option>').attr('value', i).attr('selected', true).text(v));
            } else {
              $('#opdCaseId,#editOpdCaseId').append($('<option></option>').attr('value', i).text(v));
            }
          });
        } else {
          $('#opdCaseId,#editOpdCaseId').prop('disabled', true);
        }
      }
    });
  }
  $('#opdCaseId,#editOpdCaseId').empty();
  $('#opdCaseId,#editOpdCaseId').prop('disabled', true);
  $('#opdCaseId ,#editOpdCaseId').select2({
    width: '100%',
    placeholder: 'Choose Case'
  });
});
listenChange('#opdDoctorId,#editOpdDoctorId', function () {
  if ($(this).val() !== '') {
    $.ajax({
      url: $('.doctorOpdChargeUrl').val(),
      type: 'get',
      dataType: 'json',
      data: {
        id: $(this).val()
      },
      success: function success(data) {
        if (data.data.length !== 0) {
          $('#opdStandardCharge,#editOpdStandardCharge').val(data.data[0].standard_charge);
        } else {
          $('#opdStandardCharge,#editOpdStandardCharge').val(0);
        }
      }
    });
  }
});

/***/ }),

/***/ "./resources/assets/js/opd_patients/opd_patients.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/opd_patients/opd_patients.js ***!
  \**********************************************************/
/***/ (() => {

listen('click', '.deleteOpdPatientBtn', function (event) {
  var opdPatientsId = $('.deleteOpdPatientBtn').attr('data-id');
  deleteItem($('#indexOpdPatientUrl').val() + '/' + opdPatientsId, null, $('#Receptionist').val());
});

/***/ }),

/***/ "./resources/assets/js/opd_patients/visits.js":
/*!****************************************************!*\
  !*** ./resources/assets/js/opd_patients/visits.js ***!
  \****************************************************/
/***/ (() => {

listen('click', '.delete-visit-btn', function (event) {
  var opdPatientId = $(event.currentTarget).attr('data-id');
  deleteItem($('#showOpdPatientUrl').val() + '/' + opdPatientId, '', $('#opdPatients').val());
});

/***/ }),

/***/ "./resources/assets/js/opd_patients_list/opd_diagnosis.js":
/*!****************************************************************!*\
  !*** ./resources/assets/js/opd_patients_list/opd_diagnosis.js ***!
  \****************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/opd_patients_list/opd_patients.js":
/*!***************************************************************!*\
  !*** ./resources/assets/js/opd_patients_list/opd_patients.js ***!
  \***************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/opd_patients_list/opd_timelines.js":
/*!****************************************************************!*\
  !*** ./resources/assets/js/opd_patients_list/opd_timelines.js ***!
  \****************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadPatientOpdTimelineData);
function loadPatientOpdTimelineData() {
  if (!$('#showOpdListPatientDepartmentId').length) {
    return;
  }
  getOpdTimelines($('#showOpdListPatientDepartmentId').val());
}
function getOpdTimelines(opdPatientDepartmentId) {
  $.ajax({
    url: $('#showOpdListTimelinesUrl').val(),
    type: 'get',
    data: {
      id: opdPatientDepartmentId
    },
    success: function success(data) {
      $('#opdTimelines').html(data);
    }
  });
}
;

/***/ }),

/***/ "./resources/assets/js/opd_patients_list/visits.js":
/*!*********************************************************!*\
  !*** ./resources/assets/js/opd_patients_list/visits.js ***!
  \*********************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/opd_tab_active/opd_tab_active.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/opd_tab_active/opd_tab_active.js ***!
  \**************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadOpdTabActiveData);
function loadOpdTabActiveData() {
  if (!$('#OPDtab').length) {
    return;
  }
  // on load of the page: switch to the currently selected tab
  var hash = window.location.hash;
  $('#OPDtab a[href="' + hash + '"]').tab('show');
}
listenClick('#OPDtab a', function (e) {
  e.preventDefault();
  $(this).tab('show');
});
// store the currently selected tab in the hash value
$('ul.nav-tabs > li > a').on('shown.bs.tab', function (e) {
  var id = $(e.target).attr('href').substr(1);
  window.location.hash = id;
});

/***/ }),

/***/ "./resources/assets/js/opd_timelines/opd_timelines.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/opd_timelines/opd_timelines.js ***!
  \************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadOpdTimelineData);
function loadOpdTimelineData() {
  if (!$('#opdTimelineDate').length && !$('#editOpdTimelineDate').length) {
    return;
  }
  getOpdTimelines($('#opdPatientDepartmentId').val());
  $('#opdTimelineDate, #editOPdTimelineDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: true,
    sideBySide: true,
    locale: $('.userCurrentLanguage').val(),
    minDate: moment($('#showOpdAppointmentDate').val()).format('YYYY-MM-DD')
  });
}
listenSubmit('#addOpdTimelineNewForm', function (e) {
  e.preventDefault();
  var loadingButton = jQuery(this).find('#btnOpdTimelineSave');
  loadingButton.button('loading');
  var data = {
    'formSelector': $(this),
    'url': $('#showOpdTimelineCreateUrl').val(),
    'type': 'POST',
    'tableSelector': '#tbl'
  };
  newRecord(data, loadingButton, '#addOpdTimelineModal');
  loadingButton.attr('disabled', false);
  $('#addOpdTimelineNewForm')[0].reset();
  setTimeout(function () {
    getOpdTimelines($('#opdPatientDepartmentId').val());
    // $(".timeline-container").load(location.href + " .timeline-container");
  }, 500);
});
listenClick('.edit-OpdTimeline-btn', function () {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var opdTimelineId = $(this).data('timeline-id');
  renderOpdTimelineData(opdTimelineId);
});
window.renderOpdTimelineData = function (id) {
  $.ajax({
    url: $('#showOpdTimelinesUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        if (result.data.opd_timeline_document_url != '') {
          var ext = result.data.opd_timeline_document_url.split('.').pop().toLowerCase();
          if (ext == 'pdf') {
            $('#editOpdPreviewTimelineImage').css('background-image', 'url("' + $('.pdfDocumentImageUrl').val() + '")');
          } else if (ext == 'docx' || ext == 'doc') {
            $('#editOpdPreviewTimelineImage').css('background-image', 'url("' + $('.docxDocumentImageUrl').val() + '")');
          } else {
            $('#editOpdPreviewTimelineImage').css('background-image', 'url("' + result.data.opd_timeline_document_url + '")');
          }
          $('#editOpdTimeDocumentUrl').show();
          $('.btn-view').show();
        } else {
          $('#editOpdTimeDocumentUrl').hide();
          $('.btn-view').hide();
          $('#editOpdPreviewTimelineImage').css('background-image', 'url("' + $('#showOpdDefaultDocumentImageUrl').val() + '")');
        }
        $('#opdTimelineId').val(result.data.id);
        $('#editOPdTimelineTitle').val(result.data.title);
        document.querySelector('#editOPdTimelineDate')._flatpickr.setDate(moment(result.data.date).format());
        $('#editOpdTimelineDescription').val(result.data.description);
        $('#editOpdTimeDocumentUrl').attr('href', result.data.opd_timeline_document_url);
        result.data.visible_to_person == 1 ? $('#editOpdTimelineVisibleToPerson').prop('checked', true) : $('#editOpdTimelineVisibleToPerson').prop('checked', false);
        $('#editOpdTimelineModal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
};
listenSubmit('#editOpdTimelineForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnOpdTimelineEdit');
  loadingButton.button('loading');
  var id = $('#opdTimelineId').val();
  var url = $('#showOpdTimelinesUrl').val() + '/' + id;
  var data = {
    'formSelector': $(this),
    'url': url,
    'type': 'POST',
    'tableSelector': '#tbl'
  };
  editRecord(data, loadingButton, '#editOpdTimelineModal');
  setTimeout(function () {
    getOpdTimelines($('#opdPatientDepartmentId').val());
    // $(".timeline-container").load(location.href + " .timeline-container");
    // location.reload();
  }, 500);
});
listenClick('.delete-OpdTimeline-btn', function () {
  var id = $(this).data('timeline-id');
  swal({
    title: $('.deleteVariable').val(),
    text: $('.confirmVariable').val() + $('#opdTimeline').val() + '?',
    type: 'warning',
    icon: 'warning',
    showCancelButton: true,
    closeOnConfirm: false,
    confirmButtonColor: '#50cd89',
    showLoaderOnConfirm: true,
    buttons: {
      confirm: 'Yes',
      cancel: 'No'
    }
  }).then(function (result) {
    if (result) {
      $.ajax({
        url: $('#showOpdTimelinesUrl').val() + '/' + id,
        type: 'DELETE',
        dataType: 'json',
        success: function success(obj) {
          if (obj.success) {
            setTimeout(function () {
              getOpdTimelines($('#opdPatientDepartmentId').val());
            }, 500);
          }
          swal({
            title: $('.deletedVariable').val(),
            text: $('#opdTimeline').val() + $('.hasBeenDeletedVariable').val(),
            icon: 'success',
            confirmButtonColor: '#50cd89',
            timer: 2000
          });
          livewire.emit('refresh');
        }
      });
    }
  });
});
listenHiddenBsModal('#addOpdTimelineModal', function () {
  resetModalForm('#addOpdTimelineNewForm', '#timeLinevalidationErrorsBox');
  $('#opdPreviewTimelineImage').attr('src', $('.defaultDocumentImageUrl').val());
  $('#opdPreviewTimelineImage').css('background-image', 'url("' + $('.defaultDocumentImageUrl').val() + '")');
});
listenHiddenBsModal('#editOpdTimelineModal', function () {
  resetModalForm('#editOpdTimelineForm', '#editTimelineValidationErrorsBox');
});

// listenChange('#opdTimelineDocumentImage', function () {
//     let extension = isValidOpdTimelineDocument($(this), '#timeLinevalidationErrorsBox');
//     if (!isEmpty(extension) && extension != false) {
//         $('#timeLinevalidationErrorsBox').html('').hide();
//         displayDocument(this, '#opdPreviewTimelineImage', extension);
//     }
// });

// listenChange('#editOpdTimelineDocumentImage', function () {
//     let extension = isValidOpdTimelineDocument($(this),
//         '#editTimelineValidationErrorsBox');
//     if (!isEmpty(extension) && extension != false) {
//         $('#editTimelineValidationErrorsBox').html('').hide();
//         displayDocument(this, '#editOpdPreviewTimelineImage', extension);
//     }
// });

window.isValidOpdTimelineDocument = function (inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx']) == -1) {
    $(inputSelector).val('');
    $(validationMessageSelector).html('The document must be a file of type: jpeg, jpg, png, pdf, doc, docx.').show();
    return false;
  }
  return ext;
};
function getOpdTimelines(opdPatientDepartmentId) {
  $.ajax({
    url: $('#showOpdTimelinesUrl').val(),
    type: 'get',
    data: {
      id: opdPatientDepartmentId
    },
    success: function success(data) {
      $('#opdPatientTimelines').html(data);
      // $(".timeline-container").load(location.href + " .timeline-container");
    }
  });
}

listenClick('.removeOpdTimelineImage', function () {
  defaultImagePreview('#opdPreviewTimelineImage');
});
listenClick('.removeOpdTimelineImageEdit', function () {
  defaultImagePreview('#editOpdPreviewTimelineImage');
});

/***/ }),

/***/ "./resources/assets/js/operation_reports/create-details-edit.js":
/*!**********************************************************************!*\
  !*** ./resources/assets/js/operation_reports/create-details-edit.js ***!
  \**********************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadOperationCreateDetails);
function loadOperationCreateDetails() {
  if (!$('#editOperationReportForm').length) {
    return;
  }
  $('#editOperationDoctorId, #editOperationCaseId').select2({
    width: '100%'
  });
  $('#editOperationDate').flatpickr({
    format: 'YYYY-MM-DD HH:mm:ss',
    useCurrent: true,
    sideBySide: true,
    locale: $('.userCurrentLanguage').val()
  });
}
;
// listenShownBsModal('#edit_operations_reports_modal', function () {
//     $('#editOperationCaseId:first').focus();
// });

listenClick('.editOperationReportBtn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var operationReportId = $(event.currentTarget).attr('data-id');
  renderOperationDetailData(operationReportId);
});
function renderOperationDetailData(id) {
  $.ajax({
    url: $('#indexOperationReportUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#operationReportId').val(result.data.id);
        $('#editOperationCaseId').val(result.data.case_id).trigger('change.select2');
        $('#editOperationDoctorId').val(result.data.doctor_id).trigger('change.select2');
        $('#editOperationDescription').val(result.data.description);
        $('#editOperationDate').val(format(result.data.date, 'YYYY-MM-DD HH:mm:ss'));
        $('#edit_operations_reports_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#editOperationReportForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editOperationReportSave');
  loadingButton.button('loading');
  var id = $('#operationReportId').val();
  $.ajax({
    url: $('#indexOperationReportUrl').val() + '/' + id,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_operations_reports_modal').modal('hide');
        setTimeout(function () {
          window.location.reload();
        }, 3000);
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});

/***/ }),

/***/ "./resources/assets/js/operation_reports/create-edit.js":
/*!**************************************************************!*\
  !*** ./resources/assets/js/operation_reports/create-edit.js ***!
  \**************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadOperationCreateEdit);
function loadOperationCreateEdit() {
  if (!$('#addOperationReportForm').length && !$('#editOperationReportForm').length) {
    return;
  }
  $('#operationDoctorId, #operationCaseId').select2({
    width: '100%',
    dropdownParent: $('#add_operations_reports_modal')
  });
  $('#editOperationDoctorId, #editOperationCaseId').select2({
    width: '100%',
    dropdownParent: $('#edit_operations_reports_modal')
  });
  $('#operationDate, #editOperationDate').flatpickr({
    dateFormat: 'Y-m-d h:i K',
    useCurrent: true,
    sideBySide: true,
    enableTime: true,
    locale: $('.userCurrentLanguage').val()
  });
  // listenShownBsModal('#add_operations_reports_modal, #edit_operations_reports_modal', function () {
  //     $('#operationCaseId, #editOperationCaseId:first').focus();
  // });
}
;
listenSubmit('#addOperationReportForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#operationReportSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#operationReportCreateUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_operations_reports_modal').modal('hide');
        Livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#operationErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenClick('.editOperationReportsBtn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var operationReportId = $(event.currentTarget).attr('data-id');
  renderOperationReportData(operationReportId);
});
function renderOperationReportData(id) {
  $.ajax({
    url: $('#operationReportUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#operationReportId').val(result.data.id);
        $('#editOperationCaseId').val(result.data.case_id).trigger('change.select2');
        $('#editOperationDoctorId').val(result.data.doctor_id).trigger('change.select2');
        $('#editOperationDescription').val(result.data.description);
        document.querySelector('#editOperationDate')._flatpickr.setDate(moment(result.data.date).format());
        $('#edit_operations_reports_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
;
listenSubmit('#editOperationReportsForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editOperationSave');
  loadingButton.button('loading');
  var id = $('#operationReportId').val();
  $.ajax({
    url: $('#operationReportUrl').val() + '/' + id,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_operations_reports_modal').modal('hide');
        Livewire.emit('refresh');
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_operations_reports_modal', function () {
  resetModalForm('#addOperationReportForm', '#OperationErrorsBox');
  $('#operationCaseId, #operationDoctorId').val('').trigger('change.select2');
});
listenHiddenBsModal('#edit_operations_reports_modal', function () {
  resetModalForm('#editOperationReportsForm', '#editOperationErrorsBox');
});

/***/ }),

/***/ "./resources/assets/js/operation_reports/operation_reports.js":
/*!********************************************************************!*\
  !*** ./resources/assets/js/operation_reports/operation_reports.js ***!
  \********************************************************************/
/***/ (() => {

listenClick('.deleteOperationReportsBtn', function (event) {
  var operationReportId = $(event.currentTarget).attr('data-id');
  deleteItem($('#operationReportUrl').val() + '/' + operationReportId, '', $('#operationReport').val());
});

/***/ }),

/***/ "./resources/assets/js/packages/create-edit.js":
/*!*****************************************************!*\
  !*** ./resources/assets/js/packages/create-edit.js ***!
  \*****************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadPackageData);
uniquePackageId = $('.packageUniqueId').val();
function loadPackageData() {
  if (!$('.packageForm').length) {
    return;
  }
  $('.packageForm').find('input:text:visible:first').focus();
  var removeCommas = function removeCommas(str) {
    return str.replace(/,/g, '');
  };
  var calculateAmount = function calculateAmount(qty, rate) {
    if (qty > 0 && rate > 0) {
      return qty * rate;
    } else {
      return 0;
    }
  };
  dropdownToSelecte2('.serviceId');
  window.isNumberKey = function (evt, element) {
    var charCode = evt.which ? evt.which : event.keyCode;
    return !((charCode !== 46 || $(element).val().indexOf('.') !== -1) && (charCode < 48 || charCode > 57));
  };
  listenKeyup('.packageQty', function () {
    var qty = parseInt($(this).val());
    var rate = $(this).parent().siblings().find('.price').val();
    rate = parseInt(removeCommas(rate));
    var amount = calculateAmount(qty, rate);
    $(this).parent().siblings('.amount').text(addCommas(amount.toString()));
    calculateAndSetTotalAmount();
  });
  listenKeyup('.price', function () {
    var rate = $(this).val();
    rate = parseInt(removeCommas(rate));
    var qty = parseInt($(this).parent().siblings().find('.qty').val());
    var amount = calculateAmount(qty, rate);
    $(this).parent().siblings('.amount').text(addCommas(amount.toString()));
    calculateAndSetTotalAmount();
  });
  listenKeyup('#packageDiscountId', function () {
    calculateAndSetTotalAmount();
  });
}
listenClick('#addPackageItem', function () {
  var data = {
    'services': JSON.parse($('.associateServices').val()),
    'uniqueId': uniquePackageId
  };
  var packageServiceItemHtml = prepareTemplateRender('#packageServiceTemplate', data);
  $('.package-service-item-container').append(packageServiceItemHtml);
  dropdownToSelecte2('.serviceId');
  uniquePackageId++;
  resetServicePackageItemIndex();
});
listenClick('.delete-service-package-item', function () {
  $(this).parents('tr').remove();
  resetServicePackageItemIndex();
  calculateAndSetTotalAmount();
});
var resetServicePackageItemIndex = function resetServicePackageItemIndex() {
  var index = 1;
  $('.package-service-item-container>tr').each(function () {
    $(this).find('.item-number').text(index);
    index++;
  });
  if (index - 1 == 0) {
    var data = {
      'services': JSON.parse($('.associateServices').val()),
      'uniqueId': uniquePackageId
    };
    var packageServiceItemHtml = prepareTemplateRender('#packageServiceTemplate', data);
    $('.package-service-item-container').append(packageServiceItemHtml);
    dropdownToSelecte2('.serviceId');
    uniquePackageId++;
  }
};
var calculateAndSetTotalAmount = function calculateAndSetTotalAmount() {
  var totalAmount = 0;
  var discount = parseFloat($('#packageDiscountId').val() !== '' ? $('#packageDiscountId').val() : 0);
  $('.package-service-item-container>tr').each(function () {
    var itemTotal = $(this).find('.item-total').text();
    itemTotal = removeCommas(itemTotal);
    itemTotal = isEmpty($.trim(itemTotal)) ? 0 : parseInt(itemTotal);
    totalAmount += itemTotal;
  });
  totalAmount = parseFloat(totalAmount);
  totalAmount -= totalAmount * discount / 100;
  $('#packageTotal').text($('.currentCurrency').val() + addCommas(totalAmount.toFixed(2)));

  //set hidden input value
  $('#packageTotal_amount').val(totalAmount);
};
var dropdownToSelecte2 = function dropdownToSelecte2(selector) {
  $(selector).select2({
    placeholder: 'Select Service',
    width: '100%'
  });
};
listenSubmit('.packageForm', function (event) {
  event.preventDefault();
  // screenLock()
  $('#packageSaveBtn').attr('disabled', true);
  var loadingButton = jQuery(this).find('#packageSaveBtn');
  loadingButton.button('loading');
  var formData = new FormData($(this)[0]);
  $.ajax({
    url: $('.packageSaveUrl').val(),
    type: 'POST',
    dataType: 'json',
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      displaySuccessMessage(result.message);
      window.location.href = $('.packageUrl').val();
      $('#packageSaveBtn').attr('disabled', false);
    },
    error: function error(result) {
      printErrorMessage('#packageValidationErrorsBox', result);
      $('#packageSaveBtn').attr('disabled', false);
    }
    // complete: function () {
    //     screenUnLock()
    //     loadingButton.button('reset')
    // },
  });
});

/***/ }),

/***/ "./resources/assets/js/packages/packages.js":
/*!**************************************************!*\
  !*** ./resources/assets/js/packages/packages.js ***!
  \**************************************************/
/***/ (() => {

"use strict";


listenClick('.deletePackageBtn', function (event) {
  var packageId = $(event.currentTarget).attr('data-id');
  deleteItem($('#showPackageReportUrl').val() + '/' + packageId, '', $('#Packages').val());
});

/***/ }),

/***/ "./resources/assets/js/pathology_categories/pathology_categories.js":
/*!**************************************************************************!*\
  !*** ./resources/assets/js/pathology_categories/pathology_categories.js ***!
  \**************************************************************************/
/***/ (() => {

"use strict";


listenSubmit('#addPathologyCategoryForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#pathologyCategorySave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#createPathologyCategoryURL').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_pathology_categories_modal').modal('hide');
        window.livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#pCategoryErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenSubmit('#editPathologyCategoryForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editPathologyCategorySave');
  loadingButton.button('loading');
  var id = $('#pathologyCategoryId').val();
  $.ajax({
    url: $('#pathologyCategoryURL').val() + '/' + id,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_pathology_categories_modal').modal('hide');
        window.livewire.emit('refresh');
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_pathology_categories_modal', function () {
  resetModalForm('#addPathologyCategoryForm', '#pCategoryErrorsBox');
});
listenHiddenBsModal('#edit_pathology_categories_modal', function () {
  resetModalForm('#editPathologyCategoryForm', '#editPCategoryErrorsBox');
});
window.renderPathologyCategoriesData = function (id) {
  $.ajax({
    url: $('#pathologyCategoryURL').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var pathologyCategory = result.data;
        $('#pathologyCategoryId').val(pathologyCategory.id);
        $('#editPathologyCategoryName').val(pathologyCategory.name);
        $('#edit_pathology_categories_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
};
listenClick('.editPathologyCategoryBtn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var pathologyCategoryId = $(event.currentTarget).attr('data-id');
  renderPathologyCategoriesData(pathologyCategoryId);
});
listenClick('.deletePathologyCategoryBtn', function (event) {
  var pathologyCategoryId = $(event.currentTarget).attr('data-id');
  deleteItem($('#pathologyCategoryURL').val() + '/' + pathologyCategoryId, '', $('#pathologyCategory').val());
});

/***/ }),

/***/ "./resources/assets/js/pathology_tests/create-edit.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/pathology_tests/create-edit.js ***!
  \************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadPathologyTestData);
function loadPathologyTestData() {
  if (!$('#createPathologyTest').length && !$('#editPathologyTest').length) {
    return;
  }
  $('.price-input').trigger('input');
  $('.pathologyCategories,.pChargeCategories').select2({
    width: '100%'
  });
  $('#createPathologyTest, #editPathologyTest').find('input:text:visible:first').focus();
}
listenChange('.pChargeCategories', function (event) {
  var chargeCategoryId = $(this).val();
  chargeCategoryId !== '' ? getPathologyTestStandardCharge(chargeCategoryId) : $('.pathologyStandardCharge').val('');
});
function getPathologyTestStandardCharge(id) {
  $.ajax({
    url: $('.pathologyTestActionURL').val() + '/get-standard-charge' + '/' + id,
    method: 'get',
    cache: false,
    success: function success(result) {
      if (result !== '') {
        $('.pathologyStandardCharge').val(result.data);
        $('.price-input').trigger('input');
      }
    }
  });
}

/***/ }),

/***/ "./resources/assets/js/pathology_tests/pathology_tests.js":
/*!****************************************************************!*\
  !*** ./resources/assets/js/pathology_tests/pathology_tests.js ***!
  \****************************************************************/
/***/ (() => {

"use strict";


listenClick('.deletePathologyTestBtn', function (event) {
  var pathologyTestId = $(event.currentTarget).attr('data-id');
  deleteItem($('#pathologyTestURL').val() + '/' + pathologyTestId, '',
  // Lang.get('messages.pathology_test.pathology_tests'));
  $('#pathologyTest').val());
});
listenClick('.showPathologyTestBtn', function (event) {
  event.preventDefault();
  var pathologyTestId = $(event.currentTarget).attr('data-id');
  renderPathologyTestData(pathologyTestId);
});
window.renderPathologyTestData = function (id) {
  $.ajax({
    url: $('#pathologyTestShowUrl').val() + '/' + id,
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#showPathologyTestName').text(result.data.test_name);
        $('#showPathologyTestShortName').text(result.data.short_name);
        $('#showPathologyTestType').text(result.data.test_type);
        $('#showPathologyCategories').text(result.data.pathology_category_name);
        $('#showPathologyTestUnit').text(result.data.unit);
        $('#showPathologyTestSubcategory').text(result.data.subcategory);
        $('#showPathologyTestMethod').text(result.data.method);
        $('#showPathologyTestReportDays').text(result.data.report_days);
        $('#showPathologyChargeCategories').text(result.data.charge_category_name);
        $('#showPTestStandardCharge').text(result.data.standard_charge);
        moment.locale($('#pathologyTestLanguage').val());
        $('#showPathologyTestCreatedOn').text(moment(result.data.created_at).fromNow());
        $('#showPathologyTestUpdatedOn').text(moment(result.data.updated_at).fromNow());
        setValueOfEmptySpan();
        $('#showPathologyTest').appendTo('body').modal('show');
      }
    },
    error: function error(result) {
      displayErrorMessage(result.responseJSON.message);
    }
  });
};

/***/ }),

/***/ "./resources/assets/js/patient_admissions/create-edit.js":
/*!***************************************************************!*\
  !*** ./resources/assets/js/patient_admissions/create-edit.js ***!
  \***************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadPatientAdmissionData);
var patientAdmissionDate = undefined;
function loadPatientAdmissionData() {
  if (!$('#createPatientAdmission').length && !$('#editPatientAdmission').length) {
    return;
  }
  $('#admissionPatientId, #admissionDoctorId, #admissionPackageId, #admissionInsuranceId, #admissionBedId').select2({
    width: '100%'
  });
  patientAdmissionDate = $('#admissionDate').flatpickr({
    dateFormat: "Y-m-d H:i",
    sideBySide: true,
    enableTime: true,
    locale: $('.userCurrentLanguage').val()
  });
  $('#admissionPatientId').focus();
  if ($('.isEdit').val()) {
    setTimeout(function () {
      $('#admissionDate').trigger('dp.change');
    }, 300);
    var dischargeDate = undefined;
    var patientBirthDate = $('#admissionPatientBirthDate').val();
    $("#admissionDate").flatpickr({
      dateFormat: "Y-m-d H:i",
      sideBySide: true,
      enableTime: true,
      minDate: patientBirthDate,
      locale: $('.userCurrentLanguage').val(),
      onChange: function onChange(selectedDates, dateStr, instance) {
        var minDate = moment($('#admissionDate').val()).add(1, 'days').format();
        if (typeof dischargeDate != "undefined") {
          dischargeDate.set('minDate', minDate);
        }
      }
    });
    dischargeDate = $("#admissionDischargeDate").flatpickr({
      dateFormat: "Y-m-d H:i",
      sideBySide: true,
      minDate: minDate,
      useCurrent: false,
      enableTime: true,
      locale: $('.userCurrentLanguage').val()
    });
    var minDate = moment($('#admissionDate').val()).add(1, 'days').format();
    dischargeDate.set('minDate', minDate);
  }
}
listenSubmit('#createPatientAdmission, #editPatientAdmission', function () {
  if ($('.error-msg').text() !== '') {
    $('.phoneNumber').focus();
    return false;
  }
});
listenChange('#admissionPatientId', function (event) {
  var id = $(this).val();
  getPatientAdmissionDate(id);
});
window.getPatientAdmissionDate = function (id) {
  $.ajax({
    url: $('#admissionPatientBirthUrl').val() + '/' + id,
    method: 'get',
    cache: false,
    success: function success(result) {
      patientAdmissionDate.set('minDate', result.user.dob);
    }
  });
};

/***/ }),

/***/ "./resources/assets/js/patient_admissions/patient_admission.js":
/*!*********************************************************************!*\
  !*** ./resources/assets/js/patient_admissions/patient_admission.js ***!
  \*********************************************************************/
/***/ (() => {

listen('click', '.delete-patient-admission-btn', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexPatientAdmissionsUrl').val() + '/' + id, '',
  // Lang.get('messages.patient_admission.patient_admission'));
  $('#patientAdmission').val());
});
listenChange('.patientAdmissionStatus', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  updatePatientAdmissionStatus(id);
});
listen('click', '.show-patient-admission-btn', function (event) {
  var patientAdmissionId = $(event.currentTarget).attr('data-id');
  renderPatientAdmissionData(patientAdmissionId);
});
window.renderPatientAdmissionData = function (id) {
  $.ajax({
    url: $('#patientAdmissionsShowModal').val() + '/' + id,
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#showAdmissionPatient_name').text(result.data.patient.patient_user.full_name);
        $('#showAdmissionDoctor_name').text(result.data.doctor.doctor_user.full_name);
        $('#showAdmission_id').text(result.data.patient_admission_id);
        moment.locale($('#patientAdmissionDate').val());
        $('#showAdmission_date').text(moment(result.data.admission_date).format('Do MMM, Y h:mm A'));
        if (result.data.discharge_date == null) {
          $('#showAdmissionDischarge_date').text('N/A');
        } else {
          $('#showAdmissionDischarge_date').text(moment(result.data.discharge_date).format('Do MMM, Y h:mm A'));
        }
        $('#showAdmissionPackage').text(result.data["package"] ? result.data["package"].name : 'N/A');
        $('#showAdmissionInsurance').text(result.data.insurance ? result.data.insurance.name : 'N/A');
        $('#showAdmission_bed').text(result.data.bed ? result.data.bed.name : 'N/A');
        $('#showAdmissionPolicy_no').text(result.data.policy_no);
        $('#showAdmissionAgent_name').text(result.data.agent_name);
        $('#showAdmissionGuardian_name').text(result.data.guardian_name);
        $('#showAdmissionGuardian_relation').text(result.data.guardian_relation);
        $('#showAdmissionGuardian_contact').text(result.data.guardian_contact);
        $('#showAdmissionGuardian_address').text(result.data.guardian_address);
        $('#showAdmissionPatient_status').empty();
        var activeCase = $('#patientAdmissionActive').val();
        var deActiveCase = $('#patientAdmissionDeActive').val();
        if (result.data.status == 1) {
          $('#showAdmissionPatient_status').append('<span class="badge bg-light-success">' + activeCase + '</span>');
        } else {
          $('#showAdmissionPatient_status').append('<span class="badge bg-light-danger">' + deActiveCase + '</span>');
        }
        $('#showAdmissionCreated_on').text(moment(result.data.created_at).fromNow());
        $('#showAdmissionUpdated_on').text(moment(result.data.updated_at).fromNow());
        setValueOfEmptySpan();
        $('#showPatientAdmission').appendTo('body').modal('show');
      }
    },
    error: function error(result) {
      displayErrorMessage(result.responseJSON.message);
    }
  });
};
listenChange('#patient_admission_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
  hideDropdownManually($('#patientAdmissionFilterBtn'), $('.dropdown-menu'));
});
listenClick('#admissionResetFilter', function () {
  $('#patient_admission_filter_status').val(0).trigger('change');
  hideDropdownManually($('#patientAdmissionFilterBtn'), $('.dropdown-menu'));
});
window.updatePatientAdmissionStatus = function (id) {
  $.ajax({
    url: $('#indexPatientAdmissionsUrl').val() + '/' + +id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      displayErrorMessage(result.responseJSON.message);
    }
  });
};

/***/ }),

/***/ "./resources/assets/js/patient_cases/create-edit.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/patient_cases/create-edit.js ***!
  \**********************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadPatientCaseData);
function loadPatientCaseData() {
  if (!$('#createPatientCaseForm').length && !$('#editPatientCaseForm').length) {
    return;
  }
  $('#casePatientId, #caseDoctorId').select2({
    width: '100%'
  });
  $('#caseDate').flatpickr({
    enableTime: true,
    // defaultDate: new Date(),
    dateFormat: "Y-m-d H:i",
    locale: $('.userCurrentLanguage').val()
  });
  // $('#casePatientId').focus();

  $('.price-input').trigger('input');
}
listenSubmit('#createPatientCaseForm, #editPatientCaseForm', function () {
  if ($('.error-msg').text() !== '') {
    $('.phoneNumber').focus();
    return false;
  }
});

/***/ }),

/***/ "./resources/assets/js/patient_cases/patient_cases.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/patient_cases/patient_cases.js ***!
  \************************************************************/
/***/ (() => {

"use strict";


listenClick('.delete-patient-case-btn', function (event) {
  var caseId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexPatientCaseUrl').val() + '/' + caseId, '', Lang.get('messages.case.case'));
});
listenClick('#caseResetFilter', function () {
  $('#caseHead').val(0).trigger('change');
  hideDropdownManually($('#caseFilterBtn'), $('.dropdown-menu'));
});

// status activation deactivation change event
listenChange('.patientCaseStatus', function (event) {
  var caseId = $(event.currentTarget).attr('data-id');
  caseActiveDeActiveStatus(caseId);
});

// activate de-activate Status
window.caseActiveDeActiveStatus = function (id) {
  $.ajax({
    url: $('#indexPatientCaseUrl').val() + '/' + id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        Livewire.emit('refresh');
      }
    }
  });
};
listenClick('.show-patient-case-btn', function (event) {
  var patientCaseId = $(event.currentTarget).attr('data-id');
  renderPatientCaseData(patientCaseId);
});
window.renderPatientCaseData = function (id) {
  $.ajax({
    url: $('#patientCaseShowModal').val() + '/' + id,
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        console.log(result.data);
        $('#case_id').text(result.data.case_id);
        $('#patient_name').text(result.data.patient_name);
        $('#patient_phone').text(result.data.phone);
        $('#patient_doctor').text(result.data.doctor_name);
        moment.locale($('#caseLanguage').val());
        $('#case_date').text(moment(result.data.date).format('Do MMM, Y h:mm A'));
        $('#case_fee').text(result.data.fee);
        $('#description').text(result.data.description);
        $('#patientStatus').empty();
        var activeCase = $('#patientCaseActive').val();
        var deActiveCase = $('#patientCaseDeActive').val();
        if (result.data.status == 1) {
          $('#patientStatus').append('<span class="badge bg-light-success">' + activeCase + '</span>');
        } else {
          $('#patientStatus').append('<span class="badge bg-light-danger">' + deActiveCase + '</span>');
        }
        $('#created_on').text(moment(result.data.created_at).fromNow());
        $('#updated_on').text(moment(result.data.updated_at).fromNow());
        setValueOfEmptySpan();
        $('#showPatientCase').appendTo('body').modal('show');
      }
    },
    error: function error(result) {
      displayErrorMessage(result.responseJSON.message);
    }
  });
};
listenChange('#caseHead', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});

/***/ }),

/***/ "./resources/assets/js/patient_cases_list/patient_cases_list.js":
/*!**********************************************************************!*\
  !*** ./resources/assets/js/patient_cases_list/patient_cases_list.js ***!
  \**********************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/patient_diagnosis_test/create-edit.js":
/*!*******************************************************************!*\
  !*** ./resources/assets/js/patient_diagnosis_test/create-edit.js ***!
  \*******************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadPatientDiagnosisTestData);
function loadPatientDiagnosisTestData() {
  if (!$('#diagnosisTestPatientId').length && !$('#editDiagnosisTestPatientId').length) {
    return;
  }
  $('#diagnosisTestPatientId,#diagnosisTestDoctorId,#diagnosisTestCategoryId').select2();
  $('#editDiagnosisTestPatientId,#editDiagnosisTestDoctorId,#editDiagnosisTestCategoryId').select2();
}
listenClick('#addDiagnosisTestItem,#addEditDiagnosisTestItem', function () {
  var uniqueId = $('.uniqueId').val();
  var data = {
    'uniqueId': uniqueId
  };
  var patientDiagnosisTestHtml = prepareTemplateRender('#patientDiagnosisTestTemplate', data);
  $('.diagnosis-item-container').append(patientDiagnosisTestHtml);
  uniqueId++;
  resetPatientDiagnosisTestIndex();
});
listenClick('.delete-diagnosis', function () {
  $(this).parents('tr').remove();
  resetPatientDiagnosisTestIndex();
});
function resetPatientDiagnosisTestIndex() {
  var index = 1;
  $('.diagnosis-item-container>tr').each(function () {
    $(this).find('.item-number').text(index);
    index++;
  });
}
listenSubmit('.patientDiagnosisTestForm', function (event) {
  event.preventDefault();
  // screenLock();
  var loadingButton = jQuery(this).find('.saveBtn');
  loadingButton.attr('disabled', true);
  // loadingButton.button('loading');
  var formData = new FormData($(this)[0]);
  $.ajax({
    url: $('.patientDiagnosisTestSaveUrl').val(),
    type: 'POST',
    dataType: 'json',
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      displaySuccessMessage(result.message);
      window.location.href = $('.patientDiagnosisTest').val();
      loadingButton.attr('disabled', false);
    },
    error: function error(result) {
      printErrorMessage('#diagnosisTestErrorsBox', result);
      loadingButton.attr('disabled', false);
    }
    // complete: function () {
    //     screenUnLock();
    //     loadingButton.button('reset');
    // },
  });
});

/***/ }),

/***/ "./resources/assets/js/patient_diagnosis_test/patient_diagnosis_test.js":
/*!******************************************************************************!*\
  !*** ./resources/assets/js/patient_diagnosis_test/patient_diagnosis_test.js ***!
  \******************************************************************************/
/***/ (() => {

listenClick('.patient-diagnosys-test-delete-btn', function (event) {
  var patientDiagnosisTestId = $(event.currentTarget).attr('data-id');
  deleteItem($('#patientDiagnosisTestUrl').val() + '/' + patientDiagnosisTestId, '', $('#patientDiagnosisTest').val());
});

/***/ }),

/***/ "./resources/assets/js/patient_prescriptions/create-edit.js":
/*!******************************************************************!*\
  !*** ./resources/assets/js/patient_prescriptions/create-edit.js ***!
  \******************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadPaymentPrescriptionData);
function loadPaymentPrescriptionData() {
  if (!$('#indexPatientPrescriptionId').length) {
    return;
  }
  $('#patient_id,#filter_status').select2({
    width: '100%'
  });
}

/***/ }),

/***/ "./resources/assets/js/patient_prescriptions/patient_prescriptions.js":
/*!****************************************************************************!*\
  !*** ./resources/assets/js/patient_prescriptions/patient_prescriptions.js ***!
  \****************************************************************************/
/***/ (() => {

"use strict";


listenChange('#patients_prescription_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listenClick('#patientPrescriptionResetFilter', function () {
  $('#patients_prescription_filter_status').val(2).trigger('change');
  hideDropdownManually($('#patientsPrescriptionFilterBtn'), $('.dropdown-menu'));
});

/***/ }),

/***/ "./resources/assets/js/patients/create-edit.js":
/*!*****************************************************!*\
  !*** ./resources/assets/js/patients/create-edit.js ***!
  \*****************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadPatientData);
function loadPatientData() {
  if (!$('#createPatientForm').length && !$('#editPatientForm').length) {
    return;
  }
  $('.patientBirthDate').flatpickr({
    maxDate: new Date(),
    locale: $('.userCurrentLanguage').val()
  });
}
listenKeyup('.patientFacebookUrl', function () {
  this.value = this.value.toLowerCase();
});
listenKeyup('.patientTwitterUrl', function () {
  this.value = this.value.toLowerCase();
});
listenKeyup('.patientInstagramUrl', function () {
  this.value = this.value.toLowerCase();
});
listenKeyup('.patientLinkedInUrl', function () {
  this.value = this.value.toLowerCase();
});
listenSubmit('#createPatientForm, #editPatientForm', function () {
  if ($('.error-msg').text() !== '') {
    $('.phoneNumber').focus();
    return false;
  }
  var facebookUrl = $('.patientFacebookUrl').val();
  var twitterUrl = $('.patientTwitterUrl').val();
  var instagramUrl = $('.patientInstagramUrl').val();
  var linkedInUrl = $('.patientLinkedInUrl').val();
  var facebookExp = new RegExp(/^(https?:\/\/)?((m{1}\.)?)?((w{2,3}\.)?)facebook.[a-z]{2,3}\/?.*/i);
  var twitterExp = new RegExp(/^(https?:\/\/)?((m{1}\.)?)?((w{2,3}\.)?)twitter\.[a-z]{2,3}\/?.*/i);
  var instagramUrlExp = new RegExp(/^(https?:\/\/)?((w{2,3}\.)?)instagram.[a-z]{2,3}\/?.*/i);
  var linkedInExp = new RegExp(/^(https?:\/\/)?((w{2,3}\.)?)linkedin\.[a-z]{2,3}\/?.*/i);
  var facebookCheck = facebookUrl == '' ? true : facebookUrl.match(facebookExp) ? true : false;
  if (!facebookCheck) {
    displayErrorMessage('Please enter a valid Facebook URL');
    return false;
  }
  var twitterCheck = twitterUrl == '' ? true : twitterUrl.match(twitterExp) ? true : false;
  if (!twitterCheck) {
    displayErrorMessage('Please enter a valid Twitter URL');
    return false;
  }
  var instagramCheck = instagramUrl == '' ? true : instagramUrl.match(instagramUrlExp) ? true : false;
  if (!instagramCheck) {
    displayErrorMessage('Please enter a valid Instagram URL');
    return false;
  }
  var linkedInCheck = linkedInUrl == '' ? true : linkedInUrl.match(linkedInExp) ? true : false;
  if (!linkedInCheck) {
    displayErrorMessage('Please enter a valid Linkedin URL');
    return false;
  }
});
$('#createPatientForm, #editPatientForm').find('input:text:visible:first').focus();
listenClick('.remove-patient-image', function () {
  defaultImagePreview('.previewImage', 1);
});
listenChange('.patientProfileImage', function () {
  var extension = isValidImage($(this), '#patientErrorBox');
  console.log(extension);
  if (!isEmpty(extension) && extension != false) {
    $('#patientErrorBox').html('').hide();
    displayDocument(this, '#patientErrorBox', extension);
  } else {
    $(this).val('');
    $('#patientErrorBox').removeClass('d-none hide');
    $('#patientErrorBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=patientErrorBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
listenChange('.editPatientImage', function () {
  var extension = isValidImage($(this), '#editPatientErrorsBox');
  console.log(extension);
  if (!isEmpty(extension) && extension != false) {
    $('#editPatientErrorsBox').html('').hide();
    displayDocument(this, '#patientErrorBox', extension);
  } else {
    $(this).val('');
    $('#editPatientErrorsBox').removeClass('d-none hide');
    $('#editPatientErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=editPatientErrorsBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
function isValidImage(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['jpg', 'png', 'jpeg']) == -1) {
    return false;
  }
  $(validationMessageSelector).hide();
  return true;
}
;

/***/ }),

/***/ "./resources/assets/js/patients/patients.js":
/*!**************************************************!*\
  !*** ./resources/assets/js/patients/patients.js ***!
  \**************************************************/
/***/ (() => {

listen('click', '.delete-patient-btn', function (event) {
  var patientId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexPatientUrl').val() + '/' + patientId, '', $('#Patients').val());
});
listenChange('.patientStatus', function (event) {
  var patientId = $(event.currentTarget).attr('data-id');
  updatePatientStatus(patientId);
});
window.updatePatientStatus = function (id) {
  $.ajax({
    url: $('#indexPatientUrl').val() + '/' + +id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        livewire.emit('refresh');
      }
    }
  });
};
listenChange('#patient_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listenClick('#patientResetFilter', function () {
  $('#patient_filter_status').val(0).trigger('change');
  hideDropdownManually($('#patientFilterBtn'), $('.dropdown-menu'));
});

/***/ }),

/***/ "./resources/assets/js/patients/patients_data_listing.js":
/*!***************************************************************!*\
  !*** ./resources/assets/js/patients/patients_data_listing.js ***!
  \***************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadPatientListingData);
function loadPatientListingData() {
  if (!$('#showPatientUrl').length) {
    return;
  }

  // Edit And Delete AdvancedPayment Modal
  $('#editPatientPaymentDate').flatpickr({
    dateFormat: 'Y-m-d',
    locale: $('.userCurrentLanguage').val()
  });
  $('#editAdvancedPaymentModal').on('shown.bs.modal', function () {
    $('#editPatientId:first').focus();
  });

  // Edit And Delete Vaccination Modal
  $('#editVaccinationDoesGivenDate').flatpickr({
    enableTime: true,
    defaultDate: new Date(),
    locale: $('.userCurrentLanguage').val(),
    dateFormat: 'Y-m-d H:i'
  });
  listenShownBsModal('#editVaccinationModal', function () {
    $('#editPatientVaccinationName, #editVaccinationPatientName').select2({
      width: '100%',
      dropdownParent: $('#editVaccinationModal')
    });
  });
  loadDeleteFunction();
}
listen('click', '.edit-advancedPayment-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var advancedPaymentId = $(event.currentTarget).attr('data-id');
  renderPatientListingData(advancedPaymentId);
});
window.renderPatientListingData = function (id) {
  $.ajax({
    url: $('#showPatientAdvancedPaymentUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#patientAdvancePaymentId').val(result.data.id);
        $('#editPatientPaymentId').val(result.data.patient_id).trigger('change.select2');
        $('#editPatientPaymentReceiptNo').val(result.data.receipt_no);
        $('#editPatientPaymentAmount').val(result.data.amount);
        $('.price-input').trigger('input');
        document.querySelector('#editPatientPaymentDate')._flatpickr.setDate(moment(result.data.date).format());
        $('#editAdvancedPaymentModal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
};
listenSubmit('#editAdvancedPaymentForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editPatientPaymentSave');
  loadingButton.button('loading');
  var id = $('#patientAdvancePaymentId').val();
  $.ajax({
    url: $('#showPatientAdvancedPaymentUrl').val() + '/' + id,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#editAdvancedPaymentModal').modal('hide');
        location.reload();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#editAdvancedPaymentModal', function () {
  resetModalForm('#editAdvancedPaymentForm', '#editPatientPaymentErrorsBox');
});
listen('click', '.edit-vaccination-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var vaccinatedPatientId = $(event.currentTarget).attr('data-id');
  renderVaccinationData(vaccinatedPatientId);
});
window.renderVaccinationData = function (id) {
  $.ajax({
    url: $('#showVaccinatedPatientUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var vaccinatedPatient = result.data;
        $('#vaccinatedPatientId').val(vaccinatedPatient.id);
        $('#editVaccinationPatientName').val(vaccinatedPatient.patient_id).trigger('change.select2');
        $('#editPatientVaccinationName').val(vaccinatedPatient.vaccination_id).trigger('change.select2');
        $('#editVaccinationSerialNo').val(vaccinatedPatient.vaccination_serial_number);
        $('#editVaccinationDoseNumber').val(vaccinatedPatient.dose_number);
        document.querySelector('#editVaccinationDoesGivenDate')._flatpickr.setDate(moment(vaccinatedPatient.dose_given_date).format());
        $('#editVaccinationDescription').val(vaccinatedPatient.description);
        $('#editVaccinationModal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
};
listenSubmit('#editVaccinationForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editVaccinationSave');
  loadingButton.button('loading');
  var id = $('#vaccinatedPatientId').val();
  $.ajax({
    url: $('#showVaccinatedPatientUrl').val() + '/' + id + '/update',
    type: 'post',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#editVaccinationModal').modal('hide');
        location.reload();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#editVaccinationModal', function () {
  resetModalForm('#editVaccinationForm', '#editPatientVaccinationErrorsBox1');
});
function loadDeleteFunction() {
  if (!$('#showPatientUrl').length) {
    return;
  }
  listen('click', '.layout-delete-btn', function (event) {
    var Ele = $(this);
    var id = $(event.currentTarget).attr('data-id');
    var url = $(this).data('url');
    var message = $(this).data('message');
    deleteItem(url + '/' + id, '', message);
  });
}

/***/ }),

/***/ "./resources/assets/js/payment_reports/payments_reports.js":
/*!*****************************************************************!*\
  !*** ./resources/assets/js/payment_reports/payments_reports.js ***!
  \*****************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadPaymentReportData);
function loadPaymentReportData() {
  if (!$('#filterPaymentAccount').length) {
    return;
  }
  $('#filterPaymentAccount').select2({
    width: '100%'
  });
}
listenChange('#filterPaymentReport', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listen('click', '#paymentReportResetFilter', function () {
  $('#filterPaymentReport').val(0).trigger('change');
  hideDropdownManually($('#paymentReportFilterBtn'), $('.dropdown-menu'));
});

/***/ }),

/***/ "./resources/assets/js/payments/create-edit.js":
/*!*****************************************************!*\
  !*** ./resources/assets/js/payments/create-edit.js ***!
  \*****************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadEditPaymentData);
function loadEditPaymentData() {
  if (!$('#paymentDate').length) {
    return;
  }
  $('#paymentDate').flatpickr({
    dateFormat: 'Y-m-d',
    locale: $('.userCurrentLanguage').val()
  });

  // $('select').focus();

  $('.price-input').trigger('input');
}

/***/ }),

/***/ "./resources/assets/js/payments/payments.js":
/*!**************************************************!*\
  !*** ./resources/assets/js/payments/payments.js ***!
  \**************************************************/
/***/ (() => {

listen('click', '.delete-payment-btn', function (event) {
  var paymentId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexPaymentUrl').val() + '/' + paymentId, '', $('#Payment').val());
});
listen('click', '.show-payment-btn', function (event) {
  event.preventDefault();
  var paymentId = $(event.currentTarget).attr('data-id');
  renderPaymentData(paymentId);
});
function renderPaymentData(id) {
  $.ajax({
    url: $('#paymentShowModal').val() + '/' + id,
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#payment_account').text(result.data.account.name);
        $('#payment_date').text(moment(result.data.payment_date).format('Do MMM, YYYY'));
        $('#pay_to').text(result.data.pay_to);
        $('#payment_amount').text(result.data.amount);
        $('#created_on').text(moment(result.data.created_at).fromNow());
        $('#updated_on').text(moment(result.data.updated_at).fromNow());
        $('#description').text(result.data.description);
        $('#description').css('overflow-wrap', 'break-word');
        setValueOfEmptySpan();
        $('#showPayment').appendTo('body').modal('show');
      }
    },
    error: function error(result) {
      displayErrorMessage(result.responseJSON.message);
    }
  });
}
;

/***/ }),

/***/ "./resources/assets/js/pharmacists/create-edit.js":
/*!********************************************************!*\
  !*** ./resources/assets/js/pharmacists/create-edit.js ***!
  \********************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadEditPharmacistData);
function loadEditPharmacistData() {
  if (!$('#createPharmacistForm').length && !$('#editPharmacistForm').length) {
    return;
  }
  $('.pharmacistBloodGroup').select2({
    width: '100%'
  });
  var birthDate = $('.pharmacistBirthDate').flatpickr({
    dateFormat: 'Y-m-d',
    useCurrent: false,
    locale: $('.userCurrentLanguage').val()
  });
  // birthDate.setDate(isEmpty($('#birthDate').val()) ? new Date() : $('#birthDate').val());
  birthDate.set('maxDate', new Date());
  if ($('.departmentId').length) {
    $('.departmentId').select2({
      width: '100%'
    });
  }
  $('#createPharmacistForm, #editPharmacistForm').find('input:text:visible:first').focus();
}
listenSubmit('#createPharmacistForm, #editPharmacistForm', function () {
  if ($('.error-msg').text() !== '') {
    $('.phoneNumber').focus();
    return false;
  }
});
listenClick('.remove-pharmacist-image', function () {
  defaultImagePreview('.previewImage', 1);
});
listenChange('.pharmacistProfileImage', function () {
  var extension = isValidImage($(this), '#pharmacistsErrorBox');
  console.log(extension);
  if (!isEmpty(extension) && extension != false) {
    $('#pharmacistsErrorBox').html('').hide();
    displayDocument(this, '#pharmacistsErrorBox', extension);
  } else {
    $(this).val('');
    $('#pharmacistsErrorBox').removeClass('d-none hide');
    $('#pharmacistsErrorBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=pharmacistsErrorBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
listenChange('.editPharmacistProfileImage', function () {
  var extension = isValidImage($(this), '#editPharmacistErrorBox');
  console.log(extension);
  if (!isEmpty(extension) && extension != false) {
    $('#editPharmacistErrorBox').html('').hide();
    displayDocument(this, '#pharmacistsErrorBox', extension);
  } else {
    $(this).val('');
    $('#editPharmacistErrorBox').removeClass('d-none hide');
    $('#editPharmacistErrorBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=editPharmacistErrorBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
function isValidImage(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['jpg', 'png', 'jpeg']) == -1) {
    return false;
  }
  $(validationMessageSelector).hide();
  return true;
}
;

/***/ }),

/***/ "./resources/assets/js/pharmacists/pharmacists.js":
/*!********************************************************!*\
  !*** ./resources/assets/js/pharmacists/pharmacists.js ***!
  \********************************************************/
/***/ (() => {

listen('click', '.delete-pharmacist-btn', function (event) {
  var pharmacistId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexPharmacistUrl').val() + '/' + pharmacistId, '', $('#Pharmacist').val());
});
listen('change', '.pharmacistStatus', function (event) {
  var pharmacistId = $(event.currentTarget).attr('data-id');
  updatePharmacistsStatus(pharmacistId);
});
listen('click', '#pharmacistResetFilter', function () {
  $('#pharmacist_filter_status').val(0).trigger('change');
  hideDropdownManually($('#pharmacistFilterBtn'), $('.dropdown-menu'));
});
listenChange('#pharmacist_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
window.updatePharmacistsStatus = function (id) {
  $.ajax({
    url: $('#indexPharmacistUrl').val() + '/' + +id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        livewire.emit('refresh');
      }
    }
  });
};

/***/ }),

/***/ "./resources/assets/js/pharmacists/pharmacists_data_listing.js":
/*!*********************************************************************!*\
  !*** ./resources/assets/js/pharmacists/pharmacists_data_listing.js ***!
  \*********************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/postals/postal.js":
/*!***********************************************!*\
  !*** ./resources/assets/js/postals/postal.js ***!
  \***********************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadPostal);
var addModal = $('.add_modal').val();
var editModal = $('.edit_modal').val();
var editPostalDate;
function loadPostal() {
  if (!$('.editPostalDate').length) {
    return;
  }
  $('.date, .editPostalDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: true,
    sideBySide: true,
    locale: $('.userCurrentLanguage').val()
  });
  editPostalDate = $('.editPostalDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: false,
    sideBySide: false,
    locale: $('.userCurrentLanguage').val()
  });
}
listenSubmit('.addPostalForm', function (event) {
  event.preventDefault();
  $('.btnPostalSave').attr('disabled', true);
  var loadingButton = jQuery(this).find('.btnPostalSave');
  loadingButton.button('loading');
  var formData = new FormData($(this)[0]);
  $.ajax({
    url: $('.postalCreateUrl').val(),
    type: 'POST',
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        if ($('#add_postal_receives_modal').length || $('#edit_postal_receives_modal').length) {
          $('#add_postal_receives_modal,#edit_postal_receives_modal').modal('hide');
        }
        if ($('#add_postal_dispatch_modal').length || $('#edit_postal_dispatch_modal').length) {
          $('#add_postal_dispatch_modal,#edit_postal_dispatch_modal').modal('hide');
        }
        Livewire.emit('refresh');
        setTimeout(function () {
          $('.btnPostalSave').attr('disabled', false);
          loadingButton.button('reset');
        }, 1000);
      }
    },
    error: function error(result) {
      printErrorMessage('.validationErrorsBox', result);
      setTimeout(function () {
        $('.btnPostalSave').attr('disabled', false);
        loadingButton.button('reset');
      }, 1000);
    }
  });
});
listenClick('.delete-postal-btn', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  deleteItem($('.postalUrl').val() + '/' + id, '', $('.name').val());
});
listenClick('.edit-postal-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var postalId = event.currentTarget.dataset.id;
  postalRenderData(postalId);
});
function postalRenderData(id) {
  $.ajax({
    url: $('.postalUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        if (result.data.document_url != '') {
          var ext = result.data.document_url.split('.').pop().toLowerCase();
          if (ext === 'pdf') {
            $('.editPreviewImage').css('background-image', 'url("' + $('.pdfDocumentImageUrl').val() + '")');
          } else if (ext === 'docx' || ext === 'doc') {
            $('.editPreviewImage').css('background-image', 'url("' + $('.docxDocumentImageUrl').val() + '")');
          } else if (ext === '') {
            $('.editPreviewImage').css('background-image', 'url("' + $('.defaultDocumentImageUrl').val() + '")');
          } else {
            $('.editPreviewImage').css('background-image', 'url("' + result.data.document_url + '")');
          }
        }
        $($('.hiddenId').val()).val(result.data.id);
        $('.editFromTitle').val(result.data.from_title);
        editPostalDate.setDate(format(result.data.date, 'YYYY-MM-DD'));

        // $('#editDate').
        //     val(result.data.date ? format(result.data.date, 'YYYY-MM-DD') : '');
        $('.editReferenceNumber').val(result.data.reference_no);
        $('.editToTitle').val(result.data.to_title);
        $('.editAddress').val(result.data.address);
        if (isEmpty(result.data.document_url)) {
          $('.edit-attachment').addClass('d-none');
        } else {
          $('.documentUrl').attr('href', result.data.document_url);
        }
        if ($('#edit_postal_receives_modal').length) {
          $('#edit_postal_receives_modal').modal('show');
        }
        if ($('#edit_postal_dispatch_modal').length) {
          $('#edit_postal_dispatch_modal').modal('show');
        }
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
;
listenSubmit('.editPostalForm', function (event) {
  event.preventDefault();
  $('.btnEditSave').attr('disabled', true);
  var loadingButton = jQuery(this).find('.btnEditSave');
  loadingButton.button('loading');
  // if($('.editFromTitle').val().trim().length === 0){
  //     displayErrorMessage('The from title is required.');
  //     $('.btnEditSave').attr('disabled', false);
  //     return false;
  // }

  if ($('.isPostal').val() == 1) {
    if ($('.editFromTitle').val().trim().length === 0) {
      displayErrorMessage('The from title is required.');
      $('.btnEditSave').attr('disabled', false);
      return false;
    }
  }
  if ($('.isPostal').val() == 2) {
    if ($('.editToTitle').val().trim().length === 0) {
      displayErrorMessage('The to title is required.');
      $('.btnEditSave').attr('disabled', false);
      return false;
    }
  }
  var id = $($('.hiddenId').val()).val();
  var url = $('.postalUrl').val() + '/' + id;
  var data = {
    'formSelector': $(this),
    'url': url,
    'type': 'post',
    'tableSelector': $('.tableName').val()
  };
  editRecord(data, loadingButton);
  if ($('#edit_postal_receives_modal').length) {
    $('#edit_postal_receives_modal').modal('hide');
  }
  if ($('#edit_postal_dispatch_modal').length) {
    $('#edit_postal_dispatch_modal').modal('hide');
  }
  $('.btnEditSave').attr('disabled', false);
});
listenChange('.postalAttachment', function () {
  var extension = postalIsValidDocument($(this), '.validationErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('.validationErrorsBox').html('').hide();
    displayDocument(this, '.previewImage', extension);
  }
});

// listenChange('.editAttachment', function () {
//     if ($('#edit_postal_receives_modal').length) {
//         var editModalAttachment = $('#edit_postal_receives_modal')
//     }
//     if ($('#edit_postal_dispatch_modal').length) {
//         editModalAttachment = $('#edit_postal_dispatch_modal')
//     }
//
//     let extension = postalIsValidDocument($(this), '#editReceiveErrorsBox1')
//     if (!isEmpty(extension) && extension != false) {
//         displayDocument(this, '.editPreviewImage', extension)
//     }
//
// });

function postalIsValidDocument(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx']) == -1) {
    $(inputSelector).val('');
    $(validationMessageSelector).html($('.documentError').val()).removeClass('hide');
    $(validationMessageSelector).removeAttr('style');
    return false;
  }
  $(validationMessageSelector).html($('.documentError').val()).addClass('hide');
  return ext;
}
listenClick('.remove-postal-image', function () {
  defaultImagePreview('.previewImage');
});
listenClick('.remove-postal-image-edit', function () {
  defaultImagePreview('.editPreviewImage');
});
listenHiddenBsModal('#add_postal_dispatch_modal', function () {
  resetModalForm('#addDispatchForm', '.validationErrorsBox');
  $('.previewImage').css('background-image', 'url("' + $('.defaultDocumentImageUrl').val() + '")');
});
listenHiddenBsModal('#edit_postal_dispatch_modal', function () {
  resetModalForm('#editDispatchForm', '.editValidationErrorsBox1');
  $('.editPreviewImage').css('background-image', 'url("' + $('.defaultDocumentImageUrl').val() + '")');
});
listenHiddenBsModal('#add_postal_receives_modal', function () {
  resetModalForm('#addReceiveForm', '.validationErrorsBox');
  $('.previewImage').css('background-image', 'url("' + $('.defaultDocumentImageUrl').val() + '")');
});
listenHiddenBsModal('#edit_postal_receives_modal', function () {
  resetModalForm('#editReceiveForm', '.editValidationErrorsBox1');
  $('.editPreviewImage').css('background-image', 'url("' + $('.defaultDocumentImageUrl').val() + '")');
});

/***/ }),

/***/ "./resources/assets/js/prescriptions/create-edit.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/prescriptions/create-edit.js ***!
  \**********************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadPrescriptionCreate);
uniquePrescriptionId = $('#prescriptionUniqueId').val();
function loadPrescriptionCreate() {
  if (!$('#prescriptionPatientId').length && !$('#editPrescriptionPatientId').length) {
    return;
  }
  $('#prescriptionPatientId,#editPrescriptionPatientId,#filter_status,#prescriptionDoctorId,#editPrescriptionDoctorId,#prescriptionTime,#prescriptionMedicineCategoryId,#prescriptionMedicineBrandId,.prescriptionMedicineId,.prescriptionMedicineMealId,#editPrescriptionTime').select2({
    width: '100%'
  });
  $('#prescriptionMedicineBrandId, #prescriptionMedicineBrandId').select2({
    width: '100%',
    dropdownParent: $('#add_new_medicine')
  });
  $('#prescriptionPatientId').first().focus();
}
;
listenSubmit('#createPrescription, #editPrescription', function () {
  $('.btnPrescriptionSave').attr('disabled', true);
});
listenSubmit('#createMedicineFromPrescription', function (e) {
  e.preventDefault();
  $.ajax({
    url: $('#createMedicineFromPrescriptionPost').val(),
    method: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      $(".medicineTable").load(location.href + " .medicineTable", function () {
        $('.prescriptionMedicineId').select2();
      });
      displaySuccessMessage(result.message);
      $('#add_new_medicine').modal('hide');
    },
    error: function error(result) {
      printErrorMessage('#medicinePrescriptionErrorBox', result);
    }
  });
});
var dropdownToSelecte2 = function dropdownToSelecte2(selector) {
  $(selector).select2({
    placeholder: 'Select Medicine',
    width: '100%'
  });
};
listenHiddenBsModal('#add_new_medicine', function () {
  resetModalForm('#createMedicineFromPrescription', '#medicinePrescriptionErrorBox');
});
listenClick('.delete-prescription-medicine-item', function () {
  $(this).parents('tr').remove();
  // resetPrescriptionMedicineItemIndex()
});

listenClick('.add-medicine-btn', function () {
  var data = {
    'medicines': JSON.parse($('.associatePrescriptionMedicines').val()),
    'meals': JSON.parse($('.associatePrescriptionMeals').val()),
    'uniqueId': uniquePrescriptionId
  };
  var prescriptionMedicineHtml = prepareTemplateRender('#prescriptionMedicineTemplate', data);
  $('.prescription-medicine-container').append(prescriptionMedicineHtml);
  dropdownToSelecte2('.prescriptionMedicineId');
  dropdownToSelecte2('.prescriptionMedicineMealId');
  uniquePrescriptionId++;
  $('#prescriptionUniqueId').val(uniquePrescriptionId);

  // resetPrescriptionMedicineItemIndex();
});

var resetPrescriptionMedicineItemIndex = function resetPrescriptionMedicineItemIndex() {
  var index = 1;
  if (index - 1 == 0) {
    var data = {
      'medicines': JSON.parse($('.associatePrescriptionMedicines').val()),
      'meals': JSON.parse($('.associatePrescriptionMeals').val()),
      'uniqueId': uniquePrescriptionId
    };
    var packageServiceItemHtml = prepareTemplateRender('#prescriptionMedicineTemplate', data);
    $('.prescription-medicine-container').append(packageServiceItemHtml);
    dropdownToSelecte2('.prescriptionMedicineId');
    dropdownToSelecte2('.prescriptionMedicineMealId');
    uniquePrescriptionId++;
  }
};

/***/ }),

/***/ "./resources/assets/js/prescriptions/prescriptions.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/prescriptions/prescriptions.js ***!
  \************************************************************/
/***/ (() => {

listenClick('.delete-prescription-btn', function (event) {
  var prescriptionId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexPrescriptionUrl').val() + '/' + prescriptionId, '', $('#Prescription').val());
});
listenChange('.prescriptionStatus', function (event) {
  var prescriptionId = $(event.currentTarget).attr('data-id');
  prescriptionUpdateStatus(prescriptionId);
});
function prescriptionUpdateStatus(id) {
  $.ajax({
    url: $('#indexPrescriptionUrl').val() + '/' + +id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        hideDropdownManually($('#prescriptionFilterBtn'), $('#prescriptionFilter'));
      }
    },
    error: function error(result) {
      displayErrorMessage(result.responseJSON.message);
    }
  });
}
listenClick('#prescriptionResetFilter', function () {
  $('#prescriptionHead').val('2').trigger('change');
  hideDropdownManually($('#prescriptionFilterBtn'), $('.dropdown-menu'));
});
function prescriptionRenderData(id) {
  $.ajax({
    url: $('#prescriptionShowModal').val() + '/' + id,
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#showPrescriptionPatientName').text(result.data.patient.user.full_name);
        $('#showPrescriptionDoctorName').text(result.data.doctor.user.full_name);
        $('#showPrescriptionFoodAllergies').text(result.data.food_allergies);
        $('#showPrescriptionTendencyBleed').text(result.data.tendency_bleed);
        $('#showPrescriptionHeartDisease').text(result.data.heart_disease);
        $('#showPrescriptionHighBloodPressure').text(result.data.high_blood_pressure);
        $('#showPrescriptionDiabetic').text(result.data.diabetic);
        $('#showPrescriptionSurgery').text(result.data.surgery);
        $('#showPrescriptionAccident').text(result.data.accident);
        $('#showPrescriptionOthers').text(result.data.others);
        $('#showPrescriptionMedicalHistory').text(result.data.medical_history);
        $('#showPrescriptionCurrentMedication').text(result.data.current_medication);
        $('#showPrescriptionFemalePregnancy').text(result.data.female_pregnancy);
        $('#showPrescriptionBreastFeeding').text(result.data.breast_feeding);
        $('#showPrescriptionHealthInsurance').text(result.data.health_insurance);
        $('#showPrescriptionLowIncome').text(result.data.low_income);
        $('#showPrescriptionReference').text(result.data.reference);
        $('#showPrescriptionStatus').empty();
        if (result.data.status == 1) {
          $('#showPrescriptionStatus').append('<span class="badge bg-light-success">Active</span>');
        } else {
          $('#showPrescriptionStatus').append('<span class="badge bg-light-danger">Deactive</span>');
        }
        $('#showPrescriptionCreatedOn').text(moment(result.data.created_at).fromNow());
        $('#showPrescriptionUpdatedOn').text(moment(result.data.updated_at).fromNow());
        setValueOfEmptySpan();
        $('#showPrescription').appendTo('body').modal('show');
      }
    },
    error: function error(result) {
      displayErrorMessage(result.responseJSON.message);
    }
  });
}
listenChange('#prescriptionHead', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});

/***/ }),

/***/ "./resources/assets/js/radiology_categories/radiology_categories.js":
/*!**************************************************************************!*\
  !*** ./resources/assets/js/radiology_categories/radiology_categories.js ***!
  \**************************************************************************/
/***/ (() => {

listenSubmit('#addRadiologyCategoryForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnRadiologyCategorySave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#createRadiologyCategoryURL').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_radiology_categories_modal').modal('hide');
        $('#radiologyCategoryTable').DataTable().ajax.reload(null, true);
        Livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#rcvalidationErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenSubmit('#editRadiologyCategoryForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnRadiologyCategoryEditSave');
  loadingButton.button('loading');
  var id = $('#radiologyCategoryId').val();
  $.ajax({
    url: $('#radiologyCategoryURL').val() + '/' + id,
    type: 'patch',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_radiology_categories_modal').modal('hide');
        $('#radiologyCategoryTable').DataTable().ajax.reload(null, true);
        Livewire.emit('refresh');
      }
    },
    error: function error(result) {
      UnprocessableInputError(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_radiology_categories_modal', function () {
  resetModalForm('#addRadiologyCategoryForm', '#rcvalidationErrorsBox');
});
listenHiddenBsModal('#edit_radiology_categories_modal', function () {
  resetModalForm('#editRadiologyCategoryForm', '#editRCValidationErrorsBox');
});
function radiologyCategoryRenderData(id) {
  $.ajax({
    url: $('#radiologyCategoryURL').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var radiologyCategory = result.data;
        $('#radiologyCategoryId').val(radiologyCategory.id);
        $('#editRadiologyCategoryName').val(radiologyCategory.name);
        $('#edit_radiology_categories_modal').modal('show');
        ajaxCallCompleted();
        Livewire.emit('refresh');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenClick('.edit-radiology-category-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var radiologyCategoryId = $(event.currentTarget).attr('data-id');
  radiologyCategoryRenderData(radiologyCategoryId);
});
listenClick('.delete-radiology-category-btn', function (event) {
  var radiologyCategoryId = $(event.currentTarget).attr('data-id');
  deleteItem($('#radiologyCategoryURL').val() + '/' + radiologyCategoryId, '', $('#radiologyCategory').val());
});

/***/ }),

/***/ "./resources/assets/js/radiology_tests/create-edit.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/radiology_tests/create-edit.js ***!
  \************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadRadiologyEdit);
function loadRadiologyEdit() {
  if (!$('.radiologyTestActionURL').length) {
    return;
  }
  $('.price-input').trigger('input');
  $('.radiologyCategories,.chargeCategories').select2({
    width: '100%'
  });
  $('#createRadiologyTest, #editRadiologyTest').find('input:text:visible:first').focus();
}
window.radiologyTestGetStandardCharge = function (id) {
  $.ajax({
    url: $('.radiologyTestActionURL').val() + '/get-standard-charge' + '/' + id,
    method: 'get',
    cache: false,
    success: function success(result) {
      if (result.data !== '') {
        $('.rtStandardCharge').val(result.data);
        $('.price-input').trigger('input');
      }
    }
  });
};
listenChange('.chargeCategories', function (event) {
  var chargeCategoryId = $(this).val();
  chargeCategoryId !== '' ? radiologyTestGetStandardCharge(chargeCategoryId) : $('.rtStandardCharge').val('');
});

/***/ }),

/***/ "./resources/assets/js/radiology_tests/radiology_tests.js":
/*!****************************************************************!*\
  !*** ./resources/assets/js/radiology_tests/radiology_tests.js ***!
  \****************************************************************/
/***/ (() => {

listenClick('.delete-radiology-test-btn', function (event) {
  var radiologyTestId = $(event.currentTarget).attr('data-id');
  deleteItem($('#radiologyTestURL').val() + '/' + radiologyTestId, '', $('#radiologyTest').val());
});
listenClick('.show-radiology-test-btn', function (event) {
  event.preventDefault();
  var radiologyTestId = $(this).attr('data-id');
  radiologyTestRenderData(radiologyTestId);
});
window.radiologyTestRenderData = function (id) {
  $.ajax({
    url: $('#radiologyTestShowModal').val() + '/' + id,
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#showRtTest_name').text(result.data.test_name);
        $('#showRtShort_name').text(result.data.short_name);
        $('#showRtTest_type').text(result.data.test_type);
        $('#showRadiologyCategories').text(result.data.radiology_category_name);
        $('#showRtSubcategory').text(result.data.subcategory);
        $('#showRtReport_days').text(result.data.report_days);
        $('#showCharge_categories').text(result.data.charge_category_name);
        $('#showRtStandard_charge').text(result.data.standard_charge);
        moment.locale($('#radiologyTestLanguage').val());
        $('#showRtCreated_on').text(moment(result.data.created_at).fromNow());
        $('#showRtUpdated_on').text(moment(result.data.updated_at).fromNow());
        setValueOfEmptySpan();
        $('#showRadiologyTest').appendTo('body').modal('show');
      }
    },
    error: function error(result) {
      displayErrorMessage(result.responseJSON.message);
    }
  });
};

/***/ }),

/***/ "./resources/assets/js/receptionists/create-edit.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/receptionists/create-edit.js ***!
  \**********************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadEditReceptionistsData);
function loadEditReceptionistsData() {
  createReceptionistForm();
  editReceptionistForm();
}
function createReceptionistForm() {
  if (!$('#receptionistBirthDate').length) {
    return;
  }
  $('#receptionistBirthDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: true,
    sideBySide: true,
    maxDate: new Date(),
    locale: $('.userCurrentLanguage').val()
  });
  $('#receptionistBloodGroup').select2({
    width: '100%'
  });
  $('#receptionistDepartmentId').select2({
    width: '100%'
  });
  $('#createReceptionForm').find('input:text:visible:first').focus();
}
function editReceptionistForm() {
  if (!$('#editReceptionistBirthDate').length) {
    return;
  }
  $('#editReceptionistBirthDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: true,
    sideBySide: true,
    maxDate: new Date(),
    locale: $('.userCurrentLanguage').val()
  });
  $('#editReceptionistBloodGroup').select2({
    width: '100%'
  });
  $('#editReceptionForm').find('input:text:visible:first').focus();
}
listenSubmit('#createReceptionForm, #editReceptionForm', function () {
  if ($('.error-msg').text() !== '') {
    $('.phoneNumber').focus();
    return false;
  }
});
listenClick('.remove-receptionist-image', function () {
  defaultImagePreview('#receptionistPreviewImage', 1);
});
listenChange('.receptionistProfileImage', function () {
  var extension = isValidImage($(this), '#receptionistErrorsBox');
  console.log(extension);
  if (!isEmpty(extension) && extension != false) {
    $('#receptionistErrorsBox').html('').hide();
    displayDocument(this, '#customValidationErrorsBox', extension);
  } else {
    $(this).val('');
    $('#receptionistErrorsBox').removeClass('d-none hide');
    $('#receptionistErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=receptionistErrorsBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
listenChange('.editReceptionistProfileImage', function () {
  var extension = isValidImage($(this), '#editReceptionistErrorsBox');
  console.log(extension);
  if (!isEmpty(extension) && extension != false) {
    $('#editReceptionistErrorsBox').html('').hide();
    displayDocument(this, '#customValidationErrorsBox', extension);
  } else {
    $(this).val('');
    $('#editReceptionistErrorsBox').removeClass('d-none hide');
    $('#editReceptionistErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=editReceptionistErrorsBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
function isValidImage(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['jpg', 'png', 'jpeg']) == -1) {
    return false;
  }
  $(validationMessageSelector).hide();
  return true;
}
;

/***/ }),

/***/ "./resources/assets/js/receptionists/receptionists.js":
/*!************************************************************!*\
  !*** ./resources/assets/js/receptionists/receptionists.js ***!
  \************************************************************/
/***/ (() => {

"use strict";


window.updateReceptionistStatus = function (id) {
  $.ajax({
    url: $('#receptionistUrl').val() + '/' + +id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
      }
    }
  });
};
listenClick('.delete-receptionist-btn', function (event) {
  var receptionistId = $(event.currentTarget).attr('data-id');
  deleteItem($('#receptionistUrl').val() + '/' + receptionistId, '#receptionistsTbl', $('#Receptionist').val());
});
listenChange('.receptionistStatus', function (event) {
  var receptionistId = $(event.currentTarget).attr('data-id');
  updateReceptionistStatus(receptionistId);
});
listenChange('#receptionist_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listen('click', '#receptionistResetFilter', function () {
  $('#receptionist_filter_status').val(0).trigger('change');
  hideDropdownManually($('#receptionistsFilterBtn'), $('.dropdown-menu'));
});

/***/ }),

/***/ "./resources/assets/js/receptionists/receptionists_data_listing.js":
/*!*************************************************************************!*\
  !*** ./resources/assets/js/receptionists/receptionists_data_listing.js ***!
  \*************************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/schedules/create-edit.js":
/*!******************************************************!*\
  !*** ./resources/assets/js/schedules/create-edit.js ***!
  \******************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadSchedules);
function loadSchedules() {
  if (!$('.scheduleForm').length) {
    return;
  }
  $('#doctorId, #serialVisibilityId').select2({
    width: '100%'
  });
  $('.perPatientTime').flatpickr({
    enableTime: true,
    noCalendar: true,
    enableSeconds: true,
    dateFormat: 'H:i:S',
    time_24hr: true,
    locale: $('.userCurrentLanguage').val()
  });

  // $('#doctorId').first().focus();

  var hospitalDayOfWeek = [];
  var hospitalStartTime = [];
  $.each(JSON.parse($('.hospitalSchedule').val()), function (i, v) {
    hospitalDayOfWeek[i] = parseInt(v.day_of_week);
    hospitalStartTime[v.day_of_week] = [v.start_time, v.end_time];
  });
  var i = 0;
  var perPatTime = $('.perPatientTime').val();
  for (i; i <= 7; i++) {
    if ($.inArray(i, hospitalDayOfWeek) !== -1) {
      hospitalDayOfWeek.sort();
      $('.cpy-btn' + (hospitalDayOfWeek[0] - 1)).hide();
      $('.hospitalScheduleFrom-' + i).flatpickr({
        enableTime: true,
        noCalendar: true,
        enableSeconds: true,
        dateFormat: 'H:i:S',
        time_24hr: true,
        minTime: hospitalStartTime[i][0]
      });
      hospitalToSchedule = $('.hospitalScheduleTo-' + i).flatpickr({
        enableTime: true,
        noCalendar: true,
        enableSeconds: true,
        dateFormat: 'H:i:S',
        time_24hr: true,
        minTime: hospitalStartTime[i][0].split(':')[0] + ':' + parseInt(hospitalStartTime[i][0].split(':')[1]) + 5,
        maxTime: hospitalStartTime[i][1]
      });
    } else {
      $('.hospitalScheduleFrom-' + i).parent().parent().hide();
    }
  }
  function checkedEle(element) {
    if (element.prev().length > 0) {
      if (element.prev().css('display') == 'none') {
        return checkedEle(element.prev());
      } else {
        return element.prev();
      }
    }
  }
  listenClick('.copy-btn', function (e) {
    e.preventDefault();
    var Ele = checkedEle($(this).parent().parent());
    var id = $(e.currentTarget).attr('data-id');
    var oldId = id - 1;
    var availableFrom = $('#availableFrom-'.concat(oldId)).val();
    var availableTo = $('#availableTo-'.concat(oldId)).val();
    availableFrom = Ele.find('td .availableFrom').val();
    availableTo = Ele.find('td .availableTo').val();
    var availableTimeFrom = '';
    var availableTimeTo = '';
    // if (hospitalStartTime[id + 1][0] > availableFrom) {
    //     displayErrorMessage('Hospital Schedule doesn\'t match with Selected Time');
    //     availableTimeFrom = hospitalStartTime[id + 1][0];
    // $('#availableFrom-'.concat(id)).val(hospitalStartTime[id + 1][0] + ':00');
    // } else {
    availableTimeFrom = availableFrom;
    $('#availableFrom-'.concat(id)).val(availableFrom);
    // }
    // if (hospitalStartTime[id + 1][1] > availableTo) {
    //     // availableTimeTo = hospitalStartTime[id + 1][1];
    //     // $('#availableTo-'.concat(id)).
    //     //     val(hospitalStartTime[id + 1][1] + ':00');
    //     availableTimeTo = availableTo;
    //     $('#availableTo-'.concat(id)).val(availableTo);
    // } else {
    availableTimeTo = availableTo;
    $('#availableTo-'.concat(id)).val(availableTo);
    // }
    var newId = id + 1;
    $('.hospitalScheduleFrom-' + newId).flatpickr({
      enableTime: true,
      noCalendar: true,
      enableSeconds: true,
      dateFormat: 'H:i:S',
      time_24hr: true,
      minTime: availableTimeFrom
    });
    $('.hospitalScheduleTo-' + newId).flatpickr({
      enableTime: true,
      noCalendar: true,
      enableSeconds: true,
      dateFormat: 'H:i:S',
      time_24hr: true,
      maxTime: availableTimeTo
    });
  });
  listenSubmit('.scheduleForm', function (e) {
    e.preventDefault();
    var perPatientTime = $('.perPatientTime').val();
    if (perPatientTime == '00:00:00') {
      $('#scheduleErrorsBox').html('Please select per patient time').show();
      $('.perPatientTime').focus();
      return false;
    }
    var j = 0;
    var availableFrom = true;
    for (j; j <= 6; j++) {
      if ($('#availableFrom-' + j).val() != '00:00:00') {
        availableFrom = false;
        if (hospitalStartTime[j + 1] !== 'undefined' && $('#availableFrom-' + j).val() < hospitalStartTime[j + 1][0]) {
          $('#availableFrom-' + j).focus();
          $('#scheduleErrorsBox').show().html('Available From time must be greater than hospital schedule time').show();
          $('#scheduleErrorsBox').delay(5000).fadeOut();
          return false;
        }
      }
    }
    if (availableFrom) {
      $('#scheduleErrorsBox').show().html('Available From time must be greater than Zero');
      $('#scheduleErrorsBox').delay(5000).fadeOut();
      return false;
    }
    var i = 0;
    var availableTo = true;
    for (i; i <= 6; i++) {
      if ($('#availableTo-' + i).val() != '00:00:00') {
        availableTo = false;
        if (hospitalStartTime[i + 1] !== 'undefined' && $('#availableTo-' + i).val() > hospitalStartTime[i + 1][1] + ':00') {
          $('#availableTo-' + i).focus();
          $('#scheduleErrorsBox').show().html('Available To time must be less than hospital schedule time').show();
          $('#scheduleErrorsBox').delay(5000).fadeOut();
          return false;
        }
      }
    }
    if (availableTo) {
      $('#scheduleErrorsBox').show().html('Available To time must be greater than Zero');
      $('#scheduleErrorsBox').delay(5000).fadeOut();
      return false;
    }
    $(this)[0].submit();
  });
}

/***/ }),

/***/ "./resources/assets/js/schedules/schedules.js":
/*!****************************************************!*\
  !*** ./resources/assets/js/schedules/schedules.js ***!
  \****************************************************/
/***/ (() => {

listenClick('.delete-schedule-btn', function (event) {
  var scheduleId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexScheduleUrl').val() + '/' + scheduleId, '', $('#Schedule').val());
});

/***/ }),

/***/ "./resources/assets/js/services/create-edit.js":
/*!*****************************************************!*\
  !*** ./resources/assets/js/services/create-edit.js ***!
  \*****************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadServiceEditData);
function loadServiceEditData() {
  if (!$('#createServiceForm').length && !$('#editServiceForm').length) {
    return;
  }
  $('#serviceStatus').select2({
    width: '100%'
  });
  $('.price-input').trigger('input');
  $(window).on('beforeunload', function () {
    $('input[type=submit]').prop('disabled', 'disabled');
  });
  $('#createServiceForm, #editServiceForm').find('input:text:visible:first').focus();
}
listenSubmit('#createServiceForm, #editServiceForm', function () {
  $('#serviceBtnSave').attr('disabled', true);
});

/***/ }),

/***/ "./resources/assets/js/services/services.js":
/*!**************************************************!*\
  !*** ./resources/assets/js/services/services.js ***!
  \**************************************************/
/***/ (() => {

"use strict";


function updateServiceStatus(id) {
  $.ajax({
    url: $('#showServiceReportUrl').val() + '/' + id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
      }
    }
  });
}
listenClick('.delete-service-btn', function (event) {
  var serviceId = $(event.currentTarget).attr('data-id');
  deleteItem($('#showServiceReportUrl').val() + '/' + serviceId, '', $('#Service').val());
});
listenChange('.serviceStatus', function (event) {
  var serviceId = $(event.currentTarget).attr('data-id');
  updateServiceStatus(serviceId);
});
listenChange('#service_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
  hideDropdownManually($('#incomeFilterBtn'), $('#incomeFilter'));
});
listenClick('#serviceResetFilter', function () {
  $('#service_filter_status').val(0).trigger('change');
  hideDropdownManually($('#serviceFilterBtn'), $('.dropdown-menu'));
});

/***/ }),

/***/ "./resources/assets/js/settings/setting.js":
/*!*************************************************!*\
  !*** ./resources/assets/js/settings/setting.js ***!
  \*************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadSettingData);
function loadSettingData() {
  if (!$('#generalCurrencyType').length) {
    return;
  }
  $('#generalCurrencyType').select2({
    width: '100%'
  });
  initializeDefaultCountryCode();
}
function initializeDefaultCountryCode() {
  var countryCode = $('#countryPhone');
  if (!countryCode.length) {
    return false;
  }
  var input = document.querySelector('#countryPhone');
  errorMsg = document.querySelector('.error-msg'), validMsg = document.querySelector('.valid-msg');
  var errorMap = [Lang.get('messages.common.invalid_number'), Lang.get('messages.common.invalid_country_code'), Lang.get('messages.common.too_short'), Lang.get('messages.common.too_long')];
  // initialise plugin
  var intl = window.intlTelInput(input, {
    initialCountry: 'IN',
    separateDialCode: true,
    geoIpLookup: function geoIpLookup(success, failure) {
      $.get('https://ipinfo.io', function () {}, 'jsonp').always(function (resp) {
        var countryCode = resp && resp.country ? resp.country : '';
        success(countryCode);
      });
    },
    utilsScript: '../../public/assets/js/inttel/js/utils.min.js'
  });
  var getCode = intl.selectedCountryData['name'] + ' +' + intl.selectedCountryData['dialCode'];
  $('#countryPhone').val(getCode);
  var reset = function reset() {
    input.classList.remove('error');
  };
  input.addEventListener('blur', function () {
    reset();
    if (input.value.trim()) {
      if (intl.isValidNumber()) {
        validMsg.classList.remove('d-none');
      } else {
        input.classList.add('error');
        var errorCode = intl.getValidationError();
        // errorMsg.innerHTML = errorMap[errorCode]
        errorMsg.classList.remove('d-none');
      }
    }
  });

  // on keyup / change flag: reset
  input.addEventListener('change', reset);
  input.addEventListener('keyup', reset);
  $(document).on('blur keyup change countrychange', '#countryPhone', function () {
    var getCode = intl.selectedCountryData['dialCode'];
    var getCountry = intl.selectedCountryData['iso2'];
    $('#countryCode').val(getCode);
    $('#countryName').val(getCountry);
  });
}
function updateSettingStatus(id) {
  $.ajax({
    url: $('#sideBarModuleUrl').val() + '/' + id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        setTimeout(function () {
          window.location.reload();
        }, 5000);
        displaySuccessMessage(result.message);
        livewire.emit('refresh');
      }
    }
  });
}
listenChange('.generalAppLogo', function () {
  var extension = isValidSettingLogo($(this), '#generalValidationErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#generalValidationErrorsBox').html('').hide();
    displayDocument(this, '#generalPreviewImage', extension);
  } else {
    $(this).val('');
    $('#generalValidationErrorsBox').removeClass('d-none hide');
    $('#generalValidationErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=generalValidationErrorsBox]').focus();
    $('html, body').animate({
      scrollTop: '0'
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
listenChange('.generalFavicon', function () {
  var extension = isValidSettingLogo($(this), '#settingValidationErrorsBox');
  console.log(!isEmpty(extension) && extension != false);
  if (!isEmpty(extension) && extension != false) {
    $('#generalValidationErrorsBox').html('').hide();
    displayDocument(this, '#generalPreviewImage', extension);
  } else {
    $(this).val('');
    $('#generalValidationErrorsBox').removeClass('d-none hide');
    $('#generalValidationErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=generalValidationErrorsBox]').focus();
    $('html, body').animate({
      scrollTop: '0'
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
function isValidSettingLogo(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['jpg', 'png', 'jpeg']) == -1) {
    // $(inputSelector).val('');
    // $(validationMessageSelector).removeClass('d-none');
    // $(validationMessageSelector).html('The image must be a file of type: jpg, jpeg, png.').show();
    // displayErrorMessage('The image must be a file of type: jpg, jpeg, png.')
    return false;
  }
  $(validationMessageSelector).hide();
  return true;
}
function displaySettingLogo(input, selector) {
  var displayPreview = true;
  if (input.files && input.files[0]) {
    var reader = new FileReader();
    reader.onload = function (e) {
      var image = new Image();
      image.src = e.target.result;
      image.onload = function () {
        if (image.height != 60 && image.width != 90) {
          $(selector).val('');
          $('#generalValidationErrorsBox').removeClass('d-none');
          $('#generalValidationErrorsBox').html($('#editGeneralImageValidation').val()).show();
          return false;
        }
        $(selector).attr('src', e.target.result);
        displayPreview = true;
      };
    };
    if (displayPreview) {
      reader.readAsDataURL(input.files[0]);
      $(selector).show();
    }
  }
}
listenKeyup('#generalFacebookUrl', function () {
  this.value = this.value.toLowerCase();
});
listenKeyup('#generalTwitterUrl', function () {
  this.value = this.value.toLowerCase();
});
listenKeyup('#generalInstagramUrl', function () {
  this.value = this.value.toLowerCase();
});
listenKeyup('#generalLinkedInUrl', function () {
  this.value = this.value.toLowerCase();
});
listenSubmit('#createSetting', function (event) {
  // event.preventDefault();

  if ($('.error-msg').text() !== '') {
    $('#generalPhoneNumber').focus();
    return false;
  }
  var facebookUrl = $('#generalFacebookUrl').val();
  var twitterUrl = $('#generalTwitterUrl').val();
  var instagramUrl = $('#generalInstagramUrl').val();
  var linkedInUrl = $('#generalLinkedInUrl').val();
  var facebookExp = new RegExp(/^(https?:\/\/)?((m{1}\.)?)?((w{2,3}\.)?)facebook.[a-z]{2,3}\/?.*/i);
  var twitterExp = new RegExp(/^(https?:\/\/)?((m{1}\.)?)?((w{2,3}\.)?)twitter\.[a-z]{2,3}\/?.*/i);
  var instagramUrlExp = new RegExp(/^(https?:\/\/)?((w{2,3}\.)?)instagram.[a-z]{2,3}\/?.*/i);
  var linkedInExp = new RegExp(/^(https?:\/\/)?((w{2,3}\.)?)linkedin\.[a-z]{2,3}\/?.*/i);
  var facebookCheck = facebookUrl == '' ? true : facebookUrl.match(facebookExp) ? true : false;
  if (!facebookCheck) {
    displayErrorMessage('Please enter a valid Facebook URL');
    return false;
  }
  var twitterCheck = twitterUrl == '' ? true : twitterUrl.match(twitterExp) ? true : false;
  if (!twitterCheck) {
    displayErrorMessage('Please enter a valid Twitter URL');
    return false;
  }
  var instagramCheck = instagramUrl == '' ? true : instagramUrl.match(instagramUrlExp) ? true : false;
  if (!instagramCheck) {
    displayErrorMessage('Please enter a valid Instagram URL');
    return false;
  }
  var linkedInCheck = linkedInUrl == '' ? true : linkedInUrl.match(linkedInExp) ? true : false;
  if (!linkedInCheck) {
    displayErrorMessage('Please enter a valid Linkedin URL');
    return false;
  }
  // $('#createSetting')[0].submit();

  return true;
});
listenChange('.settingStatus', function (event) {
  var moduleId = $(event.currentTarget).attr('data-id');
  updateSettingStatus(moduleId);
});
listenChange('#module_filter_status', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
  hideDropdownManually($('#moduleFilterBtn'), $('#moduleFilter'));
});
listenClick('#settingResetFilter', function () {
  $('#module_filter_status').val(0).trigger('change');
  hideDropdownManually($('#moduleFilterBtn'), $('.dropdown-menu'));
});

/***/ }),

/***/ "./resources/assets/js/sidebar_menu_search/sidebar_menu_search.js":
/*!************************************************************************!*\
  !*** ./resources/assets/js/sidebar_menu_search/sidebar_menu_search.js ***!
  \************************************************************************/
/***/ (() => {

"use strict";


$(document).ready(function () {
  listenKeyup('#menuSearch', function () {
    var value = $(this).val().toLowerCase();
    $('.nav-item').filter(function () {
      $('.no-record').addClass('d-none');
      $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
      checkEmpty();
    });
  });
  function checkEmpty() {
    if ($('.nav-item:visible').last().length == 0) {
      $('.no-record').removeClass('d-none');
    }
  }
  listenClick('.sidebar-aside-toggle', function () {
    if ($(this).hasClass('active') === true) {
      $('.sidebar-search-box').addClass('d-none');
    } else {
      $('.sidebar-search-box').removeClass('d-none');
    }
  });
});

/***/ }),

/***/ "./resources/assets/js/sms/sms.js":
/*!****************************************!*\
  !*** ./resources/assets/js/sms/sms.js ***!
  \****************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadSmsAddFunction);
function loadSmsAddFunction() {
  if (!$('#smsUrl').length) {
    return;
  }
  $('#smsMessageId').keypress(function (e) {
    var tval = $('#smsMessageId').val(),
      tlength = tval.length,
      set = 160,
      remain = parseInt(set - tlength);
    if (remain <= 0 && e.which !== 0 && e.charCode !== 0) {
      $('#smsMessageId').val(tval.substring(0, tlength - 1));
      displayErrorMessage('The message may not be greater than 160 characters.');
    }
  });
  $('.mySmsClass').hide();
  $('#smsPhoneNumber').prop('required', false);
}
function hide() {
  $('.mySmsClass').hide();
  $('.role').show();
  $('.send').show();
}
function renderSmsData(id) {
  $.ajax({
    url: $('#SMSShowModal').val() + '/' + id,
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#showSmsSend_to').text(result.data.user ? result.data.user.full_name : 'N/A');
        $('#showSmsUser_role').text(result.data.user ? result.data.user.roles[0].name : 'N/A');
        $('#showSms_phone').text(result.data.phone_number);
        $('#showSmsSend_by').text(result.data.send_by ? result.data.send_by.full_name : 'N/A');
        $('#showSms_message').text(result.data.message);
        moment.locale($('#smsLanguage').val());
        $('#showSms_date').text(moment(result.data.created_at).fromNow());
        $('#showSmsUpdated_on').text(moment(result.data.updated_at).fromNow());
        setValueOfEmptySpan();
        $('#showSms').appendTo('body').modal('show');
      }
    },
    error: function error(result) {
      displayErrorMessage(result.responseJSON.message);
    }
  });
}
listenClick('.smsNumber', function () {
  if ($('.smsNumber').is(':checked')) {
    $('.mySmsClass').show();
    $('.smsNumber').attr('value', 1);
    $('.role').hide();
    $('#smsRoleId').prop('required', false);
    $('.send').hide();
    $('#smsUserId').prop('required', false);
    $('#smsPhoneNumber').attr('required');
    $('#smsPhoneNumber').prop('required', true);
  } else {
    $('#smsPhoneNumber').prop('required', false);
    hide();
  }
});
listenHiddenBsModal('#AddSmsModal', function () {
  resetModalForm('#addSmsForm', '#smsValidationErrorsBox');
  $('#smsUserId').val('').trigger('change.select2');
  $('#smsRoleId').val('').trigger('change.select2');
  $('.valid-msg').addClass('hide');
  hide();
});
listenShownBsModal('#AddSmsModal', function () {
  $('#smsUserId,#smsRoleId').select2({
    width: '100%',
    dropdownParent: $('#AddSmsModal')
  });
});
listenChange('#smsRoleId', function () {
  if ($(this).val() !== '') {
    $.ajax({
      url: $('#getUsersListUrl').val(),
      type: 'get',
      dataType: 'json',
      data: {
        id: $(this).val()
      },
      success: function success(data) {
        $('#smsUserId').empty();
        $('#smsUserId').removeAttr('disabled');
        $.each(data.data, function (i, v) {
          $('#smsUserId').append($('<option></option>').attr('value', i).text(v));
        });
      }
    });
  }
  $('#smsUserId').empty();
  $('#smsUserId').prop('disabled', true);
});
listen('click', '.show-sms-btn', function (event) {
  event.preventDefault();
  var smsId = $(event.currentTarget).attr('data-id');
  renderSmsData(smsId);
});
listen('submit', '#addSmsForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#smsBtnSave');
  loadingButton.button('loading');
  if ($('#smsNumber').is(':checked')) {
    $('#smsRoleId').remove();
    $('#smsUserId').remove();
  }
  $.ajax({
    url: $('#createSmsUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#AddSmsModal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      displayErrorMessage('Please set your credential');
      $('#AddSmsModal').modal('hide');
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listen('click', '.delete-sms-btn', function (event) {
  var id = $(event.currentTarget).attr('data-id');
  deleteItem($('#smsUrl').val() + '/' + id, '', $('#SMS').val());
});

/***/ }),

/***/ "./resources/assets/js/testimonials/testimonial.js":
/*!*********************************************************!*\
  !*** ./resources/assets/js/testimonials/testimonial.js ***!
  \*********************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadTestimonialData);
function loadTestimonialData() {
  if (!$('#indexTestimonialUrl').length) {
    return;
  }
  $('.testimonialDescription').attr('maxlength', 150);
}
function renderTestimonialData(id) {
  $.ajax({
    url: $('#indexTestimonialUrl').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var ext = result.data.document_url.split('.').pop().toLowerCase();
        if (ext == '') {
          $('#editTestimonialPreviewImage').css('background-image', 'url("' + result.data.document_url + '")');
        } else {
          $('#editTestimonialPreviewImage').css('background-image', 'url("' + result.data.document_url + '")');
        }
        $('#testimonialId').val(result.data.id);
        $('#editTestimonialName').val(result.data.name);
        $('#editTestimonialDescription').val(result.data.description);
        if (isEmpty(result.data.document_url)) {
          $('#testimonialDocumentUrl').hide();
          $('.btn-view').hide();
        } else {
          $('#testimonialDocumentUrl').show();
          $('.btn-view').show();
          $('#testimonialDocumentUrl').attr('href', result.data.document_url);
        }
        $('#edit_testimonials').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
function isValidTestimonialDocument(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['png', 'jpg', 'jpeg']) == -1) {
    $(inputSelector).val('');
    $(validationMessageSelector).html($('#indexTestimonialProfileError').val()).removeClass('d-none');
    return false;
  }
  $(validationMessageSelector).html($('#indexTestimonialProfileError').val()).addClass('d-none');
  return ext;
}
listenSubmit('#addTestimonialForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#testimonialSave');
  loadingButton.button('loading');
  var formData = new FormData($(this)[0]);
  $.ajax({
    url: $('#indexTestimonialCreateUrl').val(),
    type: 'POST',
    dataType: 'json',
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_testimonials').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      printErrorMessage('#testimonialErrorsBox', result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listen('click', '.edit-testimonial-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var testimonialId = $(event.currentTarget).attr('data-id');
  renderTestimonialData(testimonialId);
});
listenKeyup('.testimonialDescription', function () {
  $('.description').attr('maxlength', 150);
});
listenSubmit('#editTestimonialForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editTestimonialSave');
  loadingButton.button('loading');
  var id = $('#testimonialId').val();
  var formData = new FormData($(this)[0]);
  $.ajax({
    url: $('#indexTestimonialUrl').val() + '/' + id,
    type: 'post',
    data: formData,
    processData: false,
    contentType: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_testimonials').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#add_testimonials', function () {
  resetModalForm('#addTestimonialForm', '#add_testimonials #testimonialErrorsBox');
  $('#testimonialPreviewImage').attr('src', $('#indexTestimonialDefaultDocumentImageUrl').val()).css('background-image', "url(".concat($('#indexTestimonialDefaultDocumentImageUrl').val(), ")"));
});
listenShownBsModal('#add_testimonials', function () {
  $('#add_testimonials #testimonialErrorsBox').show();
  $('#add_testimonials #testimonialErrorsBox').addClass('d-none');
});
listenHiddenBsModal('#edit_testimonials', function () {
  resetModalForm('#editTestimonialForm', '#edit_testimonials #editTestimonialErrorsBox');
  $('.editTestimonialPreviewImage').attr('src', $('#indexTestimonialDefaultDocumentImageUrl').val()).css('background-image', "url(".concat($('#indexTestimonialDefaultDocumentImageUrl').val(), ")"));
});
listenShownBsModal('#edit_testimonials', function () {
  $('#edit_testimonials #editTestimonialErrorsBox').show();
  $('#edit_testimonials #editTestimonialErrorsBox').addClass('d-none');
});
listen('click', '.delete-testimonial-btn', function (event) {
  var testimonialId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexTestimonialUrl').val() + '/' + testimonialId, '', $('#Testimonial').val());
});

// listenChange('#testimonialProfile', function () {
//     let extension = isValidTestimonialDocument($(this), '#add_testimonials #testimonialErrorsBox');
//     if (!isEmpty(extension) && extension != false) {
//         displayDocument(this, '#testimonialPreviewImage', extension);
//     }
// });

// listenChange('#editTestimonialProfile', function () {
//     let extension = isValidTestimonialDocument($(this),
//         '#edit_testimonials #editTestimonialErrorsBox');
//     if (!isEmpty(extension) && extension != false) {
//         displayDocument(this, '#editTestimonialPreviewImage', extension);
//     }
// });

listen('click', '.view-testimonial-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var testimonialId = $(event.currentTarget).attr('data-id');
  $.ajax({
    url: $('#indexTestimonialUrl').val() + '/' + testimonialId,
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        $('#showTestimonialName').html('');
        $('#showTestimonialDescription').html('');
        $('#showTestimonialName').append(result.data.name);
        $('#showTestimonialDescription').append(result.data.description);
        $('#userProfilePicture').attr('src', result.data.document_url);
        $('#show_testimonials').appendTo('body').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
});

/***/ }),

/***/ "./resources/assets/js/turbo.js":
/*!**************************************!*\
  !*** ./resources/assets/js/turbo.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _hotwired_turbo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @hotwired/turbo */ "./node_modules/@hotwired/turbo/dist/turbo.es2017-esm.js");



window.Turbo = _hotwired_turbo__WEBPACK_IMPORTED_MODULE_0__;
_hotwired_turbo__WEBPACK_IMPORTED_MODULE_0__.start();
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_hotwired_turbo__WEBPACK_IMPORTED_MODULE_0__);

/***/ }),

/***/ "./resources/assets/js/user_profile/user_profile.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/user_profile/user_profile.js ***!
  \**********************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadUserProfileData);
function loadUserProfileData() {
  $('#language').select2({
    width: '100%',
    dropdownParent: $("#changeLanguageModal")
  });
}
window.renderProfileData = function () {
  $.ajax({
    url: $('.profileUrl').val(),
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var user = result.data;
        $('#editUserId').val(user.id);
        $('#firstName').val(user.first_name);
        $('#lastName').val(user.last_name);
        $('#email').val(user.email);
        $('#phone').val(user.phone);
        // $('#editPhoto').attr('src', user.image_url);
        $('#editPhoto').css('background-image', 'url("' + user.image_url + '")');
        $('#editProfileModal').modal('show');
      }
    }
  });
};
window.displayProfilePhoto = function (input, selector) {
  var displayPreview = true;
  if (input.files && input.files[0]) {
    var reader = new FileReader();
    reader.onload = function (e) {
      var image = new Image();
      image.src = e.target.result;
      image.onload = function () {
        $(selector).attr('src', e.target.result);
        displayPreview = true;
      };
    };
    if (displayPreview) {
      reader.readAsDataURL(input.files[0]);
      $(selector).show();
    }
  }
};
listenSubmit('#changePasswordForm', function (event) {
  event.preventDefault();
  var isValidate = validateUserPassword();
  if (!isValidate) {
    return false;
  }
  var loadingButton = jQuery(this).find('#btnPrPasswordEditSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('.changePasswordUrl').val(),
    type: 'post',
    data: new FormData($(this)[0]),
    processData: false,
    contentType: false,
    success: function success(result) {
      if (result.success) {
        $('#changePasswordModal').modal('hide');
        displaySuccessMessage(result.message);
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
function validateUserPassword() {
  var currentPassword = $('#pfCurrentPassword').val().trim();
  var password = $('#pfNewPassword').val().trim();
  var confirmPassword = $('#pfNewConfirmPassword').val().trim();
  if (currentPassword == '' || password == '' || confirmPassword == '') {
    $('#editPasswordValidationErrorsBox').show().html('Please fill all the required fields.');
    return false;
  }
  return true;
}
listenSubmit('#editProfileForm', function (event) {
  event.preventDefault();
  if ($('.error-msg').text() !== '') {
    $('.phoneNumber').focus();
    return false;
  }
  var loadingButton = jQuery(this).find('#btnPrEditSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('.profileUpdateUrl').val(),
    type: 'post',
    data: new FormData($(this)[0]),
    processData: false,
    contentType: false,
    success: function success(result) {
      displaySuccessMessage(result.message);
      $('#editProfileModal').modal('hide');
      setTimeout(function () {
        location.reload();
      }, 2000);
    },
    error: function error(result) {
      manageAjaxErrors(result, 'editProfileValidationErrorsBox');
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenSubmit('#changeLanguageForm', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnLanguageChange');
  loadingButton.button('loading');
  $.ajax({
    url: $('.updateLanguageURL').val(),
    type: 'post',
    data: new FormData($(this)[0]),
    processData: false,
    contentType: false,
    success: function success(result) {
      displaySuccessMessage(result.message);
      setTimeout(function () {
        location.reload();
      }, 2000);
    },
    error: function error(result) {
      manageAjaxErrors(result, 'editProfileValidationErrorsBox');
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenHiddenBsModal('#editProfileModal', function () {
  resetModalForm('#editProfileForm', '#editProfileValidationErrorsBox');
  $('#change-btn').show();
});

// open edit user profile model
listenClick('.editProfile', function (event) {
  var userId = $(event.currentTarget).attr('data-id');
  renderProfileData();
});
listenChange('#profileImage', function () {
  var ext = $(this).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['gif', 'png', 'jpg', 'jpeg']) == -1) {
    $(this).val('');
    // $('#editProfileValidationErrorsBox').html('The profile image must be a file of type: jpeg, jpg, png.').show();
    displayErrorMessage('The profile image must be a file of type: jpeg, jpg, png.');
  } else {
    displayProfilePhoto(this, '#editPhoto');
  }
  $('#change-btn').hide();
});
listenClick('.changeType', function (e) {
  var inputField = $(this).parent().siblings();
  var oldType = inputField.attr('type');
  if (oldType == 'password') {
    $(this).children().addClass('icon-eye');
    $(this).children().removeClass('icon-ban');
    inputField.attr('type', 'text');
  } else {
    $(this).children().removeClass('icon-eye');
    $(this).children().addClass('icon-ban');
    inputField.attr('type', 'password');
  }
});
listenHiddenBsModal('#changePasswordModal', function () {
  resetModalForm('#changePasswordForm', '#editPasswordValidationErrorsBox');
});
listenHiddenBsModal('#changeLanguageModal', function () {
  $('#language').val($('.userCurrentLanguage').val()).trigger('change.select2');
});
listenClick('.remove-profile-image', function () {
  defaultImagePreview('#editPhoto', 1);
});

/***/ }),

/***/ "./resources/assets/js/users/create-edit.js":
/*!**************************************************!*\
  !*** ./resources/assets/js/users/create-edit.js ***!
  \**************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadUserCreateEdit);
function loadUserCreateEdit() {
  if (!$('#userDob').length) {
    return;
  }
  $('#userDob').flatpickr({
    maxDate: new Date(),
    locale: $('.userCurrentLanguage').val()
  });
}
listen('submit', '#createUserForm, #editUserForm', function () {
  $('#userBtnSave').attr('disabled', true);
});
listenKeyup('#userFacebookUrl', function () {
  this.value = this.value.toLowerCase();
});
listenKeyup('#userTwitterUrl', function () {
  this.value = this.value.toLowerCase();
});
listenKeyup('#userInstagramUrl', function () {
  this.value = this.value.toLowerCase();
});
listenKeyup('#userLinkedInUrl', function () {
  this.value = this.value.toLowerCase();
});
listenSubmit('#createUserForm, #editUserForm', function () {
  if ($('.error-msg').text() !== '') {
    $('#userPhoneNumber').focus();
    return false;
  }
  var facebookUrl = $('#userFacebookUrl').val();
  var twitterUrl = $('#userTwitterUrl').val();
  var instagramUrl = $('#userInstagramUrl').val();
  var linkedInUrl = $('#userLinkedInUrl').val();
  var facebookExp = new RegExp(/^(https?:\/\/)?((m{1}\.)?)?((w{2,3}\.)?)facebook.[a-z]{2,3}\/?.*/i);
  var twitterExp = new RegExp(/^(https?:\/\/)?((m{1}\.)?)?((w{2,3}\.)?)twitter\.[a-z]{2,3}\/?.*/i);
  var instagramUrlExp = new RegExp(/^(https?:\/\/)?((w{2,3}\.)?)instagram.[a-z]{2,3}\/?.*/i);
  var linkedInExp = new RegExp(/^(https?:\/\/)?((w{2,3}\.)?)linkedin\.[a-z]{2,3}\/?.*/i);
  var facebookCheck = facebookUrl == '' ? true : facebookUrl.match(facebookExp) ? true : false;
  if (!facebookCheck) {
    displayErrorMessage('Please enter a valid Facebook URL');
    $('#userBtnSave').attr('disabled', false);
    return false;
  }
  var twitterCheck = twitterUrl == '' ? true : twitterUrl.match(twitterExp) ? true : false;
  if (!twitterCheck) {
    displayErrorMessage('Please enter a valid Twitter URL');
    $('#userBtnSave').attr('disabled', false);
    return false;
  }
  var instagramCheck = instagramUrl == '' ? true : instagramUrl.match(instagramUrlExp) ? true : false;
  if (!instagramCheck) {
    displayErrorMessage('Please enter a valid Instagram URL');
    $('#userBtnSave').attr('disabled', false);
    return false;
  }
  var linkedInCheck = linkedInUrl == '' ? true : linkedInUrl.match(linkedInExp) ? true : false;
  if (!linkedInCheck) {
    displayErrorMessage('Please enter a valid Linkedin URL');
    $('#userBtnSave').attr('disabled', false);
    return false;
  }
});
listen('keyup keypress', '#createUserForm, #editUserForm', function (e) {
  var keyCode = e.keyCode || e.which;
  if (keyCode === 13) {
    e.preventDefault();
    return false;
  }
});
listen('change', '#userProfileImage', function () {
  var extension = isValidUsersDocument($(this), '#userValidationErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#userValidationErrorsBox').html('').hide();
    displayDocument(this, '#userPreviewImage', extension);
  } else {
    $(this).val('');
    $('#userValidationErrorsBox').removeClass('d-none hide');
    $('#userValidationErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=userValidationErrorsBox]').focus();
    $("html, body").animate({
      scrollTop: "0"
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
function isValidUsersDocument(inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx']) == -1) {
    return false;
  }
  $(validationMessageSelector).addClass('d-none');
  $('#userBtnSave').attr('disabled', false);
  return ext;
}
listen('click', '.remove-users-image', function () {
  defaultImagePreview('#userPreviewImage', 1);
});

/***/ }),

/***/ "./resources/assets/js/users/user.js":
/*!*******************************************!*\
  !*** ./resources/assets/js/users/user.js ***!
  \*******************************************/
/***/ (() => {

listen('click', '.user-delete-btn', function (event) {
  var userId = $(event.currentTarget).attr('data-id');
  deleteItem($('#indexUserUrl').val() + '/' + userId, '', Lang.get('messages.user.usrs'));
});
listen('change', '.user-status', function (event) {
  var userId = $(event.currentTarget).attr('data-id');
  updateUserStatus(userId);
});
listen('click', '.show-user-btn', function (event) {
  event.preventDefault();
  var userId = $(event.currentTarget).attr('data-id');
  renderUserData(userId);
});
function renderUserData(id) {
  $.ajax({
    url: $('#usersShowModal').val() + '/' + id,
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var _result$data$phone;
        $('#showUserFirst_name').text(result.data.first_name);
        $('#showUserLast_name').text(result.data.last_name);
        $('#showUserEmail').text(result.data.email);
        $('#showUserRole').text(result.data.roles[0].name);
        $('#showUserPhone').text((_result$data$phone = result.data.phone) !== null && _result$data$phone !== void 0 ? _result$data$phone : 'N/A');
        $('#showUserGender').text(result.data.gender_string);
        $('#showUserDob').text('');
        if (result.data.dob != null) $('#showUserDob').text(moment(result.data.dob).format('Mo MMM, YYYY'));
        $('#showUserStatus').empty();
        var active = $('#userActive').val();
        var deActive = $('#userDeActive').val();
        if (result.data.status == 1) {
          $('#showUserStatus').append('<span class="badge bg-light-success">' + active + '</span>');
        } else {
          $('#showUserStatus').append('<span class="badge bg-light-danger">' + deActive + '</span>');
        }
        moment.locale($('#userLanguage').val());
        $('#showUserCreated_on').text(moment(result.data.created_at).fromNow());
        $('#showUserUpdated_on').text(moment(result.data.updated_at).fromNow());
        $('#showUserProfilePicture').attr('src', result.data.image_url);
        setValueOfEmptySpan();
        $('#showUser').appendTo('body').modal('show');
      }
    },
    error: function error(result) {
      displayErrorMessage(result.responseJSON.message);
    }
  });
}
;
function updateUserStatus(id) {
  $.ajax({
    url: $('#indexUserUrl').val() + '/' + id + '/active-deactive',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        livewire.emit('refresh');
      }
    }
  });
}
;
listen('change', '.is-user-verified', function (event) {
  var userId = $(event.currentTarget).attr('data-id');
  $.ajax({
    url: $('#indexUserUrl').val() + '/' + userId + '/is-verified',
    method: 'post',
    cache: false,
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        livewire.emit('refresh');
      }
    }
  });
});
listenChange('#usersStatusArr', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});
listenChange('#userRoleArr', function () {
  window.livewire.emit('changeRoleFilter', 'roleFilter', $(this).val());
});
listenClick('#userResetFilter', function () {
  $('#userRoleArr').val(0).trigger('change');
  $('#usersStatusArr').val(0).trigger('change');
  hideDropdownManually($('#userFilterButton'), $('.dropdown-menu'));
});

/***/ }),

/***/ "./resources/assets/js/vaccinated_patients/patient_vaccinated.js":
/*!***********************************************************************!*\
  !*** ./resources/assets/js/vaccinated_patients/patient_vaccinated.js ***!
  \***********************************************************************/
/***/ (() => {



/***/ }),

/***/ "./resources/assets/js/vaccinated_patients/vaccinated_patients.js":
/*!************************************************************************!*\
  !*** ./resources/assets/js/vaccinated_patients/vaccinated_patients.js ***!
  \************************************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadVaccinatedPatientDate);
function loadVaccinatedPatientDate() {
  if (!$('#vPatientDoesGivenDate').length && !$('#editVPatientDoesGivenDate').length) {
    return;
  }
  var doesDatePicker = $('#vPatientDoesGivenDate,#editVPatientDoesGivenDate').flatpickr({
    enableTime: true,
    defaultDate: new Date(),
    dateFormat: 'Y-m-d H:i',
    locale: $('.userCurrentLanguage').val()
  });
  listenShownBsModal('#add_vaccinated_patient_modal', function () {
    $('#vPatientName,#vPatientVaccinationName').select2({
      width: '100%',
      dropdownParent: $('#add_vaccinated_patient_modal')
    });
  });
  listenShownBsModal('#edit_vaccinated_patient_modal', function () {
    $('#editVPatientName,#editVPatientVaccinationName').select2({
      width: '100%',
      dropdownParent: $('#edit_vaccinated_patient_modal')
    });
  });
}
listenShownBsModal('#add_vaccinated_patient_modal', function () {
  // doesDatePicker.set('minDate', new Date());
  $('#vPatientDoesGivenDate').val(moment().format('YYYY-MM-DD HH:mm'));
});
listenSubmit('#add_vaccinated_patient_form', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#vPatientBtnSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#vaccinatedPatientsStore').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_vaccinated_patient_modal').modal('hide');
        livewire.emit('refresh');
        setTimeout(function () {
          loadingButton.button('reset');
        }, 2500);
      }
    },
    error: function error(result) {
      printErrorMessage('#vPatientValidationErrorsBox', result);
      setTimeout(function () {
        loadingButton.button('reset');
      }, 2000);
    }
  });
});
listenHiddenBsModal('#add_vaccinated_patient_modal', function () {
  $('#vPatientPatientName').val('').trigger('change');
  $('#vPatientVaccinationName').val('').trigger('change');
  resetModalForm('#add_vaccinated_patient_form', '#vPatientValidationErrorsBox');
});
listenClick('.edit-vaccinatedPatient-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var vaccinatedPatientId = $(event.currentTarget).attr('data-id');
  renderVaccinatedPatientData(vaccinatedPatientId);
});
window.renderVaccinatedPatientData = function (id) {
  $.ajax({
    url: $('#vaccinatedPatientsIndex').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var vaccinatedPatient = result.data;
        $('#editVPatientId').val(vaccinatedPatient.id);
        $('#editVPatientName').val(vaccinatedPatient.patient_id).trigger('change.select2');
        $('#editVPatientVaccinationName').val(vaccinatedPatient.vaccination_id).trigger('change.select2');
        $('#editVPatientSerialNo').val(vaccinatedPatient.vaccination_serial_number);
        $('#editVPatientDoseNumber').val(vaccinatedPatient.dose_number);
        $('#editVPatientDoesGivenDate').val(moment(vaccinatedPatient.dose_given_date).utc().format('YYYY-MM-DD HH:mm:ss'));
        $('#editVPatientDescription').val(vaccinatedPatient.description);
        $('#edit_vaccinated_patient_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
};
listenSubmit('#edit_vaccinated_patient_form', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#editVPatientBtnSave');
  loadingButton.button('loading');
  var editTimeVaccinatedPatientId = $('#editVPatientId').val();
  $.ajax({
    url: $('#vaccinatedPatientsIndex').val() + '/' + editTimeVaccinatedPatientId + '/update',
    type: 'post',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_vaccinated_patient_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenClick('.delete-vaccinatedPatient-btn', function (event) {
  var vaccinatedPatientId = $(event.currentTarget).attr('data-id');
  deleteItem($('#vaccinatedPatientsIndex').val() + '/' + vaccinatedPatientId, '', $('#vaccinatedPatient').val());
});

/***/ }),

/***/ "./resources/assets/js/vaccinations/vaccinations.js":
/*!**********************************************************!*\
  !*** ./resources/assets/js/vaccinations/vaccinations.js ***!
  \**********************************************************/
/***/ (() => {

listenSubmit('#add_vaccinations_form', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#vaccinationBtnSave');
  loadingButton.button('loading');
  $.ajax({
    url: $('#vaccination_createUrl').val(),
    type: 'POST',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#add_vaccinations_modal').modal('hide');
        livewire.emit('refresh');
        setTimeout(function () {
          loadingButton.button('reset');
        }, 2500);
      }
    },
    error: function error(result) {
      printErrorMessage('#createValidationErrorsBox', result);
      setTimeout(function () {
        loadingButton.button('reset');
      }, 2000);
    }
  });
});
listenHiddenBsModal('#add_vaccinations_modal', function () {
  resetModalForm('#add_vaccinations_form', '#createValidationErrorsBox');
});
listenClick('.edit-vaccinations-btn', function (event) {
  if ($('.ajaxCallIsRunning').val()) {
    return;
  }
  ajaxCallInProgress();
  var vaccinationId = $(event.currentTarget).attr('data-id');
  renderVaccinationData(vaccinationId);
});
function renderVaccinationData(id) {
  $.ajax({
    url: $('#vaccination_url').val() + '/' + id + '/edit',
    type: 'GET',
    success: function success(result) {
      if (result.success) {
        var vaccination = result.data;
        $('#vaccinationId').val(vaccination.id);
        $('#editVaccinationName').val(vaccination.name);
        $('#editVaccinationManufacturedBy').val(vaccination.manufactured_by);
        $('#editVaccinationBrand').val(vaccination.brand);
        $('#edit_vaccinations_modal').modal('show');
        ajaxCallCompleted();
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    }
  });
}
listenSubmit('#edit_vaccinations_form', function (event) {
  event.preventDefault();
  var loadingButton = jQuery(this).find('#btnEditVaccinationSave');
  loadingButton.button('loading');
  var id = $('#vaccinationId').val();
  $.ajax({
    url: $('#vaccination_url').val() + '/' + id + '/update',
    type: 'post',
    data: $(this).serialize(),
    success: function success(result) {
      if (result.success) {
        displaySuccessMessage(result.message);
        $('#edit_vaccinations_modal').modal('hide');
        livewire.emit('refresh');
      }
    },
    error: function error(result) {
      manageAjaxErrors(result);
    },
    complete: function complete() {
      loadingButton.button('reset');
    }
  });
});
listenClick('.delete-vaccination-btn', function (event) {
  var vaccinationId = $(event.currentTarget).attr('data-id');
  deleteItem($('#vaccination_url').val() + '/' + vaccinationId, '', $('#Vaccination').val());
});

/***/ }),

/***/ "./resources/assets/js/visitors/create-edit.js":
/*!*****************************************************!*\
  !*** ./resources/assets/js/visitors/create-edit.js ***!
  \*****************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadVisitorFlatpickrData);
function loadVisitorFlatpickrData() {
  loadVisitorDate();
  loadVisitorOutTime();
}
function loadVisitorDate() {
  if (!$('#visitorDate').length) {
    return;
  }
  $('#visitorDate').flatpickr({
    format: 'YYYY-MM-DD',
    useCurrent: true,
    sideBySide: true,
    locale: $('.userCurrentLanguage').val()
  });
}
function loadVisitorOutTime() {
  if (!$('#visitorOutTime').length) {
    return;
  }
  $('#visitorInTime,#visitorOutTime').flatpickr({
    enableTime: true,
    enableSeconds: true,
    noCalendar: true,
    dateFormat: 'H:i:S',
    locale: $('.userCurrentLanguage').val()
  });
  $('#visitorOutTime').flatpickr({
    enableTime: true,
    enableSeconds: true,
    noCalendar: true,
    dateFormat: 'H:i:S',
    minTime: moment(new Date()).format('HH:mm:ss'),
    locale: $('.userCurrentLanguage').val()
  });
  $('#visitorPurpose').select2({
    width: '100%'
  });
}
listenSubmit('#createVisitorForm, #editVisitorForm', function () {
  if ($('.error-msg').text() !== '') {
    $('#visitorPhoneNumber').focus();
    return false;
  }
});
listen('keyup keypress', '#createVisitorForm, #editVisitorForm', function (e) {
  var keyCode = e.keyCode || e.which;
  if (keyCode === 13) {
    e.preventDefault();
    return false;
  }
});
$('#visitorInTime').on('dp.change', function (e) {
  $('#visitorOutTime').data('flatpickr').minTime(e.time);
});
listenChange('#visitorAttachment', function () {
  var extension = isValidVisitorDocument($(this), '#visitorErrorsBox');
  if (!isEmpty(extension) && extension != false) {
    $('#visitorErrorsBox').html('').hide();
    displayDocument(this, '#visitorPreviewImage', extension);
    $('#visitorSave').attr('disabled', false);
  } else {
    $(this).val('');
    $('#visitorErrorsBox').removeClass('d-none hide');
    $('#visitorErrorsBox').text('The image must be a file of type: jpg, jpeg, png.').show();
    $('[id=visitorErrorsBox]').focus();
    $('html, body').animate({
      scrollTop: '0'
    }, 500);
    $('.alert').delay(5000).slideUp(300);
  }
});
window.isValidVisitorDocument = function (inputSelector, validationMessageSelector) {
  var ext = $(inputSelector).val().split('.').pop().toLowerCase();
  if ($.inArray(ext, ['png', 'jpg', 'jpeg', 'pdf', 'doc', 'docx']) == -1) {
    return false;
  }
  $(validationMessageSelector).addClass('d-none');
  return ext;
};
listenClick('.visitor-remove-image', function () {
  defaultImagePreview('#visitorPreviewImage');
});

/***/ }),

/***/ "./resources/assets/js/visitors/visitor.js":
/*!*************************************************!*\
  !*** ./resources/assets/js/visitors/visitor.js ***!
  \*************************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadVisitorData);
function loadVisitorData() {
  if (!$('#purposeArr').length) {
    return;
  }
  $('#purposeArr').select2({
    width: '100%'
  });
}
listenClick('.delete-visitor-btn', function (event) {
  var visitorId = $(event.currentTarget).attr('data-id');
  deleteItem($('.visitorUrl').val() + '/' + visitorId, '', $('#Visitor').val());
});
listenClick('#visitorResetFilter', function () {
  $('#visitorsHead').val(0).trigger('change');
  hideDropdownManually($('#visitorsFilterBtn'), $('.dropdown-menu'));
});
listenChange('#visitorsHead', function () {
  window.livewire.emit('changeFilter', 'statusFilter', $(this).val());
});

/***/ }),

/***/ "./resources/assets/js/web/plugin.js":
/*!*******************************************!*\
  !*** ./resources/assets/js/web/plugin.js ***!
  \*******************************************/
/***/ (() => {

document.addEventListener('turbo:load', loadPluginLightGallery);
function loadPluginLightGallery() {
  if (!$('.lightGallery').length) {
    return;
  }
  $('.lightgallery').lightGallery({
    mode: 'lg-slide-circular',
    counter: false
  });
}

/***/ }),

/***/ "./node_modules/jsrender/jsrender.js":
/*!*******************************************!*\
  !*** ./node_modules/jsrender/jsrender.js ***!
  \*******************************************/
/***/ ((module) => {

/*! JsRender v1.0.13: http://jsviews.com/#jsrender */
/*! **VERSION FOR WEB** (For NODE.JS see http://jsviews.com/download/jsrender-node.js) */
/*
 * Best-of-breed templating in browser or on Node.js.
 * Does not require jQuery, or HTML DOM
 * Integrates with JsViews (http://jsviews.com/#jsviews)
 *
 * Copyright 2021, Boris Moore
 * Released under the MIT License.
 */

//jshint -W018, -W041, -W120

(function(factory, global) {
	// global var is the this object, which is window when running in the usual browser environment
	var $ = global.jQuery;

	if (true) { // CommonJS e.g. Browserify
		module.exports = $
			? factory(global, $)
			: function($) { // If no global jQuery, take optional jQuery passed as parameter: require('jsrender')(jQuery)
				if ($ && !$.fn) {
					throw "Provide jQuery or null";
				}
				return factory(global, $);
			};
	} else {}
} (

// factory (for jsrender.js)
function(global, $) {
"use strict";

//========================== Top-level vars ==========================

// global var is the this object, which is window when running in the usual browser environment
var setGlobals = $ === false; // Only set globals if script block in browser (not AMD and not CommonJS)

$ = $ && $.fn ? $ : global.jQuery; // $ is jQuery passed in by CommonJS loader (Browserify), or global jQuery.

var versionNumber = "v1.0.13",
	jsvStoreName, rTag, rTmplString, topView, $views, $expando,
	_ocp = "_ocp",      // Observable contextual parameter

	$isFunction, $isArray, $templates, $converters, $helpers, $tags, $sub, $subSettings, $subSettingsAdvanced, $viewsSettings,
	delimOpenChar0, delimOpenChar1, delimCloseChar0, delimCloseChar1, linkChar, setting, baseOnError,

	isRenderCall,
	rNewLine = /[ \t]*(\r\n|\n|\r)/g,
	rUnescapeQuotes = /\\(['"\\])/g, // Unescape quotes and trim
	rEscapeQuotes = /['"\\]/g, // Escape quotes and \ character
	rBuildHash = /(?:\x08|^)(onerror:)?(?:(~?)(([\w$.]+):)?([^\x08]+))\x08(,)?([^\x08]+)/gi,
	rTestElseIf = /^if\s/,
	rFirstElem = /<(\w+)[>\s]/,
	rAttrEncode = /[\x00`><"'&=]/g, // Includes > encoding since rConvertMarkers in JsViews does not skip > characters in attribute strings
	rIsHtml = /[\x00`><\"'&=]/,
	rHasHandlers = /^on[A-Z]|^convert(Back)?$/,
	rWrappedInViewMarker = /^\#\d+_`[\s\S]*\/\d+_`$/,
	rHtmlEncode = rAttrEncode,
	rDataEncode = /[&<>]/g,
	rDataUnencode = /&(amp|gt|lt);/g,
	rBracketQuote = /\[['"]?|['"]?\]/g,
	viewId = 0,
	charEntities = {
		"&": "&amp;",
		"<": "&lt;",
		">": "&gt;",
		"\x00": "&#0;",
		"'": "&#39;",
		'"': "&#34;",
		"`": "&#96;",
		"=": "&#61;"
	},
	charsFromEntities = {
		amp: "&",
		gt: ">",
		lt: "<"
	},
	HTML = "html",
	STRING = "string",
	OBJECT = "object",
	tmplAttr = "data-jsv-tmpl",
	jsvTmpl = "jsvTmpl",
	indexStr = "For #index in nested block use #getIndex().",
	cpFnStore = {},     // Compiled furnctions for computed values in template expressions (properties, methods, helpers)
	$render = {},

	jsr = global.jsrender,
	jsrToJq = jsr && $ && !$.render, // JsRender already loaded, without jQuery. but we will re-load it now to attach to jQuery

	jsvStores = {
		template: {
			compile: compileTmpl
		},
		tag: {
			compile: compileTag
		},
		viewModel: {
			compile: compileViewModel
		},
		helper: {},
		converter: {}
	};

	// views object ($.views if jQuery is loaded, jsrender.views if no jQuery, e.g. in Node.js)
	$views = {
		jsviews: versionNumber,
		sub: {
			// subscription, e.g. JsViews integration
			rPath: /^(!*?)(?:null|true|false|\d[\d.]*|([\w$]+|\.|~([\w$]+)|#(view|([\w$]+))?)([\w$.^]*?)(?:[.[^]([\w$]+)\]?)?)$/g,
			//        not                               object     helper    view  viewProperty pathTokens      leafToken

			rPrm: /(\()(?=\s*\()|(?:([([])\s*)?(?:(\^?)(~?[\w$.^]+)?\s*((\+\+|--)|\+|-|~(?![\w$])|&&|\|\||===|!==|==|!=|<=|>=|[<>%*:?\/]|(=))\s*|(!*?(@)?[#~]?[\w$.^]+)([([])?)|(,\s*)|(?:(\()\s*)?\\?(?:(')|("))|(?:\s*(([)\]])(?=[.^]|\s*$|[^([])|[)\]])([([]?))|(\s+)/g,
			//   lftPrn0           lftPrn         bound     path               operator     err                                          eq      path2 late            prn      comma  lftPrn2          apos quot        rtPrn  rtPrnDot                  prn2     space

			View: View,
			Err: JsViewsError,
			tmplFn: tmplFn,
			parse: parseParams,
			extend: $extend,
			extendCtx: extendCtx,
			syntaxErr: syntaxError,
			onStore: {
				template: function(name, item) {
					if (item === null) {
						delete $render[name];
					} else if (name) {
						$render[name] = item;
					}
				}
			},
			addSetting: addSetting,
			settings: {
				allowCode: false
			},
			advSet: noop, // Update advanced settings
			_thp: tagHandlersFromProps,
			_gm: getMethod,
			_tg: function() {}, // Constructor for tagDef
			_cnvt: convertVal,
			_tag: renderTag,
			_er: error,
			_err: onRenderError,
			_cp: retVal, // Get observable contextual parameters (or properties) ~foo=expr. In JsRender, simply returns val.
			_sq: function(token) {
				if (token === "constructor") {
					syntaxError("");
				}
				return token;
			}
		},
		settings: {
			delimiters: $viewsDelimiters,
			advanced: function(value) {
				return value
					? (
							$extend($subSettingsAdvanced, value),
							$sub.advSet(),
							$viewsSettings
						)
						: $subSettingsAdvanced;
				}
		},
		map: dataMap // If jsObservable loaded first, use that definition of dataMap
	};

function getDerivedMethod(baseMethod, method) {
	return function() {
		var ret,
			tag = this,
			prevBase = tag.base;

		tag.base = baseMethod; // Within method call, calling this.base will call the base method
		ret = method.apply(tag, arguments); // Call the method
		tag.base = prevBase; // Replace this.base to be the base method of the previous call, for chained calls
		return ret;
	};
}

function getMethod(baseMethod, method) {
	// For derived methods (or handlers declared declaratively as in {{:foo onChange=~fooChanged}} replace by a derived method, to allow using this.base(...)
	// or this.baseApply(arguments) to call the base implementation. (Equivalent to this._super(...) and this._superApply(arguments) in jQuery UI)
	if ($isFunction(method)) {
		method = getDerivedMethod(
				!baseMethod
					? noop // no base method implementation, so use noop as base method
					: baseMethod._d
						? baseMethod // baseMethod is a derived method, so use it
						: getDerivedMethod(noop, baseMethod), // baseMethod is not derived so make its base method be the noop method
				method
			);
		method._d = (baseMethod && baseMethod._d || 0) + 1; // Add flag for derived method (incremented for derived of derived...)
	}
	return method;
}

function tagHandlersFromProps(tag, tagCtx) {
	var prop,
		props = tagCtx.props;
	for (prop in props) {
		if (rHasHandlers.test(prop) && !(tag[prop] && tag[prop].fix)) { // Don't override handlers with fix expando (used in datepicker and spinner)
			tag[prop] = prop !== "convert" ? getMethod(tag.constructor.prototype[prop], props[prop]) : props[prop];
			// Copy over the onFoo props, convert and convertBack from tagCtx.props to tag (overrides values in tagDef).
			// Note: unsupported scenario: if handlers are dynamically added ^onFoo=expression this will work, but dynamically removing will not work.
		}
	}
}

function retVal(val) {
	return val;
}

function noop() {
	return "";
}

function dbgBreak(val) {
	// Usage examples: {{dbg:...}}, {{:~dbg(...)}}, {{dbg .../}}, {^{for ... onAfterLink=~dbg}} etc.
	try {
		console.log("JsRender dbg breakpoint: " + val);
		throw "dbg breakpoint"; // To break here, stop on caught exceptions.
	}
	catch (e) {}
	return this.base ? this.baseApply(arguments) : val;
}

function JsViewsError(message) {
	// Error exception type for JsViews/JsRender
	// Override of $.views.sub.Error is possible
	this.name = ($.link ? "JsViews" : "JsRender") + " Error";
	this.message = message || this.name;
}

function $extend(target, source) {
	if (target) {
		for (var name in source) {
			target[name] = source[name];
		}
		return target;
	}
}

(JsViewsError.prototype = new Error()).constructor = JsViewsError;

//========================== Top-level functions ==========================

//===================
// views.delimiters
//===================

	/**
	* Set the tag opening and closing delimiters and 'link' character. Default is "{{", "}}" and "^"
	* openChars, closeChars: opening and closing strings, each with two characters
	* $.views.settings.delimiters(...)
	*
	* @param {string}   openChars
	* @param {string}   [closeChars]
	* @param {string}   [link]
	* @returns {Settings}
	*
	* Get delimiters
	* delimsArray = $.views.settings.delimiters()
	*
	* @returns {string[]}
	*/
function $viewsDelimiters(openChars, closeChars, link) {
	if (!openChars) {
		return $subSettings.delimiters;
	}
	if ($isArray(openChars)) {
		return $viewsDelimiters.apply($views, openChars);
	}
	linkChar = link ? link[0] : linkChar;
	if (!/^(\W|_){5}$/.test(openChars + closeChars + linkChar)) {
		error("Invalid delimiters"); // Must be non-word characters, and openChars and closeChars must each be length 2
	}
	delimOpenChar0 = openChars[0];
	delimOpenChar1 = openChars[1];
	delimCloseChar0 = closeChars[0];
	delimCloseChar1 = closeChars[1];

	$subSettings.delimiters = [delimOpenChar0 + delimOpenChar1, delimCloseChar0 + delimCloseChar1, linkChar];

	// Escape the characters - since they could be regex special characters
	openChars = "\\" + delimOpenChar0 + "(\\" + linkChar + ")?\\" + delimOpenChar1; // Default is "{^{"
	closeChars = "\\" + delimCloseChar0 + "\\" + delimCloseChar1;                   // Default is "}}"
	// Build regex with new delimiters
	//          [tag    (followed by / space or })  or cvtr+colon or html or code] followed by space+params then convertBack?
	rTag = "(?:(\\w+(?=[\\/\\s\\" + delimCloseChar0 + "]))|(\\w+)?(:)|(>)|(\\*))\\s*((?:[^\\"
		+ delimCloseChar0 + "]|\\" + delimCloseChar0 + "(?!\\" + delimCloseChar1 + "))*?)";

	// Make rTag available to JsViews (or other components) for parsing binding expressions
	$sub.rTag = "(?:" + rTag + ")";
	//                        { ^? {   tag+params slash?  or closingTag                                                   or comment
	rTag = new RegExp("(?:" + openChars + rTag + "(\\/)?|\\" + delimOpenChar0 + "(\\" + linkChar + ")?\\" + delimOpenChar1 + "(?:(?:\\/(\\w+))\\s*|!--[\\s\\S]*?--))" + closeChars, "g");

	// Default:  bind     tagName         cvt   cln html code    params            slash   bind2         closeBlk  comment
	//      /(?:{(\^)?{(?:(\w+(?=[\/\s}]))|(\w+)?(:)|(>)|(\*))\s*((?:[^}]|}(?!}))*?)(\/)?|{(\^)?{(?:(?:\/(\w+))\s*|!--[\s\S]*?--))}}

	$sub.rTmpl = new RegExp("^\\s|\\s$|<.*>|([^\\\\]|^)[{}]|" + openChars + ".*" + closeChars);
	// $sub.rTmpl looks for initial or final white space, html tags or { or } char not preceded by \\, or JsRender tags {{xxx}}.
	// Each of these strings are considered NOT to be jQuery selectors
	return $viewsSettings;
}

//=========
// View.get
//=========

function getView(inner, type) { //view.get(inner, type)
	if (!type && inner !== true) {
		// view.get(type)
		type = inner;
		inner = undefined;
	}

	var views, i, l, found,
		view = this,
		root = type === "root";
		// view.get("root") returns view.root, view.get() returns view.parent, view.get(true) returns view.views[0].

	if (inner) {
		// Go through views - this one, and all nested ones, depth-first - and return first one with given type.
		// If type is undefined, i.e. view.get(true), return first child view.
		found = type && view.type === type && view;
		if (!found) {
			views = view.views;
			if (view._.useKey) {
				for (i in views) {
					if (found = type ? views[i].get(inner, type) : views[i]) {
						break;
					}
				}
			} else {
				for (i = 0, l = views.length; !found && i < l; i++) {
					found = type ? views[i].get(inner, type) : views[i];
				}
			}
		}
	} else if (root) {
		// Find root view. (view whose parent is top view)
		found = view.root;
	} else if (type) {
		while (view && !found) {
			// Go through views - this one, and all parent ones - and return first one with given type.
			found = view.type === type ? view : undefined;
			view = view.parent;
		}
	} else {
		found = view.parent;
	}
	return found || undefined;
}

function getNestedIndex() {
	var view = this.get("item");
	return view ? view.index : undefined;
}

getNestedIndex.depends = function() {
	return [this.get("item"), "index"];
};

function getIndex() {
	return this.index;
}

getIndex.depends = "index";

//==================
// View.ctxPrm, etc.
//==================

/* Internal private: view._getOb() */
function getPathObject(ob, path, ltOb, fn) {
	// Iterate through path to late paths: @a.b.c paths
	// Return "" (or noop if leaf is a function @a.b.c(...) ) if intermediate object not yet available
	var prevOb, tokens, l,
		i = 0;
	if (ltOb === 1) {
		fn = 1;
		ltOb = undefined;
	}
	// Paths like ^a^b^c or ~^a^b^c will not throw if an object in path is undefined.
	if (path) {
		tokens = path.split(".");
		l = tokens.length;

		for (; ob && i < l; i++) {
			prevOb = ob;
			ob = tokens[i] ? ob[tokens[i]] : ob;
		}
	}
	if (ltOb) {
		ltOb.lt = ltOb.lt || i<l; // If i < l there was an object in the path not yet available
	}
	return ob === undefined
		? fn ? noop : ""
		: fn ? function() {
			return ob.apply(prevOb, arguments);
		} : ob;
}

function contextParameter(key, value, get) {
	// Helper method called as view.ctxPrm(key) for helpers or template parameters ~foo - from compiled template or from context callback
	var wrapped, deps, res, obsCtxPrm, tagElse, callView, newRes,
		storeView = this,
		isUpdate = !isRenderCall && arguments.length > 1,
		store = storeView.ctx;
	if (key) {
		if (!storeView._) { // tagCtx.ctxPrm() call
			tagElse = storeView.index;
			storeView = storeView.tag;
		}
		callView = storeView;
		if (store && store.hasOwnProperty(key) || (store = $helpers).hasOwnProperty(key)) {
			res = store[key];
			if (key === "tag" || key === "tagCtx" || key === "root" || key === "parentTags") {
				return res;
			}
		} else {
			store = undefined;
		}
		if (!isRenderCall && storeView.tagCtx || storeView.linked) { // Data-linked view, or tag instance
			if (!res || !res._cxp) {
				// Not a contextual parameter
				// Set storeView to tag (if this is a tag.ctxPrm() call) or to root view ("data" view of linked template)
				storeView = storeView.tagCtx || $isFunction(res)
					? storeView // Is a tag, not a view, or is a computed contextual parameter, so scope to the callView, no the 'scope view'
					: (storeView = storeView.scope || storeView,
						!storeView.isTop && storeView.ctx.tag // If this view is in a tag, set storeView to the tag
							|| storeView);
				if (res !== undefined && storeView.tagCtx) {
					// If storeView is a tag, but the contextual parameter has been set at at higher level (e.g. helpers)...
					storeView = storeView.tagCtx.view.scope; // then move storeView to the outer level (scope of tag container view)
				}
				store = storeView._ocps;
				res = store && store.hasOwnProperty(key) && store[key] || res;
				if (!(res && res._cxp) && (get || isUpdate)) {
					// Create observable contextual parameter
					(store || (storeView._ocps = storeView._ocps || {}))[key]
						= res
						= [{
							_ocp: res, // The observable contextual parameter value
							_vw: callView,
							_key: key
						}];
					res._cxp = {
						path: _ocp,
						ind: 0,
						updateValue: function(val, path) {
							$.observable(res[0]).setProperty(_ocp, val); // Set the value (res[0]._ocp)
							return this;
						}
					};
				}
			}
			if (obsCtxPrm = res && res._cxp) {
				// If this helper resource is an observable contextual parameter
				if (arguments.length > 2) {
					deps = res[1] ? $sub._ceo(res[1].deps) : [_ocp]; // fn deps (with any exprObs cloned using $sub._ceo)
					deps.unshift(res[0]); // view
					deps._cxp = obsCtxPrm;
					// In a context callback for a contextual param, we set get = true, to get ctxPrm [view, dependencies...] array - needed for observe call
					return deps;
				}
				tagElse = obsCtxPrm.tagElse;
				newRes = res[1] // linkFn for compiled expression
					? obsCtxPrm.tag && obsCtxPrm.tag.cvtArgs
						? obsCtxPrm.tag.cvtArgs(tagElse, 1)[obsCtxPrm.ind] // = tag.bndArgs() - for tag contextual parameter
						: res[1](res[0].data, res[0], $sub) // = fn(data, view, $sub) for compiled binding expression
					: res[0]._ocp; // Observable contextual parameter (uninitialized, or initialized as static expression, so no path dependencies)
				if (isUpdate) {
					$sub._ucp(key, value, storeView, obsCtxPrm); // Update observable contextual parameter
					return storeView;
				}
				res = newRes;
			}
		}
		if (res && $isFunction(res)) {
			// If a helper is of type function we will wrap it, so if called with no this pointer it will be called with the
			// view as 'this' context. If the helper ~foo() was in a data-link expression, the view will have a 'temporary' linkCtx property too.
			// Note that helper functions on deeper paths will have specific this pointers, from the preceding path.
			// For example, ~util.foo() will have the ~util object as 'this' pointer
			wrapped = function() {
				return res.apply((!this || this === global) ? callView : this, arguments);
			};
			$extend(wrapped, res); // Attach same expandos (if any) to the wrapped function
		}
		return wrapped || res;
	}
}

/* Internal private: view._getTmpl() */
function getTemplate(tmpl) {
	return tmpl && (tmpl.fn
		? tmpl
		: this.getRsc("templates", tmpl) || $templates(tmpl)); // not yet compiled
}

//==============
// views._cnvt
//==============

function convertVal(converter, view, tagCtx, onError) {
	// Called from compiled template code for {{:}}
	// self is template object or linkCtx object
	var tag, linkCtx, value, argsLen, bindTo,
		// If tagCtx is an integer, then it is the key for the compiled function to return the boundTag tagCtx
		boundTag = typeof tagCtx === "number" && view.tmpl.bnds[tagCtx-1];

	if (onError === undefined && boundTag && boundTag._lr) { // lateRender
		onError = "";
	}
	if (onError !== undefined) {
		tagCtx = onError = {props: {}, args: [onError]};
	} else if (boundTag) {
		tagCtx = boundTag(view.data, view, $sub);
	}
	boundTag = boundTag._bd && boundTag;
	if (converter || boundTag) {
		linkCtx = view._lc; // For data-link="{cvt:...}"... See onDataLinkedTagChange
		tag = linkCtx && linkCtx.tag;
		tagCtx.view = view;
		if (!tag) {
			tag = $extend(new $sub._tg(), {
				_: {
					bnd: boundTag,
					unlinked: true,
					lt: tagCtx.lt // If a late path @some.path has not returned @some object, mark tag as late
				},
				inline: !linkCtx,
				tagName: ":",
				convert: converter,
				onArrayChange: true,
				flow: true,
				tagCtx: tagCtx,
				tagCtxs: [tagCtx],
				_is: "tag"
			});
			argsLen = tagCtx.args.length;
			if (argsLen>1) {
				bindTo = tag.bindTo = [];
				while (argsLen--) {
					bindTo.unshift(argsLen); // Bind to all the arguments - generate bindTo array: [0,1,2...]
				}
			}
			if (linkCtx) {
				linkCtx.tag = tag;
				tag.linkCtx = linkCtx;
			}
			tagCtx.ctx = extendCtx(tagCtx.ctx, (linkCtx ? linkCtx.view : view).ctx);
			tagHandlersFromProps(tag, tagCtx);
		}
		tag._er = onError && value;
		tag.ctx = tagCtx.ctx || tag.ctx || {};
		tagCtx.ctx = undefined;
		value = tag.cvtArgs()[0]; // If there is a convertBack but no convert, converter will be "true"
		tag._er = onError && value;
	} else {
		value = tagCtx.args[0];
	}

	// Call onRender (used by JsViews if present, to add binding annotations around rendered content)
	value = boundTag && view._.onRender
		? view._.onRender(value, view, tag)
		: value;
	return value != undefined ? value : "";
}

function convertArgs(tagElse, bound) { // tag.cvtArgs() or tag.cvtArgs(tagElse?, true?)
	var l, key, boundArgs, args, bindFrom, tag, converter,
		tagCtx = this;

	if (tagCtx.tagName) {
		tag = tagCtx;
		tagCtx = (tag.tagCtxs || [tagCtx])[tagElse||0];
		if (!tagCtx) {
			return;
		}
	} else {
		tag = tagCtx.tag;
	}

	bindFrom = tag.bindFrom;
	args = tagCtx.args;

	if ((converter = tag.convert) && typeof converter === STRING) {
		converter = converter === "true"
			? undefined
			: (tagCtx.view.getRsc("converters", converter) || error("Unknown converter: '" + converter + "'"));
	}

	if (converter && !bound) { // If there is a converter, use a copy of the tagCtx.args array for rendering, and replace the args[0] in
		args = args.slice(); // the copied array with the converted value. But we do not modify the value of tag.tagCtx.args[0] (the original args array)
	}
	if (bindFrom) { // Get the values of the boundArgs
		boundArgs = [];
		l = bindFrom.length;
		while (l--) {
			key = bindFrom[l];
			boundArgs.unshift(argOrProp(tagCtx, key));
		}
		if (bound) {
			args = boundArgs; // Call to bndArgs() - returns the boundArgs
		}
	}
	if (converter) {
		converter = converter.apply(tag, boundArgs || args);
		if (converter === undefined) {
			return args; // Returning undefined from a converter is equivalent to not having a converter.
		}
		bindFrom = bindFrom || [0];
		l = bindFrom.length;
		if (!$isArray(converter) || (converter.arg0 !== false && (l === 1 || converter.length !== l || converter.arg0))) {
			converter = [converter]; // Returning converter as first arg, even if converter value is an array
			bindFrom = [0];
			l = 1;
		}
		if (bound) {        // Call to bndArgs() - so apply converter to all boundArgs
			args = converter; // The array of values returned from the converter
		} else {            // Call to cvtArgs()
			while (l--) {
				key = bindFrom[l];
				if (+key === key) {
					args[key] = converter[l];
				}
			}
		}
	}
	return args;
}

function argOrProp(context, key) {
	context = context[+key === key ? "args" : "props"];
	return context && context[key];
}

function convertBoundArgs(tagElse) { // tag.bndArgs()
	return this.cvtArgs(tagElse, 1);
}

//=============
// views.tag
//=============

/* view.getRsc() */
function getResource(resourceType, itemName) {
	var res, store,
		view = this;
	if (typeof itemName === STRING) {
		while ((res === undefined) && view) {
			store = view.tmpl && view.tmpl[resourceType];
			res = store && store[itemName];
			view = view.parent;
		}
		return res || $views[resourceType][itemName];
	}
}

function renderTag(tagName, parentView, tmpl, tagCtxs, isUpdate, onError) {
	function bindToOrBindFrom(type) {
		var bindArray = tag[type];

		if (bindArray !== undefined) {
			bindArray = $isArray(bindArray) ? bindArray : [bindArray];
			m = bindArray.length;
			while (m--) {
				key = bindArray[m];
				if (!isNaN(parseInt(key))) {
					bindArray[m] = parseInt(key); // Convert "0" to 0, etc.
				}
			}
		}

		return bindArray || [0];
	}

	parentView = parentView || topView;
	var tag, tagDef, template, tags, attr, parentTag, l, m, n, itemRet, tagCtx, tagCtxCtx, ctxPrm, bindTo, bindFrom, initVal,
		content, callInit, mapDef, thisMap, args, bdArgs, props, tagDataMap, contentCtx, key, bindFromLength, bindToLength, linkedElement, defaultCtx,
		i = 0,
		ret = "",
		linkCtx = parentView._lc || false, // For data-link="{myTag...}"... See onDataLinkedTagChange
		ctx = parentView.ctx,
		parentTmpl = tmpl || parentView.tmpl,
		// If tagCtxs is an integer, then it is the key for the compiled function to return the boundTag tagCtxs
		boundTag = typeof tagCtxs === "number" && parentView.tmpl.bnds[tagCtxs-1];

	if (tagName._is === "tag") {
		tag = tagName;
		tagName = tag.tagName;
		tagCtxs = tag.tagCtxs;
		template = tag.template;
	} else {
		tagDef = parentView.getRsc("tags", tagName) || error("Unknown tag: {{" + tagName + "}} ");
		template = tagDef.template;
	}
	if (onError === undefined && boundTag && (boundTag._lr = (tagDef.lateRender && boundTag._lr!== false || boundTag._lr))) {
		onError = ""; // If lateRender, set temporary onError, to skip initial rendering (and render just "")
	}
	if (onError !== undefined) {
		ret += onError;
		tagCtxs = onError = [{props: {}, args: [], params: {props:{}}}];
	} else if (boundTag) {
		tagCtxs = boundTag(parentView.data, parentView, $sub);
	}

	l = tagCtxs.length;
	for (; i < l; i++) {
		tagCtx = tagCtxs[i];
		content = tagCtx.tmpl;
		if (!linkCtx || !linkCtx.tag || i && !linkCtx.tag.inline || tag._er || content && +content===content) {
			// Initialize tagCtx
			// For block tags, tagCtx.tmpl is an integer > 0
			if (content && parentTmpl.tmpls) {
				tagCtx.tmpl = tagCtx.content = parentTmpl.tmpls[content - 1]; // Set the tmpl property to the content of the block tag
			}
			tagCtx.index = i;
			tagCtx.ctxPrm = contextParameter;
			tagCtx.render = renderContent;
			tagCtx.cvtArgs = convertArgs;
			tagCtx.bndArgs = convertBoundArgs;
			tagCtx.view = parentView;
			tagCtx.ctx = extendCtx(extendCtx(tagCtx.ctx, tagDef && tagDef.ctx), ctx); // Clone and extend parentView.ctx
		}
		if (tmpl = tagCtx.props.tmpl) {
			// If the tmpl property is overridden, set the value (when initializing, or, in case of binding: ^tmpl=..., when updating)
			tagCtx.tmpl = parentView._getTmpl(tmpl);
			tagCtx.content = tagCtx.content || tagCtx.tmpl;
		}

		if (!tag) {
			// This will only be hit for initial tagCtx (not for {{else}}) - if the tag instance does not exist yet
			// If the tag has not already been instantiated, we will create a new instance.
			// ~tag will access the tag, even within the rendering of the template content of this tag.
			// From child/descendant tags, can access using ~tag.parent, or ~parentTags.tagName
			tag = new tagDef._ctr();
			callInit = !!tag.init;

			tag.parent = parentTag = ctx && ctx.tag;
			tag.tagCtxs = tagCtxs;

			if (linkCtx) {
				tag.inline = false;
				linkCtx.tag = tag;
			}
			tag.linkCtx = linkCtx;
			if (tag._.bnd = boundTag || linkCtx.fn) {
				// Bound if {^{tag...}} or data-link="{tag...}"
				tag._.ths = tagCtx.params.props["this"]; // Tag has a this=expr binding, to get javascript reference to tag instance
				tag._.lt = tagCtxs.lt; // If a late path @some.path has not returned @some object, mark tag as late
				tag._.arrVws = {};
			} else if (tag.dataBoundOnly) {
				error(tagName + " must be data-bound:\n{^{" + tagName + "}}");
			}
			//TODO better perf for childTags() - keep child tag.tags array, (and remove child, when disposed)
			// tag.tags = [];
		} else if (linkCtx && linkCtx.fn._lr) {
			callInit = !!tag.init;
		}
		tagDataMap = tag.dataMap;

		tagCtx.tag = tag;
		if (tagDataMap && tagCtxs) {
			tagCtx.map = tagCtxs[i].map; // Copy over the compiled map instance from the previous tagCtxs to the refreshed ones
		}
		if (!tag.flow) {
			tagCtxCtx = tagCtx.ctx = tagCtx.ctx || {};

			// tags hash: tag.ctx.tags, merged with parentView.ctx.tags,
			tags = tag.parents = tagCtxCtx.parentTags = ctx && extendCtx(tagCtxCtx.parentTags, ctx.parentTags) || {};
			if (parentTag) {
				tags[parentTag.tagName] = parentTag;
				//TODO better perf for childTags: parentTag.tags.push(tag);
			}
			tags[tag.tagName] = tagCtxCtx.tag = tag;
			tagCtxCtx.tagCtx = tagCtx;
		}
	}
	if (!(tag._er = onError)) {
		tagHandlersFromProps(tag, tagCtxs[0]);
		tag.rendering = {rndr: tag.rendering}; // Provide object for state during render calls to tag and elses. (Used by {{if}} and {{for}}...)
		for (i = 0; i < l; i++) { // Iterate tagCtx for each {{else}} block
			tagCtx = tag.tagCtx = tagCtxs[i];
			props = tagCtx.props;
			tag.ctx = tagCtx.ctx;

			if (!i) {
				if (callInit) {
					tag.init(tagCtx, linkCtx, tag.ctx);
					callInit = undefined;
				}
				if (!tagCtx.args.length && tagCtx.argDefault !== false && tag.argDefault !== false) {
					tagCtx.args = args = [tagCtx.view.data]; // Missing first arg defaults to the current data context
					tagCtx.params.args = ["#data"];
				}

				bindTo = bindToOrBindFrom("bindTo");

				if (tag.bindTo !== undefined) {
					tag.bindTo = bindTo;
				}

				if (tag.bindFrom !== undefined) {
					tag.bindFrom = bindToOrBindFrom("bindFrom");
				} else if (tag.bindTo) {
					tag.bindFrom = tag.bindTo = bindTo;
				}
				bindFrom = tag.bindFrom || bindTo;

				bindToLength = bindTo.length;
				bindFromLength = bindFrom.length;

				if (tag._.bnd && (linkedElement = tag.linkedElement)) {
					tag.linkedElement = linkedElement = $isArray(linkedElement) ? linkedElement: [linkedElement];

					if (bindToLength !== linkedElement.length) {
						error("linkedElement not same length as bindTo");
					}
				}
				if (linkedElement = tag.linkedCtxParam) {
					tag.linkedCtxParam = linkedElement = $isArray(linkedElement) ? linkedElement: [linkedElement];

					if (bindFromLength !== linkedElement.length) {
						error("linkedCtxParam not same length as bindFrom/bindTo");
					}
				}

				if (bindFrom) {
					tag._.fromIndex = {}; // Hash of bindFrom index which has same path value as bindTo index. fromIndex = tag._.fromIndex[toIndex]
					tag._.toIndex = {}; // Hash of bindFrom index which has same path value as bindTo index. fromIndex = tag._.fromIndex[toIndex]
					n = bindFromLength;
					while (n--) {
						key = bindFrom[n];
						m = bindToLength;
						while (m--) {
							if (key === bindTo[m]) {
								tag._.fromIndex[m] = n;
								tag._.toIndex[n] = m;
							}
						}
					}
				}

				if (linkCtx) {
					// Set attr on linkCtx to ensure outputting to the correct target attribute.
					// Setting either linkCtx.attr or this.attr in the init() allows per-instance choice of target attrib.
					linkCtx.attr = tag.attr = linkCtx.attr || tag.attr || linkCtx._dfAt;
				}
				attr = tag.attr;
				tag._.noVws = attr && attr !== HTML;
			}
			args = tag.cvtArgs(i);
			if (tag.linkedCtxParam) {
				bdArgs = tag.cvtArgs(i, 1);
				m = bindFromLength;
				defaultCtx = tag.constructor.prototype.ctx;
				while (m--) {
					if (ctxPrm = tag.linkedCtxParam[m]) {
						key = bindFrom[m];
						initVal = bdArgs[m];
						// Create tag contextual parameter
						tagCtx.ctx[ctxPrm] = $sub._cp(
							defaultCtx && initVal === undefined ? defaultCtx[ctxPrm]: initVal,
							initVal !== undefined && argOrProp(tagCtx.params, key),
							tagCtx.view,
							tag._.bnd && {tag: tag, cvt: tag.convert, ind: m, tagElse: i}
						);
					}
				}
			}
			if ((mapDef = props.dataMap || tagDataMap) && (args.length || props.dataMap)) {
				thisMap = tagCtx.map;
				if (!thisMap || thisMap.src !== args[0] || isUpdate) {
					if (thisMap && thisMap.src) {
						thisMap.unmap(); // only called if observable map - not when only used in JsRender, e.g. by {{props}}
					}
					mapDef.map(args[0], tagCtx, thisMap, !tag._.bnd);
					thisMap = tagCtx.map;
				}
				args = [thisMap.tgt];
			}

			itemRet = undefined;
			if (tag.render) {
				itemRet = tag.render.apply(tag, args);
				if (parentView.linked && itemRet && !rWrappedInViewMarker.test(itemRet)) {
					// When a tag renders content from the render method, with data linking then we need to wrap with view markers, if absent,
					// to provide a contentView for the tag, which will correctly dispose bindings if deleted. The 'tmpl' for this view will
					// be a dumbed-down template which will always return the itemRet string (no matter what the data is). The itemRet string
					// is not compiled as template markup, so can include "{{" or "}}" without triggering syntax errors
					tmpl = { // 'Dumbed-down' template which always renders 'static' itemRet string
						links: []
					};
					tmpl.render = tmpl.fn = function() {
						return itemRet;
					};
					itemRet = renderWithViews(tmpl, parentView.data, undefined, true, parentView, undefined, undefined, tag);
				}
			}
			if (!args.length) {
				args = [parentView]; // no arguments - (e.g. {{else}}) get data context from view.
			}
			if (itemRet === undefined) {
				contentCtx = args[0]; // Default data context for wrapped block content is the first argument
				if (tag.contentCtx) { // Set tag.contentCtx to true, to inherit parent context, or to a function to provide alternate context.
					contentCtx = tag.contentCtx === true ? parentView : tag.contentCtx(contentCtx);
				}
				itemRet = tagCtx.render(contentCtx, true) || (isUpdate ? undefined : "");
			}
			ret = ret
				? ret + (itemRet || "")
				: itemRet !== undefined
					? "" + itemRet
					: undefined; // If no return value from render, and no template/content tagCtx.render(...), return undefined
		}
		tag.rendering = tag.rendering.rndr; // Remove tag.rendering object (if this is outermost render call. (In case of nested calls)
	}
	tag.tagCtx = tagCtxs[0];
	tag.ctx = tag.tagCtx.ctx;

	if (tag._.noVws && tag.inline) {
		// inline tag with attr set to "text" will insert HTML-encoded content - as if it was element-based innerText
		ret = attr === "text"
			? $converters.html(ret)
			: "";
	}
	return boundTag && parentView._.onRender
		// Call onRender (used by JsViews if present, to add binding annotations around rendered content)
		? parentView._.onRender(ret, parentView, tag)
		: ret;
}

//=================
// View constructor
//=================

function View(context, type, parentView, data, template, key, onRender, contentTmpl) {
	// Constructor for view object in view hierarchy. (Augmented by JsViews if JsViews is loaded)
	var views, parentView_, tag, self_,
		self = this,
		isArray = type === "array";
		// If the data is an array, this is an 'array view' with a views array for each child 'item view'
		// If the data is not an array, this is an 'item view' with a views 'hash' object for any child nested views

	self.content = contentTmpl;
	self.views = isArray ? [] : {};
	self.data = data;
	self.tmpl = template;
	self_ = self._ = {
		key: 0,
		// ._.useKey is non zero if is not an 'array view' (owning a data array). Use this as next key for adding to child views hash
		useKey: isArray ? 0 : 1,
		id: "" + viewId++,
		onRender: onRender,
		bnds: {}
	};
	self.linked = !!onRender;
	self.type = type || "top";
	if (type) {
		self.cache = {_ct: $subSettings._cchCt}; // Used for caching results of computed properties and helpers (view.getCache)
	}

	if (!parentView || parentView.type === "top") {
		(self.ctx = context || {}).root = self.data;
	}

	if (self.parent = parentView) {
		self.root = parentView.root || self; // view whose parent is top view
		views = parentView.views;
		parentView_ = parentView._;
		self.isTop = parentView_.scp; // Is top content view of a link("#container", ...) call
		self.scope = (!context.tag || context.tag === parentView.ctx.tag) && !self.isTop && parentView.scope || self;
		// Scope for contextParams - closest non flow tag ancestor or root view
		if (parentView_.useKey) {
			// Parent is not an 'array view'. Add this view to its views object
			// self._key = is the key in the parent view hash
			views[self_.key = "_" + parentView_.useKey++] = self;
			self.index = indexStr;
			self.getIndex = getNestedIndex;
		} else if (views.length === (self_.key = self.index = key)) { // Parent is an 'array view'. Add this view to its views array
			views.push(self); // Adding to end of views array. (Using push when possible - better perf than splice)
		} else {
			views.splice(key, 0, self); // Inserting in views array
		}
		// If no context was passed in, use parent context
		// If context was passed in, it should have been merged already with parent context
		self.ctx = context || parentView.ctx;
	} else if (type) {
		self.root = self; // view whose parent is top view
	}
}

View.prototype = {
	get: getView,
	getIndex: getIndex,
	ctxPrm: contextParameter,
	getRsc: getResource,
	_getTmpl: getTemplate,
	_getOb: getPathObject,
	getCache: function(key) { // Get cached value of computed value
		if ($subSettings._cchCt > this.cache._ct) {
			this.cache = {_ct: $subSettings._cchCt};
		}
		return this.cache[key] !== undefined ? this.cache[key] : (this.cache[key] = cpFnStore[key](this.data, this, $sub));
	},
	_is: "view"
};

//====================================================
// Registration
//====================================================

function compileChildResources(parentTmpl) {
	var storeName, storeNames, resources;
	for (storeName in jsvStores) {
		storeNames = storeName + "s";
		if (parentTmpl[storeNames]) {
			resources = parentTmpl[storeNames];        // Resources not yet compiled
			parentTmpl[storeNames] = {};               // Remove uncompiled resources
			$views[storeNames](resources, parentTmpl); // Add back in the compiled resources
		}
	}
}

//===============
// compileTag
//===============

function compileTag(name, tagDef, parentTmpl) {
	var tmpl, baseTag, prop,
		compiledDef = new $sub._tg();

	function Tag() {
		var tag = this;
		tag._ = {
			unlinked: true
		};
		tag.inline = true;
		tag.tagName = name;
	}

	if ($isFunction(tagDef)) {
		// Simple tag declared as function. No presenter instantation.
		tagDef = {
			depends: tagDef.depends,
			render: tagDef
		};
	} else if (typeof tagDef === STRING) {
		tagDef = {template: tagDef};
	}

	if (baseTag = tagDef.baseTag) {
		tagDef.flow = !!tagDef.flow; // Set flow property, so defaults to false even if baseTag has flow=true
		baseTag = typeof baseTag === STRING
			? (parentTmpl && parentTmpl.tags[baseTag] || $tags[baseTag])
			: baseTag;
		if (!baseTag) {
			error('baseTag: "' + tagDef.baseTag + '" not found');
		}
		compiledDef = $extend(compiledDef, baseTag);

		for (prop in tagDef) {
			compiledDef[prop] = getMethod(baseTag[prop], tagDef[prop]);
		}
	} else {
		compiledDef = $extend(compiledDef, tagDef);
	}

	// Tag declared as object, used as the prototype for tag instantiation (control/presenter)
	if ((tmpl = compiledDef.template) !== undefined) {
		compiledDef.template = typeof tmpl === STRING ? ($templates[tmpl] || $templates(tmpl)) : tmpl;
	}
	(Tag.prototype = compiledDef).constructor = compiledDef._ctr = Tag;

	if (parentTmpl) {
		compiledDef._parentTmpl = parentTmpl;
	}
	return compiledDef;
}

function baseApply(args) {
	// In derived method (or handler declared declaratively as in {{:foo onChange=~fooChanged}} can call base method,
	// using this.baseApply(arguments) (Equivalent to this._superApply(arguments) in jQuery UI)
	return this.base.apply(this, args);
}

//===============
// compileTmpl
//===============

function compileTmpl(name, tmpl, parentTmpl, options) {
	// tmpl is either a template object, a selector for a template script block, or the name of a compiled template

	//==== nested functions ====
	function lookupTemplate(value) {
		// If value is of type string - treat as selector, or name of compiled template
		// Return the template object, if already compiled, or the markup string
		var currentName, tmpl;
		if ((typeof value === STRING) || value.nodeType > 0 && (elem = value)) {
			if (!elem) {
				if (/^\.?\/[^\\:*?"<>]*$/.test(value)) {
					// value="./some/file.html" (or "/some/file.html")
					// If the template is not named, use "./some/file.html" as name.
					if (tmpl = $templates[name = name || value]) {
						value = tmpl;
					} else {
						// BROWSER-SPECIFIC CODE (not on Node.js):
						// Look for server-generated script block with id "./some/file.html"
						elem = document.getElementById(value);
					}
				} else if (value.charAt(0) === "#") {
					elem = document.getElementById(value.slice(1));
				} if (!elem && $.fn && !$sub.rTmpl.test(value)) {
					try {
						elem = $(value, document)[0]; // if jQuery is loaded, test for selector returning elements, and get first element
					} catch (e) {}
				}// END BROWSER-SPECIFIC CODE
			} //BROWSER-SPECIFIC CODE
			if (elem) {
				if (elem.tagName !== "SCRIPT") {
					error(value + ": Use script block, not " + elem.tagName);
				}
				if (options) {
					// We will compile a new template using the markup in the script element
					value = elem.innerHTML;
				} else {
					// We will cache a single copy of the compiled template, and associate it with the name
					// (renaming from a previous name if there was one).
					currentName = elem.getAttribute(tmplAttr);
					if (currentName) {
						if (currentName !== jsvTmpl) {
							value = $templates[currentName];
							delete $templates[currentName];
						} else if ($.fn) {
							value = $.data(elem)[jsvTmpl]; // Get cached compiled template
						}
					}
					if (!currentName || !value) { // Not yet compiled, or cached version lost
						name = name || ($.fn ? jsvTmpl : value);
						value = compileTmpl(name, elem.innerHTML, parentTmpl, options);
					}
					value.tmplName = name = name || currentName;
					if (name !== jsvTmpl) {
						$templates[name] = value;
					}
					elem.setAttribute(tmplAttr, name);
					if ($.fn) {
						$.data(elem, jsvTmpl, value);
					}
				}
			} // END BROWSER-SPECIFIC CODE
			elem = undefined;
		} else if (!value.fn) {
			value = undefined;
			// If value is not a string. HTML element, or compiled template, return undefined
		}
		return value;
	}

	var elem, compiledTmpl,
		tmplOrMarkup = tmpl = tmpl || "";
	$sub._html = $converters.html;

	//==== Compile the template ====
	if (options === 0) {
		options = undefined;
		tmplOrMarkup = lookupTemplate(tmplOrMarkup); // Top-level compile so do a template lookup
	}

	// If options, then this was already compiled from a (script) element template declaration.
	// If not, then if tmpl is a template object, use it for options
	options = options || (tmpl.markup
		? tmpl.bnds
			? $extend({}, tmpl)
			: tmpl
		: {}
	);

	options.tmplName = options.tmplName || name || "unnamed";
	if (parentTmpl) {
		options._parentTmpl = parentTmpl;
	}
	// If tmpl is not a markup string or a selector string, then it must be a template object
	// In that case, get it from the markup property of the object
	if (!tmplOrMarkup && tmpl.markup && (tmplOrMarkup = lookupTemplate(tmpl.markup)) && tmplOrMarkup.fn) {
		// If the string references a compiled template object, need to recompile to merge any modified options
		tmplOrMarkup = tmplOrMarkup.markup;
	}
	if (tmplOrMarkup !== undefined) {
		if (tmplOrMarkup.render || tmpl.render) {
			// tmpl is already compiled, so use it
			if (tmplOrMarkup.tmpls) {
				compiledTmpl = tmplOrMarkup;
			}
		} else {
			// tmplOrMarkup is a markup string, not a compiled template
			// Create template object
			tmpl = tmplObject(tmplOrMarkup, options);
			// Compile to AST and then to compiled function
			tmplFn(tmplOrMarkup.replace(rEscapeQuotes, "\\$&"), tmpl);
		}
		if (!compiledTmpl) {
			compiledTmpl = $extend(function() {
				return compiledTmpl.render.apply(compiledTmpl, arguments);
			}, tmpl);

			compileChildResources(compiledTmpl);
		}
		return compiledTmpl;
	}
}

//==== /end of function compileTmpl ====

//=================
// compileViewModel
//=================

function getDefaultVal(defaultVal, data) {
	return $isFunction(defaultVal)
		? defaultVal.call(data)
		: defaultVal;
}

function addParentRef(ob, ref, parent) {
	Object.defineProperty(ob, ref, {
		value: parent,
		configurable: true
	});
}

function compileViewModel(name, type) {
	var i, constructor, parent,
		viewModels = this,
		getters = type.getters,
		extend = type.extend,
		id = type.id,
		proto = $.extend({
			_is: name || "unnamed",
			unmap: unmap,
			merge: merge
		}, extend),
		args = "",
		cnstr = "",
		getterCount = getters ? getters.length : 0,
		$observable = $.observable,
		getterNames = {};

	function JsvVm(args) {
		constructor.apply(this, args);
	}

	function vm() {
		return new JsvVm(arguments);
	}

	function iterate(data, action) {
		var getterType, defaultVal, prop, ob, parentRef,
			j = 0;
		for (; j < getterCount; j++) {
			prop = getters[j];
			getterType = undefined;
			if (typeof prop !== STRING) {
				getterType = prop;
				prop = getterType.getter;
				parentRef = getterType.parentRef;
			}
			if ((ob = data[prop]) === undefined && getterType && (defaultVal = getterType.defaultVal) !== undefined) {
				ob = getDefaultVal(defaultVal, data);
			}
			action(ob, getterType && viewModels[getterType.type], prop, parentRef);
		}
	}

	function map(data) {
		data = typeof data === STRING
			? JSON.parse(data) // Accept JSON string
			: data;            // or object/array
		var l, prop, childOb, parentRef,
			j = 0,
			ob = data,
			arr = [];

		if ($isArray(data)) {
			data = data || [];
			l = data.length;
			for (; j<l; j++) {
				arr.push(this.map(data[j]));
			}
			arr._is = name;
			arr.unmap = unmap;
			arr.merge = merge;
			return arr;
		}

		if (data) {
			iterate(data, function(ob, viewModel) {
				if (viewModel) { // Iterate to build getters arg array (value, or mapped value)
					ob = viewModel.map(ob);
				}
				arr.push(ob);
			});
			ob = this.apply(this, arr); // Instantiate this View Model, passing getters args array to constructor
			j = getterCount;
			while (j--) {
				childOb = arr[j];
				parentRef = getters[j].parentRef;
				if (parentRef && childOb && childOb.unmap) {
					if ($isArray(childOb)) {
						l = childOb.length;
						while (l--) {
							addParentRef(childOb[l], parentRef, ob);
						}
					} else {
						addParentRef(childOb, parentRef, ob);
					}
				}
			}
			for (prop in data) { // Copy over any other properties. that are not get/set properties
				if (prop !== $expando && !getterNames[prop]) {
					ob[prop] = data[prop];
				}
			}
		}
		return ob;
	}

	function merge(data, parent, parentRef) {
		data = typeof data === STRING
			? JSON.parse(data) // Accept JSON string
			: data;            // or object/array

		var j, l, m, prop, mod, found, assigned, ob, newModArr, childOb,
			k = 0,
			model = this;

		if ($isArray(model)) {
			assigned = {};
			newModArr = [];
			l = data.length;
			m = model.length;
			for (; k<l; k++) {
				ob = data[k];
				found = false;
				for (j=0; j<m && !found; j++) {
					if (assigned[j]) {
						continue;
					}
					mod = model[j];

					if (id) {
						assigned[j] = found = typeof id === STRING
						? (ob[id] && (getterNames[id] ? mod[id]() : mod[id]) === ob[id])
						: id(mod, ob);
					}
				}
				if (found) {
					mod.merge(ob);
					newModArr.push(mod);
				} else {
					newModArr.push(childOb = vm.map(ob));
					if (parentRef) {
						addParentRef(childOb, parentRef, parent);
					}
				}
			}
			if ($observable) {
				$observable(model).refresh(newModArr, true);
			} else {
				model.splice.apply(model, [0, model.length].concat(newModArr));
			}
			return;
		}
		iterate(data, function(ob, viewModel, getter, parentRef) {
			if (viewModel) {
				model[getter]().merge(ob, model, parentRef); // Update typed property
			} else if (model[getter]() !== ob) {
				model[getter](ob); // Update non-typed property
			}
		});
		for (prop in data) {
			if (prop !== $expando && !getterNames[prop]) {
				model[prop] = data[prop];
			}
		}
	}

	function unmap() {
		var ob, prop, getterType, arr, value,
			k = 0,
			model = this;

		function unmapArray(modelArr) {
			var arr = [],
				i = 0,
				l = modelArr.length;
			for (; i<l; i++) {
				arr.push(modelArr[i].unmap());
			}
			return arr;
		}

		if ($isArray(model)) {
			return unmapArray(model);
		}
		ob = {};
		for (; k < getterCount; k++) {
			prop = getters[k];
			getterType = undefined;
			if (typeof prop !== STRING) {
				getterType = prop;
				prop = getterType.getter;
			}
			value = model[prop]();
			ob[prop] = getterType && value && viewModels[getterType.type]
				? $isArray(value)
					? unmapArray(value)
					: value.unmap()
				: value;
		}
		for (prop in model) {
			if (model.hasOwnProperty(prop) && (prop.charAt(0) !== "_" || !getterNames[prop.slice(1)]) && prop !== $expando && !$isFunction(model[prop])) {
				ob[prop] = model[prop];
			}
		}
		return ob;
	}

	JsvVm.prototype = proto;

	for (i=0; i < getterCount; i++) {
		(function(getter) {
			getter = getter.getter || getter;
			getterNames[getter] = i+1;
			var privField = "_" + getter;

			args += (args ? "," : "") + getter;
			cnstr += "this." + privField + " = " + getter + ";\n";
			proto[getter] = proto[getter] || function(val) {
				if (!arguments.length) {
					return this[privField]; // If there is no argument, use as a getter
				}
				if ($observable) {
					$observable(this).setProperty(getter, val);
				} else {
					this[privField] = val;
				}
			};

			if ($observable) {
				proto[getter].set = proto[getter].set || function(val) {
					this[privField] = val; // Setter called by observable property change
				};
			}
		})(getters[i]);
	}

	// Constructor for new viewModel instance.
	cnstr = new Function(args, cnstr);

	constructor = function() {
		cnstr.apply(this, arguments);
		// Pass additional parentRef str and parent obj to have a parentRef pointer on instance
		if (parent = arguments[getterCount + 1]) {
			addParentRef(this, arguments[getterCount], parent);
		}
	};

	constructor.prototype = proto;
	proto.constructor = constructor;

	vm.map = map;
	vm.getters = getters;
	vm.extend = extend;
	vm.id = id;
	return vm;
}

function tmplObject(markup, options) {
	// Template object constructor
	var htmlTag,
		wrapMap = $subSettingsAdvanced._wm || {}, // Only used in JsViews. Otherwise empty: {}
		tmpl = {
			tmpls: [],
			links: {}, // Compiled functions for link expressions
			bnds: [],
			_is: "template",
			render: renderContent
		};

	if (options) {
		tmpl = $extend(tmpl, options);
	}

	tmpl.markup = markup;
	if (!tmpl.htmlTag) {
		// Set tmpl.tag to the top-level HTML tag used in the template, if any...
		htmlTag = rFirstElem.exec(markup);
		tmpl.htmlTag = htmlTag ? htmlTag[1].toLowerCase() : "";
	}
	htmlTag = wrapMap[tmpl.htmlTag];
	if (htmlTag && htmlTag !== wrapMap.div) {
		// When using JsViews, we trim templates which are inserted into HTML contexts where text nodes are not rendered (i.e. not 'Phrasing Content').
		// Currently not trimmed for <li> tag. (Not worth adding perf cost)
		tmpl.markup = $.trim(tmpl.markup);
	}

	return tmpl;
}

//==============
// registerStore
//==============

/**
* Internal. Register a store type (used for template, tags, helpers, converters)
*/
function registerStore(storeName, storeSettings) {

/**
* Generic store() function to register item, named item, or hash of items
* Also used as hash to store the registered items
* Used as implementation of $.templates(), $.views.templates(), $.views.tags(), $.views.helpers() and $.views.converters()
*
* @param {string|hash} name         name - or selector, in case of $.templates(). Or hash of items
* @param {any}         [item]       (e.g. markup for named template)
* @param {template}    [parentTmpl] For item being registered as private resource of template
* @returns {any|$.views} item, e.g. compiled template - or $.views in case of registering hash of items
*/
	function theStore(name, item, parentTmpl) {
		// The store is also the function used to add items to the store. e.g. $.templates, or $.views.tags

		// For store of name 'thing', Call as:
		//    $.views.things(items[, parentTmpl]),
		// or $.views.things(name[, item, parentTmpl])

		var compile, itemName, thisStore, cnt,
			onStore = $sub.onStore[storeName];

		if (name && typeof name === OBJECT && !name.nodeType && !name.markup && !name.getTgt && !(storeName === "viewModel" && name.getters || name.extend)) {
			// Call to $.views.things(items[, parentTmpl]),

			// Adding items to the store
			// If name is a hash, then item is parentTmpl. Iterate over hash and call store for key.
			for (itemName in name) {
				theStore(itemName, name[itemName], item);
			}
			return item || $views;
		}
		// Adding a single unnamed item to the store
		if (name &&  typeof name !== STRING) { // name must be a string
			parentTmpl = item;
			item = name;
			name = undefined;
		}
		thisStore = parentTmpl
			? storeName === "viewModel"
				? parentTmpl
				: (parentTmpl[storeNames] = parentTmpl[storeNames] || {})
			: theStore;
		compile = storeSettings.compile;

		if (item === undefined) {
			item = compile ? name : thisStore[name];
			name = undefined;
		}
		if (item === null) {
			// If item is null, delete this entry
			if (name) {
				delete thisStore[name];
			}
		} else {
			if (compile) {
				item = compile.call(thisStore, name, item, parentTmpl, 0) || {};
				item._is = storeName; // Only do this for compiled objects (tags, templates...)
			}
			if (name) {
				thisStore[name] = item;
			}
		}
		if (onStore) {
			// e.g. JsViews integration
			onStore(name, item, parentTmpl, compile);
		}
		return item;
	}

	var storeNames = storeName + "s";
	$views[storeNames] = theStore;
}

/**
* Add settings such as:
* $.views.settings.allowCode(true)
* @param {boolean} value
* @returns {Settings}
*
* allowCode = $.views.settings.allowCode()
* @returns {boolean}
*/
function addSetting(st) {
	$viewsSettings[st] = $viewsSettings[st] || function(value) {
		return arguments.length
			? ($subSettings[st] = value, $viewsSettings)
			: $subSettings[st];
	};
}

//========================
// dataMap for render only
//========================

function dataMap(mapDef) {
	function Map(source, options) {
		this.tgt = mapDef.getTgt(source, options);
		options.map = this;
	}

	if ($isFunction(mapDef)) {
		// Simple map declared as function
		mapDef = {
			getTgt: mapDef
		};
	}

	if (mapDef.baseMap) {
		mapDef = $extend($extend({}, mapDef.baseMap), mapDef);
	}

	mapDef.map = function(source, options) {
		return new Map(source, options);
	};
	return mapDef;
}

//==============
// renderContent
//==============

/** Render the template as a string, using the specified data and helpers/context
* $("#tmpl").render(), tmpl.render(), tagCtx.render(), $.render.namedTmpl()
*
* @param {any}        data
* @param {hash}       [context]           helpers or context
* @param {boolean}    [noIteration]
* @param {View}       [parentView]        internal
* @param {string}     [key]               internal
* @param {function}   [onRender]          internal
* @returns {string}   rendered template   internal
*/
function renderContent(data, context, noIteration, parentView, key, onRender) {
	var i, l, tag, tmpl, tagCtx, isTopRenderCall, prevData, prevIndex,
		view = parentView,
		result = "";

	if (context === true) {
		noIteration = context; // passing boolean as second param - noIteration
		context = undefined;
	} else if (typeof context !== OBJECT) {
		context = undefined; // context must be a boolean (noIteration) or a plain object
	}

	if (tag = this.tag) {
		// This is a call from renderTag or tagCtx.render(...)
		tagCtx = this;
		view = view || tagCtx.view;
		tmpl = view._getTmpl(tag.template || tagCtx.tmpl);
		if (!arguments.length) {
			data = tag.contentCtx && $isFunction(tag.contentCtx)
				? data = tag.contentCtx(data)
				: view; // Default data context for wrapped block content is the first argument
		}
	} else {
		// This is a template.render(...) call
		tmpl = this;
	}

	if (tmpl) {
		if (!parentView && data && data._is === "view") {
			view = data; // When passing in a view to render or link (and not passing in a parent view) use the passed-in view as parentView
		}

		if (view && data === view) {
			// Inherit the data from the parent view.
			data = view.data;
		}

		isTopRenderCall = !view;
		isRenderCall = isRenderCall || isTopRenderCall;
		if (isTopRenderCall) {
			(context = context || {}).root = data; // Provide ~root as shortcut to top-level data.
		}
		if (!isRenderCall || $subSettingsAdvanced.useViews || tmpl.useViews || view && view !== topView) {
			result = renderWithViews(tmpl, data, context, noIteration, view, key, onRender, tag);
		} else {
			if (view) { // In a block
				prevData = view.data;
				prevIndex = view.index;
				view.index = indexStr;
			} else {
				view = topView;
				prevData = view.data;
				view.data = data;
				view.ctx = context;
			}
			if ($isArray(data) && !noIteration) {
				// Create a view for the array, whose child views correspond to each data item. (Note: if key and parentView are passed in
				// along with parent view, treat as insert -e.g. from view.addViews - so parentView is already the view item for array)
				for (i = 0, l = data.length; i < l; i++) {
					view.index = i;
					view.data = data[i];
					result += tmpl.fn(data[i], view, $sub);
				}
			} else {
				view.data = data;
				result += tmpl.fn(data, view, $sub);
			}
			view.data = prevData;
			view.index = prevIndex;
		}
		if (isTopRenderCall) {
			isRenderCall = undefined;
		}
	}
	return result;
}

function renderWithViews(tmpl, data, context, noIteration, view, key, onRender, tag) {
	// Render template against data as a tree of subviews (nested rendered template instances), or as a string (top-level template).
	// If the data is the parent view, treat as noIteration, re-render with the same data context.
	// tmpl can be a string (e.g. rendered by a tag.render() method), or a compiled template.
	var i, l, newView, childView, itemResult, swapContent, contentTmpl, outerOnRender, tmplName, itemVar, newCtx, tagCtx, noLinking,
		result = "";

	if (tag) {
		// This is a call from renderTag or tagCtx.render(...)
		tmplName = tag.tagName;
		tagCtx = tag.tagCtx;
		context = context ? extendCtx(context, tag.ctx) : tag.ctx;

		if (tmpl === view.content) { // {{xxx tmpl=#content}}
			contentTmpl = tmpl !== view.ctx._wrp // We are rendering the #content
				? view.ctx._wrp // #content was the tagCtx.props.tmpl wrapper of the block content - so within this view, #content will now be the view.ctx._wrp block content
				: undefined; // #content was the view.ctx._wrp block content - so within this view, there is no longer any #content to wrap.
		} else if (tmpl !== tagCtx.content) {
			if (tmpl === tag.template) { // Rendering {{tag}} tag.template, replacing block content.
				contentTmpl = tagCtx.tmpl; // Set #content to block content (or wrapped block content if tagCtx.props.tmpl is set)
				context._wrp = tagCtx.content; // Pass wrapped block content to nested views
			} else { // Rendering tagCtx.props.tmpl wrapper
				contentTmpl = tagCtx.content || view.content; // Set #content to wrapped block content
			}
		} else {
			contentTmpl = view.content; // Nested views inherit same wrapped #content property
		}

		if (tagCtx.props.link === false) {
			// link=false setting on block tag
			// We will override inherited value of link by the explicit setting link=false taken from props
			// The child views of an unlinked view are also unlinked. So setting child back to true will not have any effect.
			context = context || {};
			context.link = false;
		}
	}

	if (view) {
		onRender = onRender || view._.onRender;
		noLinking = context && context.link === false;

		if (noLinking && view._.nl) {
			onRender = undefined;
		}

		context = extendCtx(context, view.ctx);
		tagCtx = !tag && view.tag
			? view.tag.tagCtxs[view.tagElse]
			: tagCtx;
	}

	if (itemVar = tagCtx && tagCtx.props.itemVar) {
		if (itemVar[0] !== "~") {
			syntaxError("Use itemVar='~myItem'");
		}
		itemVar = itemVar.slice(1);
	}

	if (key === true) {
		swapContent = true;
		key = 0;
	}

	// If link===false, do not call onRender, so no data-linking marker nodes
	if (onRender && tag && tag._.noVws) {
		onRender = undefined;
	}
	outerOnRender = onRender;
	if (onRender === true) {
		// Used by view.refresh(). Don't create a new wrapper view.
		outerOnRender = undefined;
		onRender = view._.onRender;
	}
	// Set additional context on views created here, (as modified context inherited from the parent, and to be inherited by child views)
	context = tmpl.helpers
		? extendCtx(tmpl.helpers, context)
		: context;

	newCtx = context;
	if ($isArray(data) && !noIteration) {
		// Create a view for the array, whose child views correspond to each data item. (Note: if key and view are passed in
		// along with parent view, treat as insert -e.g. from view.addViews - so view is already the view item for array)
		newView = swapContent
			? view
			: (key !== undefined && view)
				|| new View(context, "array", view, data, tmpl, key, onRender, contentTmpl);
		newView._.nl= noLinking;
		if (view && view._.useKey) {
			// Parent is not an 'array view'
			newView._.bnd = !tag || tag._.bnd && tag; // For array views that are data bound for collection change events, set the
			// view._.bnd property to true for top-level link() or data-link="{for}", or to the tag instance for a data-bound tag, e.g. {^{for ...}}
			newView.tag = tag;
		}
		for (i = 0, l = data.length; i < l; i++) {
			// Create a view for each data item.
			childView = new View(newCtx, "item", newView, data[i], tmpl, (key || 0) + i, onRender, newView.content);
			if (itemVar) {
				(childView.ctx = $extend({}, newCtx))[itemVar] = $sub._cp(data[i], "#data", childView);
			}
			itemResult = tmpl.fn(data[i], childView, $sub);
			result += newView._.onRender ? newView._.onRender(itemResult, childView) : itemResult;
		}
	} else {
		// Create a view for singleton data object. The type of the view will be the tag name, e.g. "if" or "mytag" except for
		// "item", "array" and "data" views. A "data" view is from programmatic render(object) against a 'singleton'.
		newView = swapContent ? view : new View(newCtx, tmplName || "data", view, data, tmpl, key, onRender, contentTmpl);

		if (itemVar) {
			(newView.ctx = $extend({}, newCtx))[itemVar] = $sub._cp(data, "#data", newView);
		}

		newView.tag = tag;
		newView._.nl = noLinking;
		result += tmpl.fn(data, newView, $sub);
	}
	if (tag) {
		newView.tagElse = tagCtx.index;
		tagCtx.contentView = newView;
	}
	return outerOnRender ? outerOnRender(result, newView) : result;
}

//===========================
// Build and compile template
//===========================

// Generate a reusable function that will serve to render a template against data
// (Compile AST then build template function)

function onRenderError(e, view, fallback) {
	var message = fallback !== undefined
		? $isFunction(fallback)
			? fallback.call(view.data, e, view)
			: fallback || ""
		: "{Error: " + (e.message||e) + "}";

	if ($subSettings.onError && (fallback = $subSettings.onError.call(view.data, e, fallback && message, view)) !== undefined) {
		message = fallback; // There is a settings.debugMode(handler) onError override. Call it, and use return value (if any) to replace message
	}
	return view && !view._lc ? $converters.html(message) : message; // For data-link=\"{... onError=...}"... See onDataLinkedTagChange
}

function error(message) {
	throw new $sub.Err(message);
}

function syntaxError(message) {
	error("Syntax error\n" + message);
}

function tmplFn(markup, tmpl, isLinkExpr, convertBack, hasElse) {
	// Compile markup to AST (abtract syntax tree) then build the template function code from the AST nodes
	// Used for compiling templates, and also by JsViews to build functions for data link expressions

	//==== nested functions ====
	function pushprecedingContent(shift) {
		shift -= loc;
		if (shift) {
			content.push(markup.substr(loc, shift).replace(rNewLine, "\\n"));
		}
	}

	function blockTagCheck(tagName, block) {
		if (tagName) {
			tagName += '}}';
			//			'{{include}} block has {{/for}} with no open {{for}}'
			syntaxError((
				block
					? '{{' + block + '}} block has {{/' + tagName + ' without {{' + tagName
					: 'Unmatched or missing {{/' + tagName) + ', in template:\n' + markup);
		}
	}

	function parseTag(all, bind, tagName, converter, colon, html, codeTag, params, slash, bind2, closeBlock, index) {
/*

     bind     tagName         cvt   cln html code    params            slash   bind2         closeBlk  comment
/(?:{(\^)?{(?:(\w+(?=[\/\s}]))|(\w+)?(:)|(>)|(\*))\s*((?:[^}]|}(?!}))*?)(\/)?|{(\^)?{(?:(?:\/(\w+))\s*|!--[\s\S]*?--))}}/g

(?:
  {(\^)?{            bind
  (?:
    (\w+             tagName
      (?=[\/\s}])
    )
    |
    (\w+)?(:)        converter colon
    |
    (>)              html
    |
    (\*)             codeTag
  )
  \s*
  (                  params
    (?:[^}]|}(?!}))*?
  )
  (\/)?              slash
  |
  {(\^)?{            bind2
  (?:
    (?:\/(\w+))\s*   closeBlock
    |
    !--[\s\S]*?--    comment
  )
)
}}/g

*/
		if (codeTag && bind || slash && !tagName || params && params.slice(-1) === ":" || bind2) {
			syntaxError(all);
		}

		// Build abstract syntax tree (AST): [tagName, converter, params, content, hash, bindings, contentMarkup]
		if (html) {
			colon = ":";
			converter = HTML;
		}
		slash = slash || isLinkExpr && !hasElse;

		var late, openTagName, isLateOb,
			pathBindings = (bind || isLinkExpr) && [[]], // pathBindings is an array of arrays for arg bindings and a hash of arrays for prop bindings
			props = "",
			args = "",
			ctxProps = "",
			paramsArgs = "",
			paramsProps = "",
			paramsCtxProps = "",
			onError = "",
			useTrigger = "",
			// Block tag if not self-closing and not {{:}} or {{>}} (special case) and not a data-link expression
			block = !slash && !colon;

		//==== nested helper function ====
		tagName = tagName || (params = params || "#data", colon); // {{:}} is equivalent to {{:#data}}
		pushprecedingContent(index);
		loc = index + all.length; // location marker - parsed up to here
		if (codeTag) {
			if (allowCode) {
				content.push(["*", "\n" + params.replace(/^:/, "ret+= ").replace(rUnescapeQuotes, "$1") + ";\n"]);
			}
		} else if (tagName) {
			if (tagName === "else") {
				if (rTestElseIf.test(params)) {
					syntaxError('For "{{else if expr}}" use "{{else expr}}"');
				}
				pathBindings = current[9] && [[]];
				current[10] = markup.substring(current[10], index); // contentMarkup for block tag
				openTagName = current[11] || current[0] || syntaxError("Mismatched: " + all);
				// current[0] is tagName, but for {{else}} nodes, current[11] is tagName of preceding open tag
				current = stack.pop();
				content = current[2];
				block = true;
			}
			if (params) {
				// remove newlines from the params string, to avoid compiled code errors for unterminated strings
				parseParams(params.replace(rNewLine, " "), pathBindings, tmpl, isLinkExpr)
					.replace(rBuildHash, function(all, onerror, isCtxPrm, key, keyToken, keyValue, arg, param) {
						if (key === "this:") {
							keyValue = "undefined"; // this=some.path is always a to parameter (one-way), so don't need to compile/evaluate some.path initialization
						}
						if (param) {
							isLateOb = isLateOb || param[0] === "@";
						}
						key = "'" + keyToken + "':";
						if (arg) {
							args += isCtxPrm + keyValue + ",";
							paramsArgs += "'" + param + "',";
						} else if (isCtxPrm) { // Contextual parameter, ~foo=expr
							ctxProps += key + 'j._cp(' + keyValue + ',"' + param + '",view),';
							// Compiled code for evaluating tagCtx on a tag will have: ctx:{'foo':j._cp(compiledExpr, "expr", view)}
							paramsCtxProps += key + "'" + param + "',";
						} else if (onerror) {
							onError += keyValue;
						} else {
							if (keyToken === "trigger") {
								useTrigger += keyValue;
							}
							if (keyToken === "lateRender") {
								late = param !== "false"; // Render after first pass
							}
							props += key + keyValue + ",";
							paramsProps += key + "'" + param + "',";
							hasHandlers = hasHandlers || rHasHandlers.test(keyToken);
						}
						return "";
					}).slice(0, -1);
			}

			if (pathBindings && pathBindings[0]) {
				pathBindings.pop(); // Remove the binding that was prepared for next arg. (There is always an extra one ready).
			}

			newNode = [
					tagName,
					converter || !!convertBack || hasHandlers || "",
					block && [],
					parsedParam(paramsArgs || (tagName === ":" ? "'#data'," : ""), paramsProps, paramsCtxProps), // {{:}} equivalent to {{:#data}}
					parsedParam(args || (tagName === ":" ? "data," : ""), props, ctxProps),
					onError,
					useTrigger,
					late,
					isLateOb,
					pathBindings || 0
				];
			content.push(newNode);
			if (block) {
				stack.push(current);
				current = newNode;
				current[10] = loc; // Store current location of open tag, to be able to add contentMarkup when we reach closing tag
				current[11] = openTagName; // Used for checking syntax (matching close tag)
			}
		} else if (closeBlock) {
			blockTagCheck(closeBlock !== current[0] && closeBlock !== current[11] && closeBlock, current[0]); // Check matching close tag name
			current[10] = markup.substring(current[10], index); // contentMarkup for block tag
			current = stack.pop();
		}
		blockTagCheck(!current && closeBlock);
		content = current[2];
	}
	//==== /end of nested functions ====

	var i, result, newNode, hasHandlers, bindings,
		allowCode = $subSettings.allowCode || tmpl && tmpl.allowCode
			|| $viewsSettings.allowCode === true, // include direct setting of settings.allowCode true for backward compat only
		astTop = [],
		loc = 0,
		stack = [],
		content = astTop,
		current = [,,astTop];

	if (allowCode && tmpl._is) {
		tmpl.allowCode = allowCode;
	}

//TODO	result = tmplFnsCache[markup]; // Only cache if template is not named and markup length < ...,
//and there are no bindings or subtemplates?? Consider standard optimization for data-link="a.b.c"
//		if (result) {
//			tmpl.fn = result;
//		} else {

//		result = markup;
	if (isLinkExpr) {
		if (convertBack !== undefined) {
			markup = markup.slice(0, -convertBack.length - 2) + delimCloseChar0;
		}
		markup = delimOpenChar0 + markup + delimCloseChar1;
	}

	blockTagCheck(stack[0] && stack[0][2].pop()[0]);
	// Build the AST (abstract syntax tree) under astTop
	markup.replace(rTag, parseTag);

	pushprecedingContent(markup.length);

	if (loc = astTop[astTop.length - 1]) {
		blockTagCheck(typeof loc !== STRING && (+loc[10] === loc[10]) && loc[0]);
	}
//			result = tmplFnsCache[markup] = buildCode(astTop, tmpl);
//		}

	if (isLinkExpr) {
		result = buildCode(astTop, markup, isLinkExpr);
		bindings = [];
		i = astTop.length;
		while (i--) {
			bindings.unshift(astTop[i][9]); // With data-link expressions, pathBindings array for tagCtx[i] is astTop[i][9]
		}
		setPaths(result, bindings);
	} else {
		result = buildCode(astTop, tmpl);
	}
	return result;
}

function setPaths(fn, pathsArr) {
	var key, paths,
		i = 0,
		l = pathsArr.length;
	fn.deps = [];
	fn.paths = []; // The array of path binding (array/dictionary)s for each tag/else block's args and props
	for (; i < l; i++) {
		fn.paths.push(paths = pathsArr[i]);
		for (key in paths) {
			if (key !== "_jsvto" && paths.hasOwnProperty(key) && paths[key].length && !paths[key].skp) {
				fn.deps = fn.deps.concat(paths[key]); // deps is the concatenation of the paths arrays for the different bindings
			}
		}
	}
}

function parsedParam(args, props, ctx) {
	return [args.slice(0, -1), props.slice(0, -1), ctx.slice(0, -1)];
}

function paramStructure(paramCode, paramVals) {
	return '\n\tparams:{args:[' + paramCode[0] + '],\n\tprops:{' + paramCode[1] + '}'
		+ (paramCode[2] ? ',\n\tctx:{' + paramCode[2] + '}' : "")
		+ '},\n\targs:[' + paramVals[0] + '],\n\tprops:{' + paramVals[1] + '}'
		+ (paramVals[2] ? ',\n\tctx:{' + paramVals[2] + '}' : "");
}

function parseParams(params, pathBindings, tmpl, isLinkExpr) {

	function parseTokens(all, lftPrn0, lftPrn, bound, path, operator, err, eq, path2, late, prn,
												comma, lftPrn2, apos, quot, rtPrn, rtPrnDot, prn2, space, index, full) {
	// /(\()(?=\s*\()|(?:([([])\s*)?(?:(\^?)(~?[\w$.^]+)?\s*((\+\+|--)|\+|-|~(?![\w$])|&&|\|\||===|!==|==|!=|<=|>=|[<>%*:?\/]|(=))\s*|(!*?(@)?[#~]?[\w$.^]+)([([])?)|(,\s*)|(?:(\()\s*)?\\?(?:(')|("))|(?:\s*(([)\]])(?=[.^]|\s*$|[^([])|[)\]])([([]?))|(\s+)/g,
	//lftPrn0           lftPrn         bound     path               operator     err                                          eq      path2 late            prn      comma  lftPrn2          apos quot        rtPrn  rtPrnDot                  prn2     space
	// (left paren? followed by (path? followed by operator) or (path followed by paren?)) or comma or apos or quot or right paren or space

		function parsePath(allPath, not, object, helper, view, viewProperty, pathTokens, leafToken) {
			// /^(!*?)(?:null|true|false|\d[\d.]*|([\w$]+|\.|~([\w$]+)|#(view|([\w$]+))?)([\w$.^]*?)(?:[.[^]([\w$]+)\]?)?)$/g,
			//    not                               object     helper    view  viewProperty pathTokens      leafToken
			subPath = object === ".";
			if (object) {
				path = path.slice(not.length);
				if (/^\.?constructor$/.test(leafToken||path)) {
					syntaxError(allPath);
				}
				if (!subPath) {
					allPath = (late // late path @a.b.c: not throw on 'property of undefined' if a undefined, and will use _getOb() after linking to resolve late.
							? (isLinkExpr ? '' : '(ltOb.lt=ltOb.lt||') + '(ob='
							: ""
						)
						+ (helper
							? 'view.ctxPrm("' + helper + '")'
							: view
								? "view"
								: "data")
						+ (late
							? ')===undefined' + (isLinkExpr ? '' : ')') + '?"":view._getOb(ob,"'
							: ""
						)
						+ (leafToken
							? (viewProperty
								? "." + viewProperty
								: helper
									? ""
									: (view ? "" : "." + object)
								) + (pathTokens || "")
							: (leafToken = helper ? "" : view ? viewProperty || "" : object, ""));
					allPath = allPath + (leafToken ? "." + leafToken : "");

					allPath = not + (allPath.slice(0, 9) === "view.data"
						? allPath.slice(5) // convert #view.data... to data...
						: allPath)
					+ (late
							? (isLinkExpr ? '"': '",ltOb') + (prn ? ',1)':')')
							: ""
						);
				}
				if (bindings) {
					binds = named === "_linkTo" ? (bindto = pathBindings._jsvto = pathBindings._jsvto || []) : bndCtx.bd;
					if (theOb = subPath && binds[binds.length-1]) {
						if (theOb._cpfn) { // Computed property exprOb
							while (theOb.sb) {
								theOb = theOb.sb;
							}
							if (theOb.prm) {
								if (theOb.bnd) {
									path = "^" + path.slice(1);
								}
								theOb.sb = path;
								theOb.bnd = theOb.bnd || path[0] === "^";
							}
						}
					} else {
						binds.push(path);
					}
					if (prn && !subPath) {
						pathStart[fnDp] = ind;
						compiledPathStart[fnDp] = compiledPath[fnDp].length;
					}
				}
			}
			return allPath;
		}

		//bound = bindings && bound;
		if (bound && !eq) {
			path = bound + path; // e.g. some.fn(...)^some.path - so here path is "^some.path"
		}
		operator = operator || "";
		lftPrn2 = lftPrn2 || "";
		lftPrn = lftPrn || lftPrn0 || lftPrn2;
		path = path || path2;

		if (late && (late = !/\)|]/.test(full[index-1]))) {
			path = path.slice(1).split(".").join("^"); // Late path @z.b.c. Use "^" rather than "." to ensure that deep binding will be used
		}
		// Could do this - but not worth perf cost?? :-
		// if (!path.lastIndexOf("#data.", 0)) { path = path.slice(6); } // If path starts with "#data.", remove that.
		prn = prn || prn2 || "";
		var expr, binds, theOb, newOb, subPath, lftPrnFCall, ret,
			ind = index;

		if (!aposed && !quoted) {
			if (err) {
				syntaxError(params);
			}
			if (rtPrnDot && bindings) {
				// This is a binding to a path in which an object is returned by a helper/data function/expression, e.g. foo()^x.y or (a?b:c)^x.y
				// We create a compiled function to get the object instance (which will be called when the dependent data of the subexpression changes,
				// to return the new object, and trigger re-binding of the subsequent path)
				expr = pathStart[fnDp-1];
				if (full.length - 1 > ind - (expr || 0)) { // We need to compile a subexpression
					expr = $.trim(full.slice(expr, ind + all.length));
					binds = bindto || bndStack[fnDp-1].bd;
					// Insert exprOb object, to be used during binding to return the computed object
					theOb = binds[binds.length-1];
					if (theOb && theOb.prm) {
						while (theOb.sb && theOb.sb.prm) {
							theOb = theOb.sb;
						}
						newOb = theOb.sb = {path: theOb.sb, bnd: theOb.bnd};
					} else {
						binds.push(newOb = {path: binds.pop()}); // Insert exprOb object, to be used during binding to return the computed object
					}
					if (theOb && theOb.sb === newOb) {
						compiledPath[fnDp] = compiledPath[fnDp-1].slice(theOb._cpPthSt) + compiledPath[fnDp];
						compiledPath[fnDp-1] = compiledPath[fnDp-1].slice(0, theOb._cpPthSt);
					}
					newOb._cpPthSt = compiledPathStart[fnDp-1];
					newOb._cpKey = expr;

					compiledPath[fnDp] += full.slice(prevIndex, index);
					prevIndex = index;

					newOb._cpfn = cpFnStore[expr] = cpFnStore[expr] || // Compiled function for computed value: get from store, or compile and store
						new Function("data,view,j", // Compiled function for computed value in template
					"//" + expr + "\nvar v;\nreturn ((v=" + compiledPath[fnDp] + (rtPrn === "]" ? ")]" : rtPrn) + ")!=null?v:null);");

					compiledPath[fnDp-1] += (fnCall[prnDp] && $subSettingsAdvanced.cache ? "view.getCache(\"" + expr.replace(rEscapeQuotes, "\\$&") + "\"" : compiledPath[fnDp]);

					newOb.prm = bndCtx.bd;
					newOb.bnd = newOb.bnd || newOb.path && newOb.path.indexOf("^") >= 0;
				}
				compiledPath[fnDp] = "";
			}
			if (prn === "[") {
				prn = "[j._sq(";
			}
			if (lftPrn === "[") {
				lftPrn = "[j._sq(";
			}
		}
		ret = (aposed
			// within single-quoted string
			? (aposed = !apos, (aposed ? all : lftPrn2 + '"'))
			: quoted
			// within double-quoted string
				? (quoted = !quot, (quoted ? all : lftPrn2 + '"'))
				:
			(
				(lftPrn
					? (
						prnStack[++prnDp] = true,
						prnInd[prnDp] = 0,
						bindings && (
							pathStart[fnDp++] = ind++,
							bndCtx = bndStack[fnDp] = {bd: []},
							compiledPath[fnDp] = "",
							compiledPathStart[fnDp] = 1
						),
						lftPrn) // Left paren, (not a function call paren)
					: "")
				+ (space
					? (prnDp
						? "" // A space within parens or within function call parens, so not a separator for tag args
			// New arg or prop - so insert backspace \b (\x08) as separator for named params, used subsequently by rBuildHash, and prepare new bindings array
						: (paramIndex = full.slice(paramIndex, ind), named
							? (named = boundName = bindto = false, "\b")
							: "\b,") + paramIndex + (paramIndex = ind + all.length, bindings && pathBindings.push(bndCtx.bd = []), "\b")
					)
					: eq
			// named param. Remove bindings for arg and create instead bindings array for prop
						? (fnDp && syntaxError(params), bindings && pathBindings.pop(), named = "_" + path, boundName = bound, paramIndex = ind + all.length,
								bindings && ((bindings = bndCtx.bd = pathBindings[named] = []), bindings.skp = !bound), path + ':')
						: path
			// path
							? (path.split("^").join(".").replace($sub.rPath, parsePath)
								+ (prn || operator)
							)
							: operator
			// operator
								? operator
								: rtPrn
			// function
									? rtPrn === "]" ? ")]" : ")"
									: comma
										? (fnCall[prnDp] || syntaxError(params), ",") // We don't allow top-level literal arrays or objects
										: lftPrn0
											? ""
											: (aposed = apos, quoted = quot, '"')
			))
		);

		if (!aposed && !quoted) {
			if (rtPrn) {
				fnCall[prnDp] = false;
				prnDp--;
			}
		}

		if (bindings) {
			if (!aposed && !quoted) {
				if (rtPrn) {
					if (prnStack[prnDp+1]) {
						bndCtx = bndStack[--fnDp];
						prnStack[prnDp+1] = false;
					}
					prnStart = prnInd[prnDp+1];
				}
				if (prn) {
					prnInd[prnDp+1] = compiledPath[fnDp].length + (lftPrn ? 1 : 0);
					if (path || rtPrn) {
						bndCtx = bndStack[++fnDp] = {bd: []};
						prnStack[prnDp+1] = true;
					}
				}
			}

			compiledPath[fnDp] = (compiledPath[fnDp]||"") + full.slice(prevIndex, index);
			prevIndex = index+all.length;

			if (!aposed && !quoted) {
				if (lftPrnFCall = lftPrn && prnStack[prnDp+1]) {
					compiledPath[fnDp-1] += lftPrn;
					compiledPathStart[fnDp-1]++;
				}
				if (prn === "(" && subPath && !newOb) {
					compiledPath[fnDp] = compiledPath[fnDp-1].slice(prnStart) + compiledPath[fnDp];
					compiledPath[fnDp-1] = compiledPath[fnDp-1].slice(0, prnStart);
				}
			}
			compiledPath[fnDp] += lftPrnFCall ? ret.slice(1) : ret;
		}

		if (!aposed && !quoted && prn) {
			prnDp++;
			if (path && prn === "(") {
				fnCall[prnDp] = true;
			}
		}

		if (!aposed && !quoted && prn2) {
			if (bindings) {
				compiledPath[fnDp] += prn;
			}
			ret += prn;
		}
		return ret;
	}

	var named, bindto, boundName, result,
		quoted, // boolean for string content in double quotes
		aposed, // or in single quotes
		bindings = pathBindings && pathBindings[0], // bindings array for the first arg
		bndCtx = {bd: bindings},
		bndStack = {0: bndCtx},
		paramIndex = 0, // list,
		// The following are used for tracking path parsing including nested paths, such as "a.b(c^d + (e))^f", and chained computed paths such as
		// "a.b().c^d().e.f().g" - which has four chained paths, "a.b()", "^c.d()", ".e.f()" and ".g"
		prnDp = 0,     // For tracking paren depth (not function call parens)
		fnDp = 0,      // For tracking depth of function call parens
		prnInd = {},   // We are in a function call
		prnStart = 0,  // tracks the start of the current path such as c^d() in the above example
		prnStack = {}, // tracks parens which are not function calls, and so are associated with new bndStack contexts
		fnCall = {},   // We are in a function call
		pathStart = {},// tracks the start of the current path such as c^d() in the above example
		compiledPathStart = {0: 0},
		compiledPath = {0:""},
		prevIndex = 0;

	if (params[0] === "@") {
		params = params.replace(rBracketQuote, ".");
	}
	result = (params + (tmpl ? " " : "")).replace($sub.rPrm, parseTokens);

	if (bindings) {
		result = compiledPath[0];
	}

	return !prnDp && result || syntaxError(params); // Syntax error if unbalanced parens in params expression
}

function buildCode(ast, tmpl, isLinkExpr) {
	// Build the template function code from the AST nodes, and set as property on the passed-in template object
	// Used for compiling templates, and also by JsViews to build functions for data link expressions
	var i, node, tagName, converter, tagCtx, hasTag, hasEncoder, getsVal, hasCnvt, useCnvt, tmplBindings, pathBindings, params, boundOnErrStart,
		boundOnErrEnd, tagRender, nestedTmpls, tmplName, nestedTmpl, tagAndElses, content, markup, nextIsElse, oldCode, isElse, isGetVal, tagCtxFn,
		onError, tagStart, trigger, lateRender, retStrOpen, retStrClose,
		tmplBindingKey = 0,
		useViews = $subSettingsAdvanced.useViews || tmpl.useViews || tmpl.tags || tmpl.templates || tmpl.helpers || tmpl.converters,
		code = "",
		tmplOptions = {},
		l = ast.length;

	if (typeof tmpl === STRING) {
		tmplName = isLinkExpr ? 'data-link="' + tmpl.replace(rNewLine, " ").slice(1, -1) + '"' : tmpl;
		tmpl = 0;
	} else {
		tmplName = tmpl.tmplName || "unnamed";
		if (tmpl.allowCode) {
			tmplOptions.allowCode = true;
		}
		if (tmpl.debug) {
			tmplOptions.debug = true;
		}
		tmplBindings = tmpl.bnds;
		nestedTmpls = tmpl.tmpls;
	}
	for (i = 0; i < l; i++) {
		// AST nodes: [0: tagName, 1: converter, 2: content, 3: params, 4: code, 5: onError, 6: trigger, 7:pathBindings, 8: contentMarkup]
		node = ast[i];

		// Add newline for each callout to t() c() etc. and each markup string
		if (typeof node === STRING) {
			// a markup string to be inserted
			code += '+"' + node + '"';
		} else {
			// a compiled tag expression to be inserted
			tagName = node[0];
			if (tagName === "*") {
				// Code tag: {{* }}
				code += ";\n" + node[1] + "\nret=ret";
			} else {
				converter = node[1];
				content = !isLinkExpr && node[2];
				tagCtx = paramStructure(node[3], params = node[4]);
				trigger = node[6];
				lateRender = node[7];
				if (node[8]) { // latePath @a.b.c or @~a.b.c
					retStrOpen = "\nvar ob,ltOb={},ctxs=";
					retStrClose = ";\nctxs.lt=ltOb.lt;\nreturn ctxs;";
				} else {
					retStrOpen = "\nreturn ";
					retStrClose = "";
				}
				markup = node[10] && node[10].replace(rUnescapeQuotes, "$1");
				if (isElse = tagName === "else") {
					if (pathBindings) {
						pathBindings.push(node[9]);
					}
				} else {
					onError = node[5] || $subSettings.debugMode !== false && "undefined"; // If debugMode not false, set default onError handler on tag to "undefined" (see onRenderError)
					if (tmplBindings && (pathBindings = node[9])) { // Array of paths, or false if not data-bound
						pathBindings = [pathBindings];
						tmplBindingKey = tmplBindings.push(1); // Add placeholder in tmplBindings for compiled function
					}
				}
				useViews = useViews || params[1] || params[2] || pathBindings || /view.(?!index)/.test(params[0]);
				// useViews is for perf optimization. For render() we only use views if necessary - for the more advanced scenarios.
				// We use views if there are props, contextual properties or args with #... (other than #index) - but you can force
				// using the full view infrastructure, (and pay a perf price) by opting in: Set useViews: true on the template, manually...
				if (isGetVal = tagName === ":") {
					if (converter) {
						tagName = converter === HTML ? ">" : converter + tagName;
					}
				} else {
					if (content) { // TODO optimize - if content.length === 0 or if there is a tmpl="..." specified - set content to null / don't run this compilation code - since content won't get used!!
						// Create template object for nested template
						nestedTmpl = tmplObject(markup, tmplOptions);
						nestedTmpl.tmplName = tmplName + "/" + tagName;
						// Compile to AST and then to compiled function
						nestedTmpl.useViews = nestedTmpl.useViews || useViews;
						buildCode(content, nestedTmpl);
						useViews = nestedTmpl.useViews;
						nestedTmpls.push(nestedTmpl);
					}

					if (!isElse) {
						// This is not an else tag.
						tagAndElses = tagName;
						useViews = useViews || tagName && (!$tags[tagName] || !$tags[tagName].flow);
						// Switch to a new code string for this bound tag (and its elses, if it has any) - for returning the tagCtxs array
						oldCode = code;
						code = "";
					}
					nextIsElse = ast[i + 1];
					nextIsElse = nextIsElse && nextIsElse[0] === "else";
				}
				tagStart = onError ? ";\ntry{\nret+=" : "\n+";
				boundOnErrStart = "";
				boundOnErrEnd = "";

				if (isGetVal && (pathBindings || trigger || converter && converter !== HTML || lateRender)) {
					// For convertVal we need a compiled function to return the new tagCtx(s)
					tagCtxFn = new Function("data,view,j", "// " + tmplName + " " + (++tmplBindingKey) + " " + tagName
						+ retStrOpen + "{" + tagCtx + "};" + retStrClose);
					tagCtxFn._er = onError;
					tagCtxFn._tag = tagName;
					tagCtxFn._bd = !!pathBindings; // data-linked tag {^{.../}}
					tagCtxFn._lr = lateRender;

					if (isLinkExpr) {
						return tagCtxFn;
					}

					setPaths(tagCtxFn, pathBindings);
					tagRender = 'c("' + converter + '",view,';
					useCnvt = true;
					boundOnErrStart = tagRender + tmplBindingKey + ",";
					boundOnErrEnd = ")";
				}
				code += (isGetVal
					? (isLinkExpr ? (onError ? "try{\n" : "") + "return " : tagStart) + (useCnvt // Call _cnvt if there is a converter: {{cnvt: ... }} or {^{cnvt: ... }}
						? (useCnvt = undefined, useViews = hasCnvt = true, tagRender + (tagCtxFn
							? ((tmplBindings[tmplBindingKey - 1] = tagCtxFn), tmplBindingKey) // Store the compiled tagCtxFn in tmpl.bnds, and pass the key to convertVal()
							: "{" + tagCtx + "}") + ")")
						: tagName === ">"
							? (hasEncoder = true, "h(" + params[0] + ")")
							: (getsVal = true, "((v=" + params[0] + ')!=null?v:' + (isLinkExpr ? 'null)' : '"")'))
							// Non strict equality so data-link="title{:expr}" with expr=null/undefined removes title attribute
					)
					: (hasTag = true, "\n{view:view,content:false,tmpl:" // Add this tagCtx to the compiled code for the tagCtxs to be passed to renderTag()
						+ (content ? nestedTmpls.length : "false") + "," // For block tags, pass in the key (nestedTmpls.length) to the nested content template
						+ tagCtx + "},"));

				if (tagAndElses && !nextIsElse) {
					// This is a data-link expression or an inline tag without any elses, or the last {{else}} of an inline tag
					// We complete the code for returning the tagCtxs array
					code = "[" + code.slice(0, -1) + "]";
					tagRender = 't("' + tagAndElses + '",view,this,';
					if (isLinkExpr || pathBindings) {
						// This is a bound tag (data-link expression or inline bound tag {^{tag ...}}) so we store a compiled tagCtxs function in tmp.bnds
						code = new Function("data,view,j", " // " + tmplName + " " + tmplBindingKey + " " + tagAndElses + retStrOpen + code
							+ retStrClose);
						code._er = onError;
						code._tag = tagAndElses;
						if (pathBindings) {
							setPaths(tmplBindings[tmplBindingKey - 1] = code, pathBindings);
						}
						code._lr = lateRender;
						if (isLinkExpr) {
							return code; // For a data-link expression we return the compiled tagCtxs function
						}
						boundOnErrStart = tagRender + tmplBindingKey + ",undefined,";
						boundOnErrEnd = ")";
					}

					// This is the last {{else}} for an inline tag.
					// For a bound tag, pass the tagCtxs fn lookup key to renderTag.
					// For an unbound tag, include the code directly for evaluating tagCtxs array
					code = oldCode + tagStart + tagRender + (pathBindings && tmplBindingKey || code) + ")";
					pathBindings = 0;
					tagAndElses = 0;
				}
				if (onError && !nextIsElse) {
					useViews = true;
					code += ';\n}catch(e){ret' + (isLinkExpr ? "urn " : "+=") + boundOnErrStart + 'j._err(e,view,' + onError + ')' + boundOnErrEnd + ';}' + (isLinkExpr ? "" : '\nret=ret');
				}
			}
		}
	}
	// Include only the var references that are needed in the code
	code = "// " + tmplName
		+ (tmplOptions.debug ? "\ndebugger;" : "")
		+ "\nvar v"
		+ (hasTag ? ",t=j._tag" : "")                // has tag
		+ (hasCnvt ? ",c=j._cnvt" : "")              // converter
		+ (hasEncoder ? ",h=j._html" : "")           // html converter
		+ (isLinkExpr
				? (node[8] // late @... path?
						? ", ob"
						: ""
					) + ";\n"
				: ',ret=""')
		+ code
		+ (isLinkExpr ? "\n" : ";\nreturn ret;");

	try {
		code = new Function("data,view,j", code);
	} catch (e) {
		syntaxError("Compiled template code:\n\n" + code + '\n: "' + (e.message||e) + '"');
	}
	if (tmpl) {
		tmpl.fn = code;
		tmpl.useViews = !!useViews;
	}
	return code;
}

//==========
// Utilities
//==========

// Merge objects, in particular contexts which inherit from parent contexts
function extendCtx(context, parentContext) {
	// Return copy of parentContext, unless context is defined and is different, in which case return a new merged context
	// If neither context nor parentContext are defined, return undefined
	return context && context !== parentContext
		? (parentContext
			? $extend($extend({}, parentContext), context)
			: context)
		: parentContext && $extend({}, parentContext);
}

function getTargetProps(source, tagCtx) {
	// this pointer is theMap - which has tagCtx.props too
	// arguments: tagCtx.args.
	var key, prop,
		map = tagCtx.map,
		propsArr = map && map.propsArr;

	if (!propsArr) { // map.propsArr is the full array of {key:..., prop:...} objects
		propsArr = [];
		if (typeof source === OBJECT || $isFunction(source)) {
			for (key in source) {
				prop = source[key];
				if (key !== $expando && source.hasOwnProperty(key) && (!tagCtx.props.noFunctions || !$.isFunction(prop))) {
					propsArr.push({key: key, prop: prop});
				}
			}
		}
		if (map) {
			map.propsArr = map.options && propsArr; // If bound {^{props}} and not isRenderCall, store propsArr on map (map.options is defined only for bound, && !isRenderCall)
		}
	}
	return getTargetSorted(propsArr, tagCtx); // Obtains map.tgt, by filtering, sorting and splicing the full propsArr
}

function getTargetSorted(value, tagCtx) {
	// getTgt
	var mapped, start, end,
		tag = tagCtx.tag,
		props = tagCtx.props,
		propParams = tagCtx.params.props,
		filter = props.filter,
		sort = props.sort,
		directSort = sort === true,
		step = parseInt(props.step),
		reverse = props.reverse ? -1 : 1;

	if (!$isArray(value)) {
		return value;
	}
	if (directSort || sort && typeof sort === STRING) {
		// Temporary mapped array holds objects with index and sort-value
		mapped = value.map(function(item, i) {
			item = directSort ? item : getPathObject(item, sort);
			return {i: i, v: typeof item === STRING ? item.toLowerCase() : item};
		});
		// Sort mapped array
		mapped.sort(function(a, b) {
			return a.v > b.v ? reverse : a.v < b.v ? -reverse : 0;
		});
		// Map to new array with resulting order
		value = mapped.map(function(item){
			return value[item.i];
		});
	} else if ((sort || reverse < 0) && !tag.dataMap) {
		value = value.slice(); // Clone array first if not already a new array
	}
	if ($isFunction(sort)) {
		value = value.sort(function() { // Wrap the sort function to provide tagCtx as 'this' pointer
			return sort.apply(tagCtx, arguments);
		});
	}
	if (reverse < 0 && (!sort || $isFunction(sort))) { // Reverse result if not already reversed in sort
		value = value.reverse();
	}

	if (value.filter && filter) { // IE8 does not support filter
		value = value.filter(filter, tagCtx);
		if (tagCtx.tag.onFilter) {
			tagCtx.tag.onFilter(tagCtx);
		}
	}

	if (propParams.sorted) {
		mapped = (sort || reverse < 0) ? value : value.slice();
		if (tag.sorted) {
			$.observable(tag.sorted).refresh(mapped); // Note that this might cause the start and end props to be modified - e.g. by pager tag control
		} else {
			tagCtx.map.sorted = mapped;
		}
	}

	start = props.start; // Get current value - after possible changes triggered by tag.sorted refresh() above
	end = props.end;
	if (propParams.start && start === undefined || propParams.end && end === undefined) {
		start = end = 0;
	}
	if (!isNaN(start) || !isNaN(end)) { // start or end specified, but not the auto-create Number array scenario of {{for start=xxx end=yyy}}
		start = +start || 0;
		end = end === undefined || end > value.length ? value.length : +end;
		value = value.slice(start, end);
	}
	if (step > 1) {
		start = 0;
		end = value.length;
		mapped = [];
		for (; start<end; start+=step) {
			mapped.push(value[start]);
		}
		value = mapped;
	}
	if (propParams.paged && tag.paged) {
		$observable(tag.paged).refresh(value);
	}

	return value;
}

/** Render the template as a string, using the specified data and helpers/context
* $("#tmpl").render()
*
* @param {any}        data
* @param {hash}       [helpersOrContext]
* @param {boolean}    [noIteration]
* @returns {string}   rendered template
*/
function $fnRender(data, context, noIteration) {
	var tmplElem = this.jquery && (this[0] || error('Unknown template')), // Targeted element not found for jQuery template selector such as "#myTmpl"
		tmpl = tmplElem.getAttribute(tmplAttr);

	return renderContent.call(tmpl && $.data(tmplElem)[jsvTmpl] || $templates(tmplElem),
		data, context, noIteration);
}

//========================== Register converters ==========================

function getCharEntity(ch) {
	// Get character entity for HTML, Attribute and optional data encoding
	return charEntities[ch] || (charEntities[ch] = "&#" + ch.charCodeAt(0) + ";");
}

function getCharFromEntity(match, token) {
	// Get character from HTML entity, for optional data unencoding
	return charsFromEntities[token] || "";
}

function htmlEncode(text) {
	// HTML encode: Replace < > & ' " ` etc. by corresponding entities.
	return text != undefined ? rIsHtml.test(text) && ("" + text).replace(rHtmlEncode, getCharEntity) || text : "";
}

function dataEncode(text) {
	// Encode just < > and & - intended for 'safe data' along with {{:}} rather than {{>}}
  return typeof text === STRING ? text.replace(rDataEncode, getCharEntity) : text;
}

function dataUnencode(text) {
  // Unencode just < > and & - intended for 'safe data' along with {{:}} rather than {{>}}
  return  typeof text === STRING ? text.replace(rDataUnencode, getCharFromEntity) : text;
}

//========================== Initialize ==========================

$sub = $views.sub;
$viewsSettings = $views.settings;

if (!(jsr || $ && $.render)) {
	// JsRender/JsViews not already loaded (or loaded without jQuery, and we are now moving from jsrender namespace to jQuery namepace)
	for (jsvStoreName in jsvStores) {
		registerStore(jsvStoreName, jsvStores[jsvStoreName]);
	}

	$converters = $views.converters;
	$helpers = $views.helpers;
	$tags = $views.tags;

	$sub._tg.prototype = {
		baseApply: baseApply,
		cvtArgs: convertArgs,
		bndArgs: convertBoundArgs,
		ctxPrm: contextParameter
	};

	topView = $sub.topView = new View();

	//BROWSER-SPECIFIC CODE
	if ($) {

		////////////////////////////////////////////////////////////////////////////////////////////////
		// jQuery (= $) is loaded

		$.fn.render = $fnRender;
		$expando = $.expando;
		if ($.observable) {
			if (versionNumber !== (versionNumber = $.views.jsviews)) {
				// Different version of jsRender was loaded
				throw "jquery.observable.js requires jsrender.js " + versionNumber;
			}
			$extend($sub, $.views.sub); // jquery.observable.js was loaded before jsrender.js
			$views.map = $.views.map;
		}

	} else {
		////////////////////////////////////////////////////////////////////////////////////////////////
		// jQuery is not loaded.

		$ = {};

		if (setGlobals) {
			global.jsrender = $; // We are loading jsrender.js from a script element, not AMD or CommonJS, so set global
		}

		// Error warning if jsrender.js is used as template engine on Node.js (e.g. Express or Hapi...)
		// Use jsrender-node.js instead...
		$.renderFile = $.__express = $.compile = function() { throw "Node.js: use npm jsrender, or jsrender-node.js"; };

		//END BROWSER-SPECIFIC CODE
		$.isFunction = function(ob) {
			return typeof ob === "function";
		};

		$.isArray = Array.isArray || function(obj) {
			return ({}.toString).call(obj) === "[object Array]";
		};

		$sub._jq = function(jq) { // private method to move from JsRender APIs from jsrender namespace to jQuery namespace
			if (jq !== $) {
				$extend(jq, $); // map over from jsrender namespace to jQuery namespace
				$ = jq;
				$.fn.render = $fnRender;
				delete $.jsrender;
				$expando = $.expando;
			}
		};

		$.jsrender = versionNumber;
	}
	$subSettings = $sub.settings;
	$subSettings.allowCode = false;
	$isFunction = $.isFunction;
	$.render = $render;
	$.views = $views;
	$.templates = $templates = $views.templates;

	for (setting in $subSettings) {
		addSetting(setting);
	}

	/**
	* $.views.settings.debugMode(true)
	* @param {boolean} debugMode
	* @returns {Settings}
	*
	* debugMode = $.views.settings.debugMode()
	* @returns {boolean}
	*/
	($viewsSettings.debugMode = function(debugMode) {
		return debugMode === undefined
			? $subSettings.debugMode
			: (
				$subSettings._clFns && $subSettings._clFns(), // Clear linkExprStore (cached compiled expressions), since debugMode setting affects compilation for expressions
				$subSettings.debugMode = debugMode,
				$subSettings.onError = typeof debugMode === STRING
					? function() { return debugMode; }
					: $isFunction(debugMode)
						? debugMode
						: undefined,
				$viewsSettings);
	})(false); // jshint ignore:line

	$subSettingsAdvanced = $subSettings.advanced = {
		cache: true, // By default use cached values of computed values (Otherwise, set advanced cache setting to false)
		useViews: false,
		_jsv: false // For global access to JsViews store
	};

	//========================== Register tags ==========================

	$tags({
		"if": {
			render: function(val) {
				// This function is called once for {{if}} and once for each {{else}}.
				// We will use the tag.rendering object for carrying rendering state across the calls.
				// If not done (a previous block has not been rendered), look at expression for this block and render the block if expression is truthy
				// Otherwise return ""
				var self = this,
					tagCtx = self.tagCtx,
					ret = (self.rendering.done || !val && (tagCtx.args.length || !tagCtx.index))
						? ""
						: (self.rendering.done = true,
							self.selected = tagCtx.index,
							undefined); // Test is satisfied, so render content on current context
				return ret;
			},
			contentCtx: true, // Inherit parent view data context
			flow: true
		},
		"for": {
			sortDataMap: dataMap(getTargetSorted),
			init: function(val, cloned) {
				this.setDataMap(this.tagCtxs);
			},
			render: function(val) {
				// This function is called once for {{for}} and once for each {{else}}.
				// We will use the tag.rendering object for carrying rendering state across the calls.
				var value, filter, srtField, isArray, i, sorted, end, step,
					self = this,
					tagCtx = self.tagCtx,
					range = tagCtx.argDefault === false,
					props = tagCtx.props,
					iterate = range || tagCtx.args.length, // Not final else and not auto-create range
					result = "",
					done = 0;

				if (!self.rendering.done) {
					value = iterate ? val : tagCtx.view.data; // For the final else, defaults to current data without iteration.

					if (range) {
						range = props.reverse ? "unshift" : "push";
						end = +props.end;
						step = +props.step || 1;
						value = []; // auto-create integer array scenario of {{for start=xxx end=yyy}}
						for (i = +props.start || 0; (end - i) * step > 0; i += step) {
							value[range](i);
						}
					}
					if (value !== undefined) {
						isArray = $isArray(value);
						result += tagCtx.render(value, !iterate || props.noIteration);
						// Iterates if data is an array, except on final else - or if noIteration property
						// set to true. (Use {{include}} to compose templates without array iteration)
						done += isArray ? value.length : 1;
					}
					if (self.rendering.done = done) {
						self.selected = tagCtx.index;
					}
					// If nothing was rendered we will look at the next {{else}}. Otherwise, we are done.
				}
				return result;
			},
			setDataMap: function(tagCtxs) {
				var tagCtx, props, paramsProps,
					self = this,
					l = tagCtxs.length;
				while (l--) {
					tagCtx = tagCtxs[l];
					props = tagCtx.props;
					paramsProps = tagCtx.params.props;
					tagCtx.argDefault = props.end === undefined || tagCtx.args.length > 0; // Default to #data except for auto-create range scenario {{for start=xxx end=yyy step=zzz}}
					props.dataMap = (tagCtx.argDefault !== false && $isArray(tagCtx.args[0]) &&
						(paramsProps.sort || paramsProps.start || paramsProps.end || paramsProps.step || paramsProps.filter || paramsProps.reverse
						|| props.sort || props.start || props.end || props.step || props.filter || props.reverse))
						&& self.sortDataMap;
				}
			},
			flow: true
		},
		props: {
			baseTag: "for",
			dataMap: dataMap(getTargetProps),
			init: noop, // Don't execute the base init() of the "for" tag
			flow: true
		},
		include: {
			flow: true
		},
		"*": {
			// {{* code... }} - Ignored if template.allowCode and $.views.settings.allowCode are false. Otherwise include code in compiled template
			render: retVal,
			flow: true
		},
		":*": {
			// {{:* returnedExpression }} - Ignored if template.allowCode and $.views.settings.allowCode are false. Otherwise include code in compiled template
			render: retVal,
			flow: true
		},
		dbg: $helpers.dbg = $converters.dbg = dbgBreak // Register {{dbg/}}, {{dbg:...}} and ~dbg() to throw and catch, as breakpoints for debugging.
	});

	$converters({
		html: htmlEncode,
		attr: htmlEncode, // Includes > encoding since rConvertMarkers in JsViews does not skip > characters in attribute strings
		encode: dataEncode,
		unencode: dataUnencode, // Includes > encoding since rConvertMarkers in JsViews does not skip > characters in attribute strings
		url: function(text) {
			// URL encoding helper.
			return text != undefined ? encodeURI("" + text) : text === null ? text : ""; // null returns null, e.g. to remove attribute. undefined returns ""
		}
	});
}
//========================== Define default delimiters ==========================
$subSettings = $sub.settings;
$isArray = ($||jsr).isArray;
$viewsSettings.delimiters("{{", "}}", "^");

if (jsrToJq) { // Moving from jsrender namespace to jQuery namepace - copy over the stored items (templates, converters, helpers...)
	jsr.views.sub._jq($);
}
return $ || jsr;
}, window));


/***/ }),

/***/ "./resources/assets/sass/custom-auth.scss":
/*!************************************************!*\
  !*** ./resources/assets/sass/custom-auth.scss ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./resources/assets/front/scss/bootstrap.scss":
/*!****************************************************!*\
  !*** ./resources/assets/front/scss/bootstrap.scss ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./resources/assets/front/scss/main.scss":
/*!***********************************************!*\
  !*** ./resources/assets/front/scss/main.scss ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./resources/assets/sass/front-main.scss":
/*!***********************************************!*\
  !*** ./resources/assets/sass/front-main.scss ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./resources/assets/sass/bill-pdf.scss":
/*!*********************************************!*\
  !*** ./resources/assets/sass/bill-pdf.scss ***!
  \*********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./resources/assets/sass/prescriptions-pdf.scss":
/*!******************************************************!*\
  !*** ./resources/assets/sass/prescriptions-pdf.scss ***!
  \******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./resources/assets/sass/invoice-pdf.scss":
/*!************************************************!*\
  !*** ./resources/assets/sass/invoice-pdf.scss ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./resources/assets/sass/diagnosis-test-pdf.scss":
/*!*******************************************************!*\
  !*** ./resources/assets/sass/diagnosis-test-pdf.scss ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./resources/assets/sass/custom.scss":
/*!*******************************************!*\
  !*** ./resources/assets/sass/custom.scss ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/moment/locale/af.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/af.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Afrikaans [af]
//! author : Werner Mollentze : https://github.com/wernerm

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var af = moment.defineLocale('af', {
        months: 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split(
            '_'
        ),
        weekdaysShort: 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
        weekdaysMin: 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
        meridiemParse: /vm|nm/i,
        isPM: function (input) {
            return /^nm$/i.test(input);
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'vm' : 'VM';
            } else {
                return isLower ? 'nm' : 'NM';
            }
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Vandag om] LT',
            nextDay: '[MÃ´re om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[Gister om] LT',
            lastWeek: '[Laas] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'oor %s',
            past: '%s gelede',
            s: "'n paar sekondes",
            ss: '%d sekondes',
            m: "'n minuut",
            mm: '%d minute',
            h: "'n uur",
            hh: '%d ure',
            d: "'n dag",
            dd: '%d dae',
            M: "'n maand",
            MM: '%d maande',
            y: "'n jaar",
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            ); // Thanks to Joris RÃ¶ling : https://github.com/jjupiter
        },
        week: {
            dow: 1, // Maandag is die eerste dag van die week.
            doy: 4, // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
        },
    });

    return af;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-dz.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-dz.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Algeria) [ar-dz]
//! author : Amine Roukh: https://github.com/Amine27
//! author : Abdel Said: https://github.com/abdelsaid
//! author : Ahmed Elkhatib
//! author : forabi https://github.com/forabi
//! author : Noureddine LOUAHEDJ : https://github.com/noureddinem

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var pluralForm = function (n) {
            return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
        },
        plurals = {
            s: [
                'Ø£ÙÙ ÙÙ Ø«Ø§ÙÙØ©',
                'Ø«Ø§ÙÙØ© ÙØ§Ø­Ø¯Ø©',
                ['Ø«Ø§ÙÙØªØ§Ù', 'Ø«Ø§ÙÙØªÙÙ'],
                '%d Ø«ÙØ§Ù',
                '%d Ø«Ø§ÙÙØ©',
                '%d Ø«Ø§ÙÙØ©',
            ],
            m: [
                'Ø£ÙÙ ÙÙ Ø¯ÙÙÙØ©',
                'Ø¯ÙÙÙØ© ÙØ§Ø­Ø¯Ø©',
                ['Ø¯ÙÙÙØªØ§Ù', 'Ø¯ÙÙÙØªÙÙ'],
                '%d Ø¯ÙØ§Ø¦Ù',
                '%d Ø¯ÙÙÙØ©',
                '%d Ø¯ÙÙÙØ©',
            ],
            h: [
                'Ø£ÙÙ ÙÙ Ø³Ø§Ø¹Ø©',
                'Ø³Ø§Ø¹Ø© ÙØ§Ø­Ø¯Ø©',
                ['Ø³Ø§Ø¹ØªØ§Ù', 'Ø³Ø§Ø¹ØªÙÙ'],
                '%d Ø³Ø§Ø¹Ø§Øª',
                '%d Ø³Ø§Ø¹Ø©',
                '%d Ø³Ø§Ø¹Ø©',
            ],
            d: [
                'Ø£ÙÙ ÙÙ ÙÙÙ',
                'ÙÙÙ ÙØ§Ø­Ø¯',
                ['ÙÙÙØ§Ù', 'ÙÙÙÙÙ'],
                '%d Ø£ÙØ§Ù',
                '%d ÙÙÙÙØ§',
                '%d ÙÙÙ',
            ],
            M: [
                'Ø£ÙÙ ÙÙ Ø´ÙØ±',
                'Ø´ÙØ± ÙØ§Ø­Ø¯',
                ['Ø´ÙØ±Ø§Ù', 'Ø´ÙØ±ÙÙ'],
                '%d Ø£Ø´ÙØ±',
                '%d Ø´ÙØ±Ø§',
                '%d Ø´ÙØ±',
            ],
            y: [
                'Ø£ÙÙ ÙÙ Ø¹Ø§Ù',
                'Ø¹Ø§Ù ÙØ§Ø­Ø¯',
                ['Ø¹Ø§ÙØ§Ù', 'Ø¹Ø§ÙÙÙ'],
                '%d Ø£Ø¹ÙØ§Ù',
                '%d Ø¹Ø§ÙÙØ§',
                '%d Ø¹Ø§Ù',
            ],
        },
        pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        months = [
            'Ø¬Ø§ÙÙÙ',
            'ÙÙÙØ±Ù',
            'ÙØ§Ø±Ø³',
            'Ø£ÙØ±ÙÙ',
            'ÙØ§Ù',
            'Ø¬ÙØ§Ù',
            'Ø¬ÙÙÙÙØ©',
            'Ø£ÙØª',
            'Ø³Ø¨ØªÙØ¨Ø±',
            'Ø£ÙØªÙØ¨Ø±',
            'ÙÙÙÙØ¨Ø±',
            'Ø¯ÙØ³ÙØ¨Ø±',
        ];

    var arDz = moment.defineLocale('ar-dz', {
        months: months,
        monthsShort: months,
        weekdays: 'Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª'.split('_'),
        weekdaysShort: 'Ø£Ø­Ø¯_Ø¥Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø£Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª'.split('_'),
        weekdaysMin: 'Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /Øµ|Ù/,
        isPM: function (input) {
            return 'Ù' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'Øµ';
            } else {
                return 'Ù';
            }
        },
        calendar: {
            sameDay: '[Ø§ÙÙÙÙ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            nextDay: '[ØºØ¯ÙØ§ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            nextWeek: 'dddd [Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            lastDay: '[Ø£ÙØ³ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            lastWeek: 'dddd [Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Ø¨Ø¹Ø¯ %s',
            past: 'ÙÙØ° %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y'),
        },
        postformat: function (string) {
            return string.replace(/,/g, 'Ø');
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return arDz;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-kw.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-kw.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Kuwait) [ar-kw]
//! author : Nusret Parlak: https://github.com/nusretparlak

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var arKw = moment.defineLocale('ar-kw', {
        months: 'ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§Ù_ÙÙÙÙÙ_ÙÙÙÙÙØ²_ØºØ´Øª_Ø´ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙØ¨Ø±_Ø¯Ø¬ÙØ¨Ø±'.split(
            '_'
        ),
        monthsShort:
            'ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§Ù_ÙÙÙÙÙ_ÙÙÙÙÙØ²_ØºØ´Øª_Ø´ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙØ¨Ø±_Ø¯Ø¬ÙØ¨Ø±'.split(
                '_'
            ),
        weekdays: 'Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥ØªÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª'.split('_'),
        weekdaysShort: 'Ø§Ø­Ø¯_Ø§ØªÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø§Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª'.split('_'),
        weekdaysMin: 'Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Ø§ÙÙÙÙ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            nextDay: '[ØºØ¯Ø§ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            nextWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            lastDay: '[Ø£ÙØ³ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            lastWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ÙÙ %s',
            past: 'ÙÙØ° %s',
            s: 'Ø«ÙØ§Ù',
            ss: '%d Ø«Ø§ÙÙØ©',
            m: 'Ø¯ÙÙÙØ©',
            mm: '%d Ø¯ÙØ§Ø¦Ù',
            h: 'Ø³Ø§Ø¹Ø©',
            hh: '%d Ø³Ø§Ø¹Ø§Øª',
            d: 'ÙÙÙ',
            dd: '%d Ø£ÙØ§Ù',
            M: 'Ø´ÙØ±',
            MM: '%d Ø£Ø´ÙØ±',
            y: 'Ø³ÙØ©',
            yy: '%d Ø³ÙÙØ§Øª',
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return arKw;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-ly.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-ly.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Libya) [ar-ly]
//! author : Ali Hmer: https://github.com/kikoanis

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: '1',
            2: '2',
            3: '3',
            4: '4',
            5: '5',
            6: '6',
            7: '7',
            8: '8',
            9: '9',
            0: '0',
        },
        pluralForm = function (n) {
            return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
        },
        plurals = {
            s: [
                'Ø£ÙÙ ÙÙ Ø«Ø§ÙÙØ©',
                'Ø«Ø§ÙÙØ© ÙØ§Ø­Ø¯Ø©',
                ['Ø«Ø§ÙÙØªØ§Ù', 'Ø«Ø§ÙÙØªÙÙ'],
                '%d Ø«ÙØ§Ù',
                '%d Ø«Ø§ÙÙØ©',
                '%d Ø«Ø§ÙÙØ©',
            ],
            m: [
                'Ø£ÙÙ ÙÙ Ø¯ÙÙÙØ©',
                'Ø¯ÙÙÙØ© ÙØ§Ø­Ø¯Ø©',
                ['Ø¯ÙÙÙØªØ§Ù', 'Ø¯ÙÙÙØªÙÙ'],
                '%d Ø¯ÙØ§Ø¦Ù',
                '%d Ø¯ÙÙÙØ©',
                '%d Ø¯ÙÙÙØ©',
            ],
            h: [
                'Ø£ÙÙ ÙÙ Ø³Ø§Ø¹Ø©',
                'Ø³Ø§Ø¹Ø© ÙØ§Ø­Ø¯Ø©',
                ['Ø³Ø§Ø¹ØªØ§Ù', 'Ø³Ø§Ø¹ØªÙÙ'],
                '%d Ø³Ø§Ø¹Ø§Øª',
                '%d Ø³Ø§Ø¹Ø©',
                '%d Ø³Ø§Ø¹Ø©',
            ],
            d: [
                'Ø£ÙÙ ÙÙ ÙÙÙ',
                'ÙÙÙ ÙØ§Ø­Ø¯',
                ['ÙÙÙØ§Ù', 'ÙÙÙÙÙ'],
                '%d Ø£ÙØ§Ù',
                '%d ÙÙÙÙØ§',
                '%d ÙÙÙ',
            ],
            M: [
                'Ø£ÙÙ ÙÙ Ø´ÙØ±',
                'Ø´ÙØ± ÙØ§Ø­Ø¯',
                ['Ø´ÙØ±Ø§Ù', 'Ø´ÙØ±ÙÙ'],
                '%d Ø£Ø´ÙØ±',
                '%d Ø´ÙØ±Ø§',
                '%d Ø´ÙØ±',
            ],
            y: [
                'Ø£ÙÙ ÙÙ Ø¹Ø§Ù',
                'Ø¹Ø§Ù ÙØ§Ø­Ø¯',
                ['Ø¹Ø§ÙØ§Ù', 'Ø¹Ø§ÙÙÙ'],
                '%d Ø£Ø¹ÙØ§Ù',
                '%d Ø¹Ø§ÙÙØ§',
                '%d Ø¹Ø§Ù',
            ],
        },
        pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        months = [
            'ÙÙØ§ÙØ±',
            'ÙØ¨Ø±Ø§ÙØ±',
            'ÙØ§Ø±Ø³',
            'Ø£Ø¨Ø±ÙÙ',
            'ÙØ§ÙÙ',
            'ÙÙÙÙÙ',
            'ÙÙÙÙÙ',
            'Ø£ØºØ³Ø·Ø³',
            'Ø³Ø¨ØªÙØ¨Ø±',
            'Ø£ÙØªÙØ¨Ø±',
            'ÙÙÙÙØ¨Ø±',
            'Ø¯ÙØ³ÙØ¨Ø±',
        ];

    var arLy = moment.defineLocale('ar-ly', {
        months: months,
        monthsShort: months,
        weekdays: 'Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª'.split('_'),
        weekdaysShort: 'Ø£Ø­Ø¯_Ø¥Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø£Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª'.split('_'),
        weekdaysMin: 'Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /Øµ|Ù/,
        isPM: function (input) {
            return 'Ù' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'Øµ';
            } else {
                return 'Ù';
            }
        },
        calendar: {
            sameDay: '[Ø§ÙÙÙÙ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            nextDay: '[ØºØ¯ÙØ§ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            nextWeek: 'dddd [Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            lastDay: '[Ø£ÙØ³ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            lastWeek: 'dddd [Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Ø¨Ø¹Ø¯ %s',
            past: 'ÙÙØ° %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y'),
        },
        preparse: function (string) {
            return string.replace(/Ø/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, 'Ø');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return arLy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-ma.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-ma.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Morocco) [ar-ma]
//! author : ElFadili Yassine : https://github.com/ElFadiliY
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var arMa = moment.defineLocale('ar-ma', {
        months: 'ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§Ù_ÙÙÙÙÙ_ÙÙÙÙÙØ²_ØºØ´Øª_Ø´ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙØ¨Ø±_Ø¯Ø¬ÙØ¨Ø±'.split(
            '_'
        ),
        monthsShort:
            'ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§Ù_ÙÙÙÙÙ_ÙÙÙÙÙØ²_ØºØ´Øª_Ø´ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙØ¨Ø±_Ø¯Ø¬ÙØ¨Ø±'.split(
                '_'
            ),
        weekdays: 'Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª'.split('_'),
        weekdaysShort: 'Ø§Ø­Ø¯_Ø§Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø§Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª'.split('_'),
        weekdaysMin: 'Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Ø§ÙÙÙÙ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            nextDay: '[ØºØ¯Ø§ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            nextWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            lastDay: '[Ø£ÙØ³ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            lastWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ÙÙ %s',
            past: 'ÙÙØ° %s',
            s: 'Ø«ÙØ§Ù',
            ss: '%d Ø«Ø§ÙÙØ©',
            m: 'Ø¯ÙÙÙØ©',
            mm: '%d Ø¯ÙØ§Ø¦Ù',
            h: 'Ø³Ø§Ø¹Ø©',
            hh: '%d Ø³Ø§Ø¹Ø§Øª',
            d: 'ÙÙÙ',
            dd: '%d Ø£ÙØ§Ù',
            M: 'Ø´ÙØ±',
            MM: '%d Ø£Ø´ÙØ±',
            y: 'Ø³ÙØ©',
            yy: '%d Ø³ÙÙØ§Øª',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return arMa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-sa.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-sa.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic (Saudi Arabia) [ar-sa]
//! author : Suhail Alkowaileet : https://github.com/xsoh

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'Ù¡',
            2: 'Ù¢',
            3: 'Ù£',
            4: 'Ù¤',
            5: 'Ù¥',
            6: 'Ù¦',
            7: 'Ù§',
            8: 'Ù¨',
            9: 'Ù©',
            0: 'Ù ',
        },
        numberMap = {
            'Ù¡': '1',
            'Ù¢': '2',
            'Ù£': '3',
            'Ù¤': '4',
            'Ù¥': '5',
            'Ù¦': '6',
            'Ù§': '7',
            'Ù¨': '8',
            'Ù©': '9',
            'Ù ': '0',
        };

    var arSa = moment.defineLocale('ar-sa', {
        months: 'ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§ÙÙ_ÙÙÙÙÙ_ÙÙÙÙÙ_Ø£ØºØ³Ø·Ø³_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±'.split(
            '_'
        ),
        monthsShort:
            'ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§ÙÙ_ÙÙÙÙÙ_ÙÙÙÙÙ_Ø£ØºØ³Ø·Ø³_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±'.split(
                '_'
            ),
        weekdays: 'Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª'.split('_'),
        weekdaysShort: 'Ø£Ø­Ø¯_Ø¥Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø£Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª'.split('_'),
        weekdaysMin: 'Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /Øµ|Ù/,
        isPM: function (input) {
            return 'Ù' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'Øµ';
            } else {
                return 'Ù';
            }
        },
        calendar: {
            sameDay: '[Ø§ÙÙÙÙ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            nextDay: '[ØºØ¯Ø§ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            nextWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            lastDay: '[Ø£ÙØ³ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            lastWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ÙÙ %s',
            past: 'ÙÙØ° %s',
            s: 'Ø«ÙØ§Ù',
            ss: '%d Ø«Ø§ÙÙØ©',
            m: 'Ø¯ÙÙÙØ©',
            mm: '%d Ø¯ÙØ§Ø¦Ù',
            h: 'Ø³Ø§Ø¹Ø©',
            hh: '%d Ø³Ø§Ø¹Ø§Øª',
            d: 'ÙÙÙ',
            dd: '%d Ø£ÙØ§Ù',
            M: 'Ø´ÙØ±',
            MM: '%d Ø£Ø´ÙØ±',
            y: 'Ø³ÙØ©',
            yy: '%d Ø³ÙÙØ§Øª',
        },
        preparse: function (string) {
            return string
                .replace(/[Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Ù ]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/Ø/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, 'Ø');
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return arSa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar-tn.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ar-tn.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale  :  Arabic (Tunisia) [ar-tn]
//! author : Nader Toukabri : https://github.com/naderio

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var arTn = moment.defineLocale('ar-tn', {
        months: 'Ø¬Ø§ÙÙÙ_ÙÙÙØ±Ù_ÙØ§Ø±Ø³_Ø£ÙØ±ÙÙ_ÙØ§Ù_Ø¬ÙØ§Ù_Ø¬ÙÙÙÙØ©_Ø£ÙØª_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±'.split(
            '_'
        ),
        monthsShort:
            'Ø¬Ø§ÙÙÙ_ÙÙÙØ±Ù_ÙØ§Ø±Ø³_Ø£ÙØ±ÙÙ_ÙØ§Ù_Ø¬ÙØ§Ù_Ø¬ÙÙÙÙØ©_Ø£ÙØª_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±'.split(
                '_'
            ),
        weekdays: 'Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª'.split('_'),
        weekdaysShort: 'Ø£Ø­Ø¯_Ø¥Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø£Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª'.split('_'),
        weekdaysMin: 'Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Ø§ÙÙÙÙ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            nextDay: '[ØºØ¯Ø§ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            nextWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            lastDay: '[Ø£ÙØ³ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            lastWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ÙÙ %s',
            past: 'ÙÙØ° %s',
            s: 'Ø«ÙØ§Ù',
            ss: '%d Ø«Ø§ÙÙØ©',
            m: 'Ø¯ÙÙÙØ©',
            mm: '%d Ø¯ÙØ§Ø¦Ù',
            h: 'Ø³Ø§Ø¹Ø©',
            hh: '%d Ø³Ø§Ø¹Ø§Øª',
            d: 'ÙÙÙ',
            dd: '%d Ø£ÙØ§Ù',
            M: 'Ø´ÙØ±',
            MM: '%d Ø£Ø´ÙØ±',
            y: 'Ø³ÙØ©',
            yy: '%d Ø³ÙÙØ§Øª',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return arTn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ar.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ar.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Arabic [ar]
//! author : Abdel Said: https://github.com/abdelsaid
//! author : Ahmed Elkhatib
//! author : forabi https://github.com/forabi

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'Ù¡',
            2: 'Ù¢',
            3: 'Ù£',
            4: 'Ù¤',
            5: 'Ù¥',
            6: 'Ù¦',
            7: 'Ù§',
            8: 'Ù¨',
            9: 'Ù©',
            0: 'Ù ',
        },
        numberMap = {
            'Ù¡': '1',
            'Ù¢': '2',
            'Ù£': '3',
            'Ù¤': '4',
            'Ù¥': '5',
            'Ù¦': '6',
            'Ù§': '7',
            'Ù¨': '8',
            'Ù©': '9',
            'Ù ': '0',
        },
        pluralForm = function (n) {
            return n === 0
                ? 0
                : n === 1
                ? 1
                : n === 2
                ? 2
                : n % 100 >= 3 && n % 100 <= 10
                ? 3
                : n % 100 >= 11
                ? 4
                : 5;
        },
        plurals = {
            s: [
                'Ø£ÙÙ ÙÙ Ø«Ø§ÙÙØ©',
                'Ø«Ø§ÙÙØ© ÙØ§Ø­Ø¯Ø©',
                ['Ø«Ø§ÙÙØªØ§Ù', 'Ø«Ø§ÙÙØªÙÙ'],
                '%d Ø«ÙØ§Ù',
                '%d Ø«Ø§ÙÙØ©',
                '%d Ø«Ø§ÙÙØ©',
            ],
            m: [
                'Ø£ÙÙ ÙÙ Ø¯ÙÙÙØ©',
                'Ø¯ÙÙÙØ© ÙØ§Ø­Ø¯Ø©',
                ['Ø¯ÙÙÙØªØ§Ù', 'Ø¯ÙÙÙØªÙÙ'],
                '%d Ø¯ÙØ§Ø¦Ù',
                '%d Ø¯ÙÙÙØ©',
                '%d Ø¯ÙÙÙØ©',
            ],
            h: [
                'Ø£ÙÙ ÙÙ Ø³Ø§Ø¹Ø©',
                'Ø³Ø§Ø¹Ø© ÙØ§Ø­Ø¯Ø©',
                ['Ø³Ø§Ø¹ØªØ§Ù', 'Ø³Ø§Ø¹ØªÙÙ'],
                '%d Ø³Ø§Ø¹Ø§Øª',
                '%d Ø³Ø§Ø¹Ø©',
                '%d Ø³Ø§Ø¹Ø©',
            ],
            d: [
                'Ø£ÙÙ ÙÙ ÙÙÙ',
                'ÙÙÙ ÙØ§Ø­Ø¯',
                ['ÙÙÙØ§Ù', 'ÙÙÙÙÙ'],
                '%d Ø£ÙØ§Ù',
                '%d ÙÙÙÙØ§',
                '%d ÙÙÙ',
            ],
            M: [
                'Ø£ÙÙ ÙÙ Ø´ÙØ±',
                'Ø´ÙØ± ÙØ§Ø­Ø¯',
                ['Ø´ÙØ±Ø§Ù', 'Ø´ÙØ±ÙÙ'],
                '%d Ø£Ø´ÙØ±',
                '%d Ø´ÙØ±Ø§',
                '%d Ø´ÙØ±',
            ],
            y: [
                'Ø£ÙÙ ÙÙ Ø¹Ø§Ù',
                'Ø¹Ø§Ù ÙØ§Ø­Ø¯',
                ['Ø¹Ø§ÙØ§Ù', 'Ø¹Ø§ÙÙÙ'],
                '%d Ø£Ø¹ÙØ§Ù',
                '%d Ø¹Ø§ÙÙØ§',
                '%d Ø¹Ø§Ù',
            ],
        },
        pluralize = function (u) {
            return function (number, withoutSuffix, string, isFuture) {
                var f = pluralForm(number),
                    str = plurals[u][pluralForm(number)];
                if (f === 2) {
                    str = str[withoutSuffix ? 0 : 1];
                }
                return str.replace(/%d/i, number);
            };
        },
        months = [
            'ÙÙØ§ÙØ±',
            'ÙØ¨Ø±Ø§ÙØ±',
            'ÙØ§Ø±Ø³',
            'Ø£Ø¨Ø±ÙÙ',
            'ÙØ§ÙÙ',
            'ÙÙÙÙÙ',
            'ÙÙÙÙÙ',
            'Ø£ØºØ³Ø·Ø³',
            'Ø³Ø¨ØªÙØ¨Ø±',
            'Ø£ÙØªÙØ¨Ø±',
            'ÙÙÙÙØ¨Ø±',
            'Ø¯ÙØ³ÙØ¨Ø±',
        ];

    var ar = moment.defineLocale('ar', {
        months: months,
        monthsShort: months,
        weekdays: 'Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª'.split('_'),
        weekdaysShort: 'Ø£Ø­Ø¯_Ø¥Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø£Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª'.split('_'),
        weekdaysMin: 'Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/\u200FM/\u200FYYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /Øµ|Ù/,
        isPM: function (input) {
            return 'Ù' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'Øµ';
            } else {
                return 'Ù';
            }
        },
        calendar: {
            sameDay: '[Ø§ÙÙÙÙ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            nextDay: '[ØºØ¯ÙØ§ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            nextWeek: 'dddd [Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            lastDay: '[Ø£ÙØ³ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            lastWeek: 'dddd [Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Ø¨Ø¹Ø¯ %s',
            past: 'ÙÙØ° %s',
            s: pluralize('s'),
            ss: pluralize('s'),
            m: pluralize('m'),
            mm: pluralize('m'),
            h: pluralize('h'),
            hh: pluralize('h'),
            d: pluralize('d'),
            dd: pluralize('d'),
            M: pluralize('M'),
            MM: pluralize('M'),
            y: pluralize('y'),
            yy: pluralize('y'),
        },
        preparse: function (string) {
            return string
                .replace(/[Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Ù ]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/Ø/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, 'Ø');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return ar;

})));


/***/ }),

/***/ "./node_modules/moment/locale/az.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/az.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Azerbaijani [az]
//! author : topchiyev : https://github.com/topchiyev

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        1: '-inci',
        5: '-inci',
        8: '-inci',
        70: '-inci',
        80: '-inci',
        2: '-nci',
        7: '-nci',
        20: '-nci',
        50: '-nci',
        3: '-Ã¼ncÃ¼',
        4: '-Ã¼ncÃ¼',
        100: '-Ã¼ncÃ¼',
        6: '-ncÄ±',
        9: '-uncu',
        10: '-uncu',
        30: '-uncu',
        60: '-Ä±ncÄ±',
        90: '-Ä±ncÄ±',
    };

    var az = moment.defineLocale('az', {
        months: 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split(
            '_'
        ),
        monthsShort: 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
        weekdays:
            'Bazar_Bazar ertÉsi_ÃÉrÅÉnbÉ axÅamÄ±_ÃÉrÅÉnbÉ_CÃ¼mÉ axÅamÄ±_CÃ¼mÉ_ÅÉnbÉ'.split(
                '_'
            ),
        weekdaysShort: 'Baz_BzE_ÃAx_ÃÉr_CAx_CÃ¼m_ÅÉn'.split('_'),
        weekdaysMin: 'Bz_BE_ÃA_ÃÉ_CA_CÃ¼_ÅÉ'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[bugÃ¼n saat] LT',
            nextDay: '[sabah saat] LT',
            nextWeek: '[gÉlÉn hÉftÉ] dddd [saat] LT',
            lastDay: '[dÃ¼nÉn] LT',
            lastWeek: '[keÃ§Én hÉftÉ] dddd [saat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s ÉvvÉl',
            s: 'bir neÃ§É saniyÉ',
            ss: '%d saniyÉ',
            m: 'bir dÉqiqÉ',
            mm: '%d dÉqiqÉ',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gÃ¼n',
            dd: '%d gÃ¼n',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir il',
            yy: '%d il',
        },
        meridiemParse: /gecÉ|sÉhÉr|gÃ¼ndÃ¼z|axÅam/,
        isPM: function (input) {
            return /^(gÃ¼ndÃ¼z|axÅam)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'gecÉ';
            } else if (hour < 12) {
                return 'sÉhÉr';
            } else if (hour < 17) {
                return 'gÃ¼ndÃ¼z';
            } else {
                return 'axÅam';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(Ä±ncÄ±|inci|nci|Ã¼ncÃ¼|ncÄ±|uncu)/,
        ordinal: function (number) {
            if (number === 0) {
                // special case for zero
                return number + '-Ä±ncÄ±';
            }
            var a = number % 10,
                b = (number % 100) - a,
                c = number >= 100 ? 100 : null;
            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return az;

})));


/***/ }),

/***/ "./node_modules/moment/locale/be.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/be.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Belarusian [be]
//! author : Dmitry Demidov : https://github.com/demidov91
//! author: Praleska: http://praleska.pro/
//! Author : Menelion ElensÃºle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11
            ? forms[0]
            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
            ? forms[1]
            : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            ss: withoutSuffix ? 'ÑÐµÐºÑÐ½Ð´Ð°_ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´' : 'ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´',
            mm: withoutSuffix ? 'ÑÐ²ÑÐ»ÑÐ½Ð°_ÑÐ²ÑÐ»ÑÐ½Ñ_ÑÐ²ÑÐ»ÑÐ½' : 'ÑÐ²ÑÐ»ÑÐ½Ñ_ÑÐ²ÑÐ»ÑÐ½Ñ_ÑÐ²ÑÐ»ÑÐ½',
            hh: withoutSuffix ? 'Ð³Ð°Ð´Ð·ÑÐ½Ð°_Ð³Ð°Ð´Ð·ÑÐ½Ñ_Ð³Ð°Ð´Ð·ÑÐ½' : 'Ð³Ð°Ð´Ð·ÑÐ½Ñ_Ð³Ð°Ð´Ð·ÑÐ½Ñ_Ð³Ð°Ð´Ð·ÑÐ½',
            dd: 'Ð´Ð·ÐµÐ½Ñ_Ð´Ð½Ñ_Ð´Ð·ÑÐ½',
            MM: 'Ð¼ÐµÑÑÑ_Ð¼ÐµÑÑÑÑ_Ð¼ÐµÑÑÑÐ°Ñ',
            yy: 'Ð³Ð¾Ð´_Ð³Ð°Ð´Ñ_Ð³Ð°Ð´Ð¾Ñ',
        };
        if (key === 'm') {
            return withoutSuffix ? 'ÑÐ²ÑÐ»ÑÐ½Ð°' : 'ÑÐ²ÑÐ»ÑÐ½Ñ';
        } else if (key === 'h') {
            return withoutSuffix ? 'Ð³Ð°Ð´Ð·ÑÐ½Ð°' : 'Ð³Ð°Ð´Ð·ÑÐ½Ñ';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    var be = moment.defineLocale('be', {
        months: {
            format: 'ÑÑÑÐ´Ð·ÐµÐ½Ñ_Ð»ÑÑÐ°Ð³Ð°_ÑÐ°ÐºÐ°Ð²ÑÐºÐ°_ÐºÑÐ°ÑÐ°Ð²ÑÐºÐ°_ÑÑÐ°ÑÐ½Ñ_ÑÑÑÐ²ÐµÐ½Ñ_Ð»ÑÐ¿ÐµÐ½Ñ_Ð¶Ð½ÑÑÐ½Ñ_Ð²ÐµÑÐ°ÑÐ½Ñ_ÐºÐ°ÑÑÑÑÑÐ½ÑÐºÐ°_Ð»ÑÑÑÐ°Ð¿Ð°Ð´Ð°_ÑÐ½ÐµÐ¶Ð½Ñ'.split(
                '_'
            ),
            standalone:
                'ÑÑÑÐ´Ð·ÐµÐ½Ñ_Ð»ÑÑÑ_ÑÐ°ÐºÐ°Ð²ÑÐº_ÐºÑÐ°ÑÐ°Ð²ÑÐº_ÑÑÐ°Ð²ÐµÐ½Ñ_ÑÑÑÐ²ÐµÐ½Ñ_Ð»ÑÐ¿ÐµÐ½Ñ_Ð¶Ð½ÑÐ²ÐµÐ½Ñ_Ð²ÐµÑÐ°ÑÐµÐ½Ñ_ÐºÐ°ÑÑÑÑÑÐ½ÑÐº_Ð»ÑÑÑÐ°Ð¿Ð°Ð´_ÑÐ½ÐµÐ¶Ð°Ð½Ñ'.split(
                    '_'
                ),
        },
        monthsShort:
            'ÑÑÑÐ´_Ð»ÑÑ_ÑÐ°Ðº_ÐºÑÐ°Ñ_ÑÑÐ°Ð²_ÑÑÑÐ²_Ð»ÑÐ¿_Ð¶Ð½ÑÐ²_Ð²ÐµÑ_ÐºÐ°ÑÑ_Ð»ÑÑÑ_ÑÐ½ÐµÐ¶'.split('_'),
        weekdays: {
            format: 'Ð½ÑÐ´Ð·ÐµÐ»Ñ_Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»Ð°Ðº_Ð°ÑÑÐ¾ÑÐ°Ðº_ÑÐµÑÐ°Ð´Ñ_ÑÐ°ÑÐ²ÐµÑ_Ð¿ÑÑÐ½ÑÑÑ_ÑÑÐ±Ð¾ÑÑ'.split(
                '_'
            ),
            standalone:
                'Ð½ÑÐ´Ð·ÐµÐ»Ñ_Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»Ð°Ðº_Ð°ÑÑÐ¾ÑÐ°Ðº_ÑÐµÑÐ°Ð´Ð°_ÑÐ°ÑÐ²ÐµÑ_Ð¿ÑÑÐ½ÑÑÐ°_ÑÑÐ±Ð¾ÑÐ°'.split(
                    '_'
                ),
            isFormat: /\[ ?[Ð£ÑÑ] ?(?:Ð¼ÑÐ½ÑÐ»ÑÑ|Ð½Ð°ÑÑÑÐ¿Ð½ÑÑ)? ?\] ?dddd/,
        },
        weekdaysShort: 'Ð½Ð´_Ð¿Ð½_Ð°Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±'.split('_'),
        weekdaysMin: 'Ð½Ð´_Ð¿Ð½_Ð°Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY Ð³.',
            LLL: 'D MMMM YYYY Ð³., HH:mm',
            LLLL: 'dddd, D MMMM YYYY Ð³., HH:mm',
        },
        calendar: {
            sameDay: '[Ð¡ÑÐ½Ð½Ñ Ñ] LT',
            nextDay: '[ÐÐ°ÑÑÑÐ° Ñ] LT',
            lastDay: '[Ð£ÑÐ¾ÑÐ° Ñ] LT',
            nextWeek: function () {
                return '[Ð£] dddd [Ñ] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return '[Ð£ Ð¼ÑÐ½ÑÐ»ÑÑ] dddd [Ñ] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[Ð£ Ð¼ÑÐ½ÑÐ»Ñ] dddd [Ñ] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Ð¿ÑÐ°Ð· %s',
            past: '%s ÑÐ°Ð¼Ñ',
            s: 'Ð½ÐµÐºÐ°Ð»ÑÐºÑ ÑÐµÐºÑÐ½Ð´',
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: relativeTimeWithPlural,
            hh: relativeTimeWithPlural,
            d: 'Ð´Ð·ÐµÐ½Ñ',
            dd: relativeTimeWithPlural,
            M: 'Ð¼ÐµÑÑÑ',
            MM: relativeTimeWithPlural,
            y: 'Ð³Ð¾Ð´',
            yy: relativeTimeWithPlural,
        },
        meridiemParse: /Ð½Ð¾ÑÑ|ÑÐ°Ð½ÑÑÑ|Ð´Ð½Ñ|Ð²ÐµÑÐ°ÑÐ°/,
        isPM: function (input) {
            return /^(Ð´Ð½Ñ|Ð²ÐµÑÐ°ÑÐ°)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'Ð½Ð¾ÑÑ';
            } else if (hour < 12) {
                return 'ÑÐ°Ð½ÑÑÑ';
            } else if (hour < 17) {
                return 'Ð´Ð½Ñ';
            } else {
                return 'Ð²ÐµÑÐ°ÑÐ°';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(Ñ|Ñ|Ð³Ð°)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return (number % 10 === 2 || number % 10 === 3) &&
                        number % 100 !== 12 &&
                        number % 100 !== 13
                        ? number + '-Ñ'
                        : number + '-Ñ';
                case 'D':
                    return number + '-Ð³Ð°';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return be;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bg.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bg.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bulgarian [bg]
//! author : Krasen Borisov : https://github.com/kraz

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var bg = moment.defineLocale('bg', {
        months: 'ÑÐ½ÑÐ°ÑÐ¸_ÑÐµÐ²ÑÑÐ°ÑÐ¸_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐ¸Ð»_Ð¼Ð°Ð¹_ÑÐ½Ð¸_ÑÐ»Ð¸_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸_Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸_Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸_Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸'.split(
            '_'
        ),
        monthsShort: 'ÑÐ½Ñ_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ð¹_ÑÐ½Ð¸_ÑÐ»Ð¸_Ð°Ð²Ð³_ÑÐµÐ¿_Ð¾ÐºÑ_Ð½Ð¾Ðµ_Ð´ÐµÐº'.split('_'),
        weekdays: 'Ð½ÐµÐ´ÐµÐ»Ñ_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÑÐ´Ð°_ÑÐµÑÐ²ÑÑÑÑÐº_Ð¿ÐµÑÑÐº_ÑÑÐ±Ð¾ÑÐ°'.split(
            '_'
        ),
        weekdaysShort: 'Ð½ÐµÐ´_Ð¿Ð¾Ð½_Ð²ÑÐ¾_ÑÑÑ_ÑÐµÑ_Ð¿ÐµÑ_ÑÑÐ±'.split('_'),
        weekdaysMin: 'Ð½Ð´_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[ÐÐ½ÐµÑ Ð²] LT',
            nextDay: '[Ð£ÑÑÐµ Ð²] LT',
            nextWeek: 'dddd [Ð²] LT',
            lastDay: '[ÐÑÐµÑÐ° Ð²] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[ÐÐ¸Ð½Ð°Ð»Ð°ÑÐ°] dddd [Ð²] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[ÐÐ¸Ð½Ð°Ð»Ð¸Ñ] dddd [Ð²] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ÑÐ»ÐµÐ´ %s',
            past: 'Ð¿ÑÐµÐ´Ð¸ %s',
            s: 'Ð½ÑÐºÐ¾Ð»ÐºÐ¾ ÑÐµÐºÑÐ½Ð´Ð¸',
            ss: '%d ÑÐµÐºÑÐ½Ð´Ð¸',
            m: 'Ð¼Ð¸Ð½ÑÑÐ°',
            mm: '%d Ð¼Ð¸Ð½ÑÑÐ¸',
            h: 'ÑÐ°Ñ',
            hh: '%d ÑÐ°ÑÐ°',
            d: 'Ð´ÐµÐ½',
            dd: '%d Ð´ÐµÐ½Ð°',
            w: 'ÑÐµÐ´Ð¼Ð¸ÑÐ°',
            ww: '%d ÑÐµÐ´Ð¼Ð¸ÑÐ¸',
            M: 'Ð¼ÐµÑÐµÑ',
            MM: '%d Ð¼ÐµÑÐµÑÐ°',
            y: 'Ð³Ð¾Ð´Ð¸Ð½Ð°',
            yy: '%d Ð³Ð¾Ð´Ð¸Ð½Ð¸',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ÐµÐ²|ÐµÐ½|ÑÐ¸|Ð²Ð¸|ÑÐ¸|Ð¼Ð¸)/,
        ordinal: function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ÐµÐ²';
            } else if (last2Digits === 0) {
                return number + '-ÐµÐ½';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ÑÐ¸';
            } else if (lastDigit === 1) {
                return number + '-Ð²Ð¸';
            } else if (lastDigit === 2) {
                return number + '-ÑÐ¸';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-Ð¼Ð¸';
            } else {
                return number + '-ÑÐ¸';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return bg;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bm.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bm.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bambara [bm]
//! author : Estelle Comment : https://github.com/estellecomment

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var bm = moment.defineLocale('bm', {
        months: 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_MÉkalo_ZuwÉnkalo_Zuluyekalo_Utikalo_SÉtanburukalo_ÉkutÉburukalo_Nowanburukalo_Desanburukalo'.split(
            '_'
        ),
        monthsShort: 'Zan_Few_Mar_Awi_MÉ_Zuw_Zul_Uti_SÉt_Éku_Now_Des'.split('_'),
        weekdays: 'Kari_NtÉnÉn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
        weekdaysShort: 'Kar_NtÉ_Tar_Ara_Ala_Jum_Sib'.split('_'),
        weekdaysMin: 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'MMMM [tile] D [san] YYYY',
            LLL: 'MMMM [tile] D [san] YYYY [lÉrÉ] HH:mm',
            LLLL: 'dddd MMMM [tile] D [san] YYYY [lÉrÉ] HH:mm',
        },
        calendar: {
            sameDay: '[Bi lÉrÉ] LT',
            nextDay: '[Sini lÉrÉ] LT',
            nextWeek: 'dddd [don lÉrÉ] LT',
            lastDay: '[Kunu lÉrÉ] LT',
            lastWeek: 'dddd [tÉmÉnen lÉrÉ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s kÉnÉ',
            past: 'a bÉ %s bÉ',
            s: 'sanga dama dama',
            ss: 'sekondi %d',
            m: 'miniti kelen',
            mm: 'miniti %d',
            h: 'lÉrÉ kelen',
            hh: 'lÉrÉ %d',
            d: 'tile kelen',
            dd: 'tile %d',
            M: 'kalo kelen',
            MM: 'kalo %d',
            y: 'san kelen',
            yy: 'san %d',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return bm;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bn-bd.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/bn-bd.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bengali (Bangladesh) [bn-bd]
//! author : Asraf Hossain Patoary : https://github.com/ashwoolford

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'à§§',
            2: 'à§¨',
            3: 'à§©',
            4: 'à§ª',
            5: 'à§«',
            6: 'à§¬',
            7: 'à§­',
            8: 'à§®',
            9: 'à§¯',
            0: 'à§¦',
        },
        numberMap = {
            'à§§': '1',
            'à§¨': '2',
            'à§©': '3',
            'à§ª': '4',
            'à§«': '5',
            'à§¬': '6',
            'à§­': '7',
            'à§®': '8',
            'à§¯': '9',
            'à§¦': '0',
        };

    var bnBd = moment.defineLocale('bn-bd', {
        months: 'à¦à¦¾à¦¨à§à§à¦¾à¦°à¦¿_à¦«à§à¦¬à§à¦°à§à§à¦¾à¦°à¦¿_à¦®à¦¾à¦°à§à¦_à¦à¦ªà§à¦°à¦¿à¦²_à¦®à§_à¦à§à¦¨_à¦à§à¦²à¦¾à¦_à¦à¦à¦¸à§à¦_à¦¸à§à¦ªà§à¦à§à¦®à§à¦¬à¦°_à¦à¦à§à¦à§à¦¬à¦°_à¦¨à¦­à§à¦®à§à¦¬à¦°_à¦¡à¦¿à¦¸à§à¦®à§à¦¬à¦°'.split(
            '_'
        ),
        monthsShort:
            'à¦à¦¾à¦¨à§_à¦«à§à¦¬à§à¦°à§_à¦®à¦¾à¦°à§à¦_à¦à¦ªà§à¦°à¦¿à¦²_à¦®à§_à¦à§à¦¨_à¦à§à¦²à¦¾à¦_à¦à¦à¦¸à§à¦_à¦¸à§à¦ªà§à¦_à¦à¦à§à¦à§_à¦¨à¦­à§_à¦¡à¦¿à¦¸à§'.split(
                '_'
            ),
        weekdays: 'à¦°à¦¬à¦¿à¦¬à¦¾à¦°_à¦¸à§à¦®à¦¬à¦¾à¦°_à¦®à¦à§à¦à¦²à¦¬à¦¾à¦°_à¦¬à§à¦§à¦¬à¦¾à¦°_à¦¬à§à¦¹à¦¸à§à¦ªà¦¤à¦¿à¦¬à¦¾à¦°_à¦¶à§à¦à§à¦°à¦¬à¦¾à¦°_à¦¶à¦¨à¦¿à¦¬à¦¾à¦°'.split(
            '_'
        ),
        weekdaysShort: 'à¦°à¦¬à¦¿_à¦¸à§à¦®_à¦®à¦à§à¦à¦²_à¦¬à§à¦§_à¦¬à§à¦¹à¦¸à§à¦ªà¦¤à¦¿_à¦¶à§à¦à§à¦°_à¦¶à¦¨à¦¿'.split('_'),
        weekdaysMin: 'à¦°à¦¬à¦¿_à¦¸à§à¦®_à¦®à¦à§à¦à¦²_à¦¬à§à¦§_à¦¬à§à¦¹_à¦¶à§à¦à§à¦°_à¦¶à¦¨à¦¿'.split('_'),
        longDateFormat: {
            LT: 'A h:mm à¦¸à¦®à§',
            LTS: 'A h:mm:ss à¦¸à¦®à§',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm à¦¸à¦®à§',
            LLLL: 'dddd, D MMMM YYYY, A h:mm à¦¸à¦®à§',
        },
        calendar: {
            sameDay: '[à¦à¦] LT',
            nextDay: '[à¦à¦à¦¾à¦®à§à¦à¦¾à¦²] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[à¦à¦¤à¦à¦¾à¦²] LT',
            lastWeek: '[à¦à¦¤] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s à¦ªà¦°à§',
            past: '%s à¦à¦à§',
            s: 'à¦à§à§à¦ à¦¸à§à¦à§à¦¨à§à¦¡',
            ss: '%d à¦¸à§à¦à§à¦¨à§à¦¡',
            m: 'à¦à¦ à¦®à¦¿à¦¨à¦¿à¦',
            mm: '%d à¦®à¦¿à¦¨à¦¿à¦',
            h: 'à¦à¦ à¦à¦¨à§à¦à¦¾',
            hh: '%d à¦à¦¨à§à¦à¦¾',
            d: 'à¦à¦ à¦¦à¦¿à¦¨',
            dd: '%d à¦¦à¦¿à¦¨',
            M: 'à¦à¦ à¦®à¦¾à¦¸',
            MM: '%d à¦®à¦¾à¦¸',
            y: 'à¦à¦ à¦¬à¦à¦°',
            yy: '%d à¦¬à¦à¦°',
        },
        preparse: function (string) {
            return string.replace(/[à§§à§¨à§©à§ªà§«à§¬à§­à§®à§¯à§¦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },

        meridiemParse: /à¦°à¦¾à¦¤|à¦­à§à¦°|à¦¸à¦à¦¾à¦²|à¦¦à§à¦ªà§à¦°|à¦¬à¦¿à¦à¦¾à¦²|à¦¸à¦¨à§à¦§à§à¦¯à¦¾|à¦°à¦¾à¦¤/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'à¦°à¦¾à¦¤') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'à¦­à§à¦°') {
                return hour;
            } else if (meridiem === 'à¦¸à¦à¦¾à¦²') {
                return hour;
            } else if (meridiem === 'à¦¦à§à¦ªà§à¦°') {
                return hour >= 3 ? hour : hour + 12;
            } else if (meridiem === 'à¦¬à¦¿à¦à¦¾à¦²') {
                return hour + 12;
            } else if (meridiem === 'à¦¸à¦¨à§à¦§à§à¦¯à¦¾') {
                return hour + 12;
            }
        },

        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'à¦°à¦¾à¦¤';
            } else if (hour < 6) {
                return 'à¦­à§à¦°';
            } else if (hour < 12) {
                return 'à¦¸à¦à¦¾à¦²';
            } else if (hour < 15) {
                return 'à¦¦à§à¦ªà§à¦°';
            } else if (hour < 18) {
                return 'à¦¬à¦¿à¦à¦¾à¦²';
            } else if (hour < 20) {
                return 'à¦¸à¦¨à§à¦§à§à¦¯à¦¾';
            } else {
                return 'à¦°à¦¾à¦¤';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return bnBd;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bn.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bengali [bn]
//! author : Kaushik Gandhi : https://github.com/kaushikgandhi

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'à§§',
            2: 'à§¨',
            3: 'à§©',
            4: 'à§ª',
            5: 'à§«',
            6: 'à§¬',
            7: 'à§­',
            8: 'à§®',
            9: 'à§¯',
            0: 'à§¦',
        },
        numberMap = {
            'à§§': '1',
            'à§¨': '2',
            'à§©': '3',
            'à§ª': '4',
            'à§«': '5',
            'à§¬': '6',
            'à§­': '7',
            'à§®': '8',
            'à§¯': '9',
            'à§¦': '0',
        };

    var bn = moment.defineLocale('bn', {
        months: 'à¦à¦¾à¦¨à§à§à¦¾à¦°à¦¿_à¦«à§à¦¬à§à¦°à§à§à¦¾à¦°à¦¿_à¦®à¦¾à¦°à§à¦_à¦à¦ªà§à¦°à¦¿à¦²_à¦®à§_à¦à§à¦¨_à¦à§à¦²à¦¾à¦_à¦à¦à¦¸à§à¦_à¦¸à§à¦ªà§à¦à§à¦®à§à¦¬à¦°_à¦à¦à§à¦à§à¦¬à¦°_à¦¨à¦­à§à¦®à§à¦¬à¦°_à¦¡à¦¿à¦¸à§à¦®à§à¦¬à¦°'.split(
            '_'
        ),
        monthsShort:
            'à¦à¦¾à¦¨à§_à¦«à§à¦¬à§à¦°à§_à¦®à¦¾à¦°à§à¦_à¦à¦ªà§à¦°à¦¿à¦²_à¦®à§_à¦à§à¦¨_à¦à§à¦²à¦¾à¦_à¦à¦à¦¸à§à¦_à¦¸à§à¦ªà§à¦_à¦à¦à§à¦à§_à¦¨à¦­à§_à¦¡à¦¿à¦¸à§'.split(
                '_'
            ),
        weekdays: 'à¦°à¦¬à¦¿à¦¬à¦¾à¦°_à¦¸à§à¦®à¦¬à¦¾à¦°_à¦®à¦à§à¦à¦²à¦¬à¦¾à¦°_à¦¬à§à¦§à¦¬à¦¾à¦°_à¦¬à§à¦¹à¦¸à§à¦ªà¦¤à¦¿à¦¬à¦¾à¦°_à¦¶à§à¦à§à¦°à¦¬à¦¾à¦°_à¦¶à¦¨à¦¿à¦¬à¦¾à¦°'.split(
            '_'
        ),
        weekdaysShort: 'à¦°à¦¬à¦¿_à¦¸à§à¦®_à¦®à¦à§à¦à¦²_à¦¬à§à¦§_à¦¬à§à¦¹à¦¸à§à¦ªà¦¤à¦¿_à¦¶à§à¦à§à¦°_à¦¶à¦¨à¦¿'.split('_'),
        weekdaysMin: 'à¦°à¦¬à¦¿_à¦¸à§à¦®_à¦®à¦à§à¦à¦²_à¦¬à§à¦§_à¦¬à§à¦¹_à¦¶à§à¦à§à¦°_à¦¶à¦¨à¦¿'.split('_'),
        longDateFormat: {
            LT: 'A h:mm à¦¸à¦®à§',
            LTS: 'A h:mm:ss à¦¸à¦®à§',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm à¦¸à¦®à§',
            LLLL: 'dddd, D MMMM YYYY, A h:mm à¦¸à¦®à§',
        },
        calendar: {
            sameDay: '[à¦à¦] LT',
            nextDay: '[à¦à¦à¦¾à¦®à§à¦à¦¾à¦²] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[à¦à¦¤à¦à¦¾à¦²] LT',
            lastWeek: '[à¦à¦¤] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s à¦ªà¦°à§',
            past: '%s à¦à¦à§',
            s: 'à¦à§à§à¦ à¦¸à§à¦à§à¦¨à§à¦¡',
            ss: '%d à¦¸à§à¦à§à¦¨à§à¦¡',
            m: 'à¦à¦ à¦®à¦¿à¦¨à¦¿à¦',
            mm: '%d à¦®à¦¿à¦¨à¦¿à¦',
            h: 'à¦à¦ à¦à¦¨à§à¦à¦¾',
            hh: '%d à¦à¦¨à§à¦à¦¾',
            d: 'à¦à¦ à¦¦à¦¿à¦¨',
            dd: '%d à¦¦à¦¿à¦¨',
            M: 'à¦à¦ à¦®à¦¾à¦¸',
            MM: '%d à¦®à¦¾à¦¸',
            y: 'à¦à¦ à¦¬à¦à¦°',
            yy: '%d à¦¬à¦à¦°',
        },
        preparse: function (string) {
            return string.replace(/[à§§à§¨à§©à§ªà§«à§¬à§­à§®à§¯à§¦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /à¦°à¦¾à¦¤|à¦¸à¦à¦¾à¦²|à¦¦à§à¦ªà§à¦°|à¦¬à¦¿à¦à¦¾à¦²|à¦°à¦¾à¦¤/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                (meridiem === 'à¦°à¦¾à¦¤' && hour >= 4) ||
                (meridiem === 'à¦¦à§à¦ªà§à¦°' && hour < 5) ||
                meridiem === 'à¦¬à¦¿à¦à¦¾à¦²'
            ) {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'à¦°à¦¾à¦¤';
            } else if (hour < 10) {
                return 'à¦¸à¦à¦¾à¦²';
            } else if (hour < 17) {
                return 'à¦¦à§à¦ªà§à¦°';
            } else if (hour < 20) {
                return 'à¦¬à¦¿à¦à¦¾à¦²';
            } else {
                return 'à¦°à¦¾à¦¤';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return bn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bo.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tibetan [bo]
//! author : Thupten N. Chakrishar : https://github.com/vajradog

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'à¼¡',
            2: 'à¼¢',
            3: 'à¼£',
            4: 'à¼¤',
            5: 'à¼¥',
            6: 'à¼¦',
            7: 'à¼§',
            8: 'à¼¨',
            9: 'à¼©',
            0: 'à¼ ',
        },
        numberMap = {
            'à¼¡': '1',
            'à¼¢': '2',
            'à¼£': '3',
            'à¼¤': '4',
            'à¼¥': '5',
            'à¼¦': '6',
            'à¼§': '7',
            'à¼¨': '8',
            'à¼©': '9',
            'à¼ ': '0',
        };

    var bo = moment.defineLocale('bo', {
        months: 'à½à¾³à¼à½à¼à½à½à¼à½à½¼_à½à¾³à¼à½à¼à½à½à½²à½¦à¼à½_à½à¾³à¼à½à¼à½à½¦à½´à½à¼à½_à½à¾³à¼à½à¼à½à½à½²à¼à½_à½à¾³à¼à½à¼à½£à¾à¼à½_à½à¾³à¼à½à¼à½à¾²à½´à½à¼à½_à½à¾³à¼à½à¼à½à½à½´à½à¼à½_à½à¾³à¼à½à¼à½à½¢à¾à¾±à½à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½à½à½²à½à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½à½à½²à½¦à¼à½'.split(
            '_'
        ),
        monthsShort:
            'à½à¾³à¼1_à½à¾³à¼2_à½à¾³à¼3_à½à¾³à¼4_à½à¾³à¼5_à½à¾³à¼6_à½à¾³à¼7_à½à¾³à¼8_à½à¾³à¼9_à½à¾³à¼10_à½à¾³à¼11_à½à¾³à¼12'.split(
                '_'
            ),
        monthsShortRegex: /^(à½à¾³à¼\d{1,2})/,
        monthsParseExact: true,
        weekdays:
            'à½à½à½ à¼à½à½²à¼à½à¼_à½à½à½ à¼à½à¾³à¼à½à¼_à½à½à½ à¼à½à½²à½à¼à½à½à½¢à¼_à½à½à½ à¼à½£à¾·à½à¼à½à¼_à½à½à½ à¼à½à½´à½¢à¼à½à½´_à½à½à½ à¼à½à¼à½¦à½à½¦à¼_à½à½à½ à¼à½¦à¾¤à½ºà½à¼à½à¼'.split(
                '_'
            ),
        weekdaysShort: 'à½à½²à¼à½à¼_à½à¾³à¼à½à¼_à½à½²à½à¼à½à½à½¢à¼_à½£à¾·à½à¼à½à¼_à½à½´à½¢à¼à½à½´_à½à¼à½¦à½à½¦à¼_à½¦à¾¤à½ºà½à¼à½à¼'.split(
            '_'
        ),
        weekdaysMin: 'à½à½²_à½à¾³_à½à½²à½_à½£à¾·à½_à½à½´à½¢_à½¦à½à½¦_à½¦à¾¤à½ºà½'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm',
        },
        calendar: {
            sameDay: '[à½à½²à¼à½¢à½²à½] LT',
            nextDay: '[à½¦à½à¼à½à½²à½] LT',
            nextWeek: '[à½à½à½´à½à¼à½à¾²à½à¼à½¢à¾à½ºà½¦à¼à½], LT',
            lastDay: '[à½à¼à½¦à½] LT',
            lastWeek: '[à½à½à½´à½à¼à½à¾²à½à¼à½à½à½ à¼à½] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s à½£à¼',
            past: '%s à½¦à¾à½à¼à½£',
            s: 'à½£à½à¼à½¦à½',
            ss: '%d à½¦à¾à½¢à¼à½à¼',
            m: 'à½¦à¾à½¢à¼à½à¼à½à½à½²à½',
            mm: '%d à½¦à¾à½¢à¼à½',
            h: 'à½à½´à¼à½à½¼à½à¼à½à½à½²à½',
            hh: '%d à½à½´à¼à½à½¼à½',
            d: 'à½à½²à½à¼à½à½à½²à½',
            dd: '%d à½à½²à½à¼',
            M: 'à½à¾³à¼à½à¼à½à½à½²à½',
            MM: '%d à½à¾³à¼à½',
            y: 'à½£à½¼à¼à½à½à½²à½',
            yy: '%d à½£à½¼',
        },
        preparse: function (string) {
            return string.replace(/[à¼¡à¼¢à¼£à¼¤à¼¥à¼¦à¼§à¼¨à¼©à¼ ]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /à½à½à½à¼à½à½¼|à½à½¼à½à½¦à¼à½à½¦|à½à½²à½à¼à½à½´à½|à½à½à½¼à½à¼à½à½|à½à½à½à¼à½à½¼/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                (meridiem === 'à½à½à½à¼à½à½¼' && hour >= 4) ||
                (meridiem === 'à½à½²à½à¼à½à½´à½' && hour < 5) ||
                meridiem === 'à½à½à½¼à½à¼à½à½'
            ) {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'à½à½à½à¼à½à½¼';
            } else if (hour < 10) {
                return 'à½à½¼à½à½¦à¼à½à½¦';
            } else if (hour < 17) {
                return 'à½à½²à½à¼à½à½´à½';
            } else if (hour < 20) {
                return 'à½à½à½¼à½à¼à½à½';
            } else {
                return 'à½à½à½à¼à½à½¼';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return bo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/br.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/br.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Breton [br]
//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            mm: 'munutenn',
            MM: 'miz',
            dd: 'devezh',
        };
        return number + ' ' + mutation(format[key], number);
    }
    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
            case 1:
            case 3:
            case 4:
            case 5:
            case 9:
                return number + ' bloaz';
            default:
                return number + ' vloaz';
        }
    }
    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }
    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }
    function softMutation(text) {
        var mutationTable = {
            m: 'v',
            b: 'v',
            d: 'z',
        };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }

    var monthsParse = [
            /^gen/i,
            /^c[Ê¼\']hwe/i,
            /^meu/i,
            /^ebr/i,
            /^mae/i,
            /^(mez|eve)/i,
            /^gou/i,
            /^eos/i,
            /^gwe/i,
            /^her/i,
            /^du/i,
            /^ker/i,
        ],
        monthsRegex =
            /^(genver|c[Ê¼\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[Ê¼\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
        monthsStrictRegex =
            /^(genver|c[Ê¼\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,
        monthsShortStrictRegex =
            /^(gen|c[Ê¼\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
        fullWeekdaysParse = [
            /^sul/i,
            /^lun/i,
            /^meurzh/i,
            /^merc[Ê¼\']her/i,
            /^yaou/i,
            /^gwener/i,
            /^sadorn/i,
        ],
        shortWeekdaysParse = [
            /^Sul/i,
            /^Lun/i,
            /^Meu/i,
            /^Mer/i,
            /^Yao/i,
            /^Gwe/i,
            /^Sad/i,
        ],
        minWeekdaysParse = [
            /^Su/i,
            /^Lu/i,
            /^Me([^r]|$)/i,
            /^Mer/i,
            /^Ya/i,
            /^Gw/i,
            /^Sa/i,
        ];

    var br = moment.defineLocale('br', {
        months: 'Genver_CÊ¼hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split(
            '_'
        ),
        monthsShort: 'Gen_CÊ¼hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
        weekdays: 'Sul_Lun_Meurzh_MercÊ¼her_Yaou_Gwener_Sadorn'.split('_'),
        weekdaysShort: 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
        weekdaysParse: minWeekdaysParse,
        fullWeekdaysParse: fullWeekdaysParse,
        shortWeekdaysParse: shortWeekdaysParse,
        minWeekdaysParse: minWeekdaysParse,

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: monthsStrictRegex,
        monthsShortStrictRegex: monthsShortStrictRegex,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [a viz] MMMM YYYY',
            LLL: 'D [a viz] MMMM YYYY HH:mm',
            LLLL: 'dddd, D [a viz] MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Hiziv da] LT',
            nextDay: '[WarcÊ¼hoazh da] LT',
            nextWeek: 'dddd [da] LT',
            lastDay: '[DecÊ¼h da] LT',
            lastWeek: 'dddd [paset da] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'a-benn %s',
            past: '%s Ê¼zo',
            s: 'un nebeud segondennoÃ¹',
            ss: '%d eilenn',
            m: 'ur vunutenn',
            mm: relativeTimeWithMutation,
            h: 'un eur',
            hh: '%d eur',
            d: 'un devezh',
            dd: relativeTimeWithMutation,
            M: 'ur miz',
            MM: relativeTimeWithMutation,
            y: 'ur bloaz',
            yy: specialMutationForYears,
        },
        dayOfMonthOrdinalParse: /\d{1,2}(aÃ±|vet)/,
        ordinal: function (number) {
            var output = number === 1 ? 'aÃ±' : 'vet';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
        meridiemParse: /a.m.|g.m./, // goude merenn | a-raok merenn
        isPM: function (token) {
            return token === 'g.m.';
        },
        meridiem: function (hour, minute, isLower) {
            return hour < 12 ? 'a.m.' : 'g.m.';
        },
    });

    return br;

})));


/***/ }),

/***/ "./node_modules/moment/locale/bs.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/bs.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Bosnian [bs]
//! author : Nedim Cholich : https://github.com/frontyard
//! based on (hr) translation by Bojan MarkoviÄ

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var bs = moment.defineLocale('bs', {
        months: 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_Äetvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sri._Äet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_Äe_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juÄer u] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[proÅ¡lu] dddd [u] LT';
                    case 6:
                        return '[proÅ¡le] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[proÅ¡li] dddd [u] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return bs;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ca.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ca.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Catalan [ca]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ca = moment.defineLocale('ca', {
        months: {
            standalone:
                'gener_febrer_marÃ§_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split(
                    '_'
                ),
            format: "de gener_de febrer_de marÃ§_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split(
                '_'
            ),
            isFormat: /D[oD]?(\s)+MMMM/,
        },
        monthsShort:
            'gen._febr._marÃ§_abr._maig_juny_jul._ag._set._oct._nov._des.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split(
                '_'
            ),
        weekdaysShort: 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [de] YYYY',
            ll: 'D MMM YYYY',
            LLL: 'D MMMM [de] YYYY [a les] H:mm',
            lll: 'D MMM YYYY, H:mm',
            LLLL: 'dddd D MMMM [de] YYYY [a les] H:mm',
            llll: 'ddd D MMM YYYY, H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[avui a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextDay: function () {
                return '[demÃ  a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastDay: function () {
                return '[ahir a ' + (this.hours() !== 1 ? 'les' : 'la') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [passat a ' +
                    (this.hours() !== 1 ? 'les' : 'la') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: "d'aquÃ­ %s",
            past: 'fa %s',
            s: 'uns segons',
            ss: '%d segons',
            m: 'un minut',
            mm: '%d minuts',
            h: 'una hora',
            hh: '%d hores',
            d: 'un dia',
            dd: '%d dies',
            M: 'un mes',
            MM: '%d mesos',
            y: 'un any',
            yy: '%d anys',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|Ã¨|a)/,
        ordinal: function (number, period) {
            var output =
                number === 1
                    ? 'r'
                    : number === 2
                    ? 'n'
                    : number === 3
                    ? 'r'
                    : number === 4
                    ? 't'
                    : 'Ã¨';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ca;

})));


/***/ }),

/***/ "./node_modules/moment/locale/cs.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/cs.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Czech [cs]
//! author : petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = {
            format: 'leden_Ãºnor_bÅezen_duben_kvÄten_Äerven_Äervenec_srpen_zÃ¡ÅÃ­_ÅÃ­jen_listopad_prosinec'.split(
                '_'
            ),
            standalone:
                'ledna_Ãºnora_bÅezna_dubna_kvÄtna_Äervna_Äervence_srpna_zÃ¡ÅÃ­_ÅÃ­jna_listopadu_prosince'.split(
                    '_'
                ),
        },
        monthsShort = 'led_Ãºno_bÅe_dub_kvÄ_Ävn_Ävc_srp_zÃ¡Å_ÅÃ­j_lis_pro'.split('_'),
        monthsParse = [
            /^led/i,
            /^Ãºno/i,
            /^bÅe/i,
            /^dub/i,
            /^kvÄ/i,
            /^(Ävn|Äerven$|Äervna)/i,
            /^(Ävc|Äervenec|Äervence)/i,
            /^srp/i,
            /^zÃ¡Å/i,
            /^ÅÃ­j/i,
            /^lis/i,
            /^pro/i,
        ],
        // NOTE: 'Äerven' is substring of 'Äervenec'; therefore 'Äervenec' must precede 'Äerven' in the regex to be fully matched.
        // Otherwise parser matches '1. Äervenec' as '1. Äerven' + 'ec'.
        monthsRegex =
            /^(leden|Ãºnor|bÅezen|duben|kvÄten|Äervenec|Äervence|Äerven|Äervna|srpen|zÃ¡ÅÃ­|ÅÃ­jen|listopad|prosinec|led|Ãºno|bÅe|dub|kvÄ|Ävn|Ävc|srp|zÃ¡Å|ÅÃ­j|lis|pro)/i;

    function plural(n) {
        return n > 1 && n < 5 && ~~(n / 10) !== 1;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's': // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture ? 'pÃ¡r sekund' : 'pÃ¡r sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekund');
                } else {
                    return result + 'sekundami';
                }
            case 'm': // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minuta' : isFuture ? 'minutu' : 'minutou';
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minuty' : 'minut');
                } else {
                    return result + 'minutami';
                }
            case 'h': // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodin');
                } else {
                    return result + 'hodinami';
                }
            case 'd': // a day / in a day / a day ago
                return withoutSuffix || isFuture ? 'den' : 'dnem';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dny' : 'dnÃ­');
                } else {
                    return result + 'dny';
                }
            case 'M': // a month / in a month / a month ago
                return withoutSuffix || isFuture ? 'mÄsÃ­c' : 'mÄsÃ­cem';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'mÄsÃ­ce' : 'mÄsÃ­cÅ¯');
                } else {
                    return result + 'mÄsÃ­ci';
                }
            case 'y': // a year / in a year / a year ago
                return withoutSuffix || isFuture ? 'rok' : 'rokem';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'let');
                } else {
                    return result + 'lety';
                }
        }
    }

    var cs = moment.defineLocale('cs', {
        months: months,
        monthsShort: monthsShort,
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        // NOTE: 'Äerven' is substring of 'Äervenec'; therefore 'Äervenec' must precede 'Äerven' in the regex to be fully matched.
        // Otherwise parser matches '1. Äervenec' as '1. Äerven' + 'ec'.
        monthsStrictRegex:
            /^(leden|ledna|Ãºnora|Ãºnor|bÅezen|bÅezna|duben|dubna|kvÄten|kvÄtna|Äervenec|Äervence|Äerven|Äervna|srpen|srpna|zÃ¡ÅÃ­|ÅÃ­jen|ÅÃ­jna|listopadu|listopad|prosinec|prosince)/i,
        monthsShortStrictRegex:
            /^(led|Ãºno|bÅe|dub|kvÄ|Ävn|Ävc|srp|zÃ¡Å|ÅÃ­j|lis|pro)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'nedÄle_pondÄlÃ­_ÃºterÃ½_stÅeda_Ätvrtek_pÃ¡tek_sobota'.split('_'),
        weekdaysShort: 'ne_po_Ãºt_st_Ät_pÃ¡_so'.split('_'),
        weekdaysMin: 'ne_po_Ãºt_st_Ät_pÃ¡_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm',
            l: 'D. M. YYYY',
        },
        calendar: {
            sameDay: '[dnes v] LT',
            nextDay: '[zÃ­tra v] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v nedÄli v] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [v] LT';
                    case 3:
                        return '[ve stÅedu v] LT';
                    case 4:
                        return '[ve Ätvrtek v] LT';
                    case 5:
                        return '[v pÃ¡tek v] LT';
                    case 6:
                        return '[v sobotu v] LT';
                }
            },
            lastDay: '[vÄera v] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulou nedÄli v] LT';
                    case 1:
                    case 2:
                        return '[minulÃ©] dddd [v] LT';
                    case 3:
                        return '[minulou stÅedu v] LT';
                    case 4:
                    case 5:
                        return '[minulÃ½] dddd [v] LT';
                    case 6:
                        return '[minulou sobotu v] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'pÅed %s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return cs;

})));


/***/ }),

/***/ "./node_modules/moment/locale/cv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/cv.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chuvash [cv]
//! author : Anatoly Mironov : https://github.com/mirontoli

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var cv = moment.defineLocale('cv', {
        months: 'ÐºÓÑÐ»Ð°Ñ_Ð½Ð°ÑÓÑ_Ð¿ÑÑ_Ð°ÐºÐ°_Ð¼Ð°Ð¹_Ò«ÓÑÑÐ¼Ðµ_ÑÑÓ_Ò«ÑÑÐ»Ð°_Ð°Ð²ÓÐ½_ÑÐ¿Ð°_ÑÓ³Ðº_ÑÐ°ÑÑÐ°Ð²'.split(
            '_'
        ),
        monthsShort: 'ÐºÓÑ_Ð½Ð°Ñ_Ð¿ÑÑ_Ð°ÐºÐ°_Ð¼Ð°Ð¹_Ò«ÓÑ_ÑÑÓ_Ò«ÑÑ_Ð°Ð²Ð½_ÑÐ¿Ð°_ÑÓ³Ðº_ÑÐ°Ñ'.split('_'),
        weekdays:
            'Ð²ÑÑÑÐ°ÑÐ½Ð¸ÐºÑÐ½_ÑÑÐ½ÑÐ¸ÐºÑÐ½_ÑÑÐ»Ð°ÑÐ¸ÐºÑÐ½_ÑÐ½ÐºÑÐ½_ÐºÓÒ«Ð½ÐµÑÐ½Ð¸ÐºÑÐ½_ÑÑÐ½ÐµÐºÑÐ½_ÑÓÐ¼Ð°ÑÐºÑÐ½'.split(
                '_'
            ),
        weekdaysShort: 'Ð²ÑÑ_ÑÑÐ½_ÑÑÐ»_ÑÐ½_ÐºÓÒ«_ÑÑÐ½_ÑÓÐ¼'.split('_'),
        weekdaysMin: 'Ð²Ñ_ÑÐ½_ÑÑ_ÑÐ½_ÐºÒ«_ÑÑ_ÑÐ¼'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'YYYY [Ò«ÑÐ»ÑÐ¸] MMMM [ÑÐ¹ÓÑÓÐ½] D[-Ð¼ÓÑÓ]',
            LLL: 'YYYY [Ò«ÑÐ»ÑÐ¸] MMMM [ÑÐ¹ÓÑÓÐ½] D[-Ð¼ÓÑÓ], HH:mm',
            LLLL: 'dddd, YYYY [Ò«ÑÐ»ÑÐ¸] MMMM [ÑÐ¹ÓÑÓÐ½] D[-Ð¼ÓÑÓ], HH:mm',
        },
        calendar: {
            sameDay: '[ÐÐ°ÑÐ½] LT [ÑÐµÑÐµÑÑÐµ]',
            nextDay: '[Ð«ÑÐ°Ð½] LT [ÑÐµÑÐµÑÑÐµ]',
            lastDay: '[ÓÐ½ÐµÑ] LT [ÑÐµÑÐµÑÑÐµ]',
            nextWeek: '[ÒªÐ¸ÑÐµÑ] dddd LT [ÑÐµÑÐµÑÑÐµ]',
            lastWeek: '[ÐÑÑÐ½Ó] dddd LT [ÑÐµÑÐµÑÑÐµ]',
            sameElse: 'L',
        },
        relativeTime: {
            future: function (output) {
                var affix = /ÑÐµÑÐµÑ$/i.exec(output)
                    ? 'ÑÐµÐ½'
                    : /Ò«ÑÐ»$/i.exec(output)
                    ? 'ÑÐ°Ð½'
                    : 'ÑÐ°Ð½';
                return output + affix;
            },
            past: '%s ÐºÐ°ÑÐ»Ð»Ð°',
            s: 'Ð¿ÓÑ-Ð¸Ðº Ò«ÐµÐºÐºÑÐ½Ñ',
            ss: '%d Ò«ÐµÐºÐºÑÐ½Ñ',
            m: 'Ð¿ÓÑ Ð¼Ð¸Ð½ÑÑ',
            mm: '%d Ð¼Ð¸Ð½ÑÑ',
            h: 'Ð¿ÓÑ ÑÐµÑÐµÑ',
            hh: '%d ÑÐµÑÐµÑ',
            d: 'Ð¿ÓÑ ÐºÑÐ½',
            dd: '%d ÐºÑÐ½',
            M: 'Ð¿ÓÑ ÑÐ¹ÓÑ',
            MM: '%d ÑÐ¹ÓÑ',
            y: 'Ð¿ÓÑ Ò«ÑÐ»',
            yy: '%d Ò«ÑÐ»',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-Ð¼ÓÑ/,
        ordinal: '%d-Ð¼ÓÑ',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return cv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/cy.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/cy.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Welsh [cy]
//! author : Robert Allen : https://github.com/robgallen
//! author : https://github.com/ryangreaves

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var cy = moment.defineLocale('cy', {
        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split(
            '_'
        ),
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split(
            '_'
        ),
        weekdays:
            'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split(
                '_'
            ),
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
        weekdaysParseExact: true,
        // time formats are the same as en-gb
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'mewn %s',
            past: '%s yn Ã´l',
            s: 'ychydig eiliadau',
            ss: '%d eiliad',
            m: 'munud',
            mm: '%d munud',
            h: 'awr',
            hh: '%d awr',
            d: 'diwrnod',
            dd: '%d diwrnod',
            M: 'mis',
            MM: '%d mis',
            y: 'blwyddyn',
            yy: '%d flynedd',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
        ordinal: function (number) {
            var b = number,
                output = '',
                lookup = [
                    '',
                    'af',
                    'il',
                    'ydd',
                    'ydd',
                    'ed',
                    'ed',
                    'ed',
                    'fed',
                    'fed',
                    'fed', // 1af to 10fed
                    'eg',
                    'fed',
                    'eg',
                    'eg',
                    'fed',
                    'eg',
                    'eg',
                    'fed',
                    'eg',
                    'fed', // 11eg to 20fed
                ];
            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return cy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/da.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/da.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Danish [da]
//! author : Ulrik Nielsen : https://github.com/mrbase

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var da = moment.defineLocale('da', {
        months: 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'sÃ¸ndag_mandag_tirsdag_onsdag_torsdag_fredag_lÃ¸rdag'.split('_'),
        weekdaysShort: 'sÃ¸n_man_tir_ons_tor_fre_lÃ¸r'.split('_'),
        weekdaysMin: 'sÃ¸_ma_ti_on_to_fr_lÃ¸'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd [d.] D. MMMM YYYY [kl.] HH:mm',
        },
        calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'pÃ¥ dddd [kl.] LT',
            lastDay: '[i gÃ¥r kl.] LT',
            lastWeek: '[i] dddd[s kl.] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'fÃ¥ sekunder',
            ss: '%d sekunder',
            m: 'et minut',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dage',
            M: 'en mÃ¥ned',
            MM: '%d mÃ¥neder',
            y: 'et Ã¥r',
            yy: '%d Ã¥r',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return da;

})));


/***/ }),

/***/ "./node_modules/moment/locale/de-at.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/de-at.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Austria) [de-at]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion ElensÃºle: https://github.com/Oire
//! author : Martin Groller : https://github.com/MadMG
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deAt = moment.defineLocale('de-at', {
        months: 'JÃ¤nner_Februar_MÃ¤rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'JÃ¤n._Feb._MÃ¤rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays:
            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
                '_'
            ),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return deAt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/de-ch.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/de-ch.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German (Switzerland) [de-ch]
//! author : sschueller : https://github.com/sschueller

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deCh = moment.defineLocale('de-ch', {
        months: 'Januar_Februar_MÃ¤rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'Jan._Feb._MÃ¤rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays:
            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
                '_'
            ),
        weekdaysShort: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return deCh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/de.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/de.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : German [de]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion ElensÃºle: https://github.com/Oire
//! author : Mikolaj Dadela : https://github.com/mik01aj

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eine Minute', 'einer Minute'],
            h: ['eine Stunde', 'einer Stunde'],
            d: ['ein Tag', 'einem Tag'],
            dd: [number + ' Tage', number + ' Tagen'],
            w: ['eine Woche', 'einer Woche'],
            M: ['ein Monat', 'einem Monat'],
            MM: [number + ' Monate', number + ' Monaten'],
            y: ['ein Jahr', 'einem Jahr'],
            yy: [number + ' Jahre', number + ' Jahren'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var de = moment.defineLocale('de', {
        months: 'Januar_Februar_MÃ¤rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'Jan._Feb._MÃ¤rz_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays:
            'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split(
                '_'
            ),
        weekdaysShort: 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY HH:mm',
            LLLL: 'dddd, D. MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]',
        },
        relativeTime: {
            future: 'in %s',
            past: 'vor %s',
            s: 'ein paar Sekunden',
            ss: '%d Sekunden',
            m: processRelativeTime,
            mm: '%d Minuten',
            h: processRelativeTime,
            hh: '%d Stunden',
            d: processRelativeTime,
            dd: processRelativeTime,
            w: processRelativeTime,
            ww: '%d Wochen',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return de;

})));


/***/ }),

/***/ "./node_modules/moment/locale/dv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/dv.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maldivian [dv]
//! author : Jawish Hameed : https://github.com/jawish

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'ÞÞ¬ÞÞªÞÞ¦ÞÞ©',
            'ÞÞ¬ÞÞ°ÞÞªÞÞ¦ÞÞ©',
            'ÞÞ§ÞÞ¨ÞÞª',
            'ÞÞ­ÞÞ°ÞÞ©ÞÞª',
            'ÞÞ­',
            'ÞÞ«ÞÞ°',
            'ÞÞªÞÞ¦ÞÞ¨',
            'ÞÞ¯ÞÞ¦ÞÞ°ÞÞª',
            'ÞÞ¬ÞÞ°ÞÞ¬ÞÞ°ÞÞ¦ÞÞª',
            'ÞÞ®ÞÞ°ÞÞ¯ÞÞ¦ÞÞª',
            'ÞÞ®ÞÞ¬ÞÞ°ÞÞ¦ÞÞª',
            'ÞÞ¨ÞÞ¬ÞÞ°ÞÞ¦ÞÞª',
        ],
        weekdays = [
            'ÞÞ§ÞÞ¨ÞÞ°ÞÞ¦',
            'ÞÞ¯ÞÞ¦',
            'ÞÞ¦ÞÞ°ÞÞ§ÞÞ¦',
            'ÞÞªÞÞ¦',
            'ÞÞªÞÞ§ÞÞ°ÞÞ¦ÞÞ¨',
            'ÞÞªÞÞªÞÞª',
            'ÞÞ®ÞÞ¨ÞÞ¨ÞÞª',
        ];

    var dv = moment.defineLocale('dv', {
        months: months,
        monthsShort: months,
        weekdays: weekdays,
        weekdaysShort: weekdays,
        weekdaysMin: 'ÞÞ§ÞÞ¨_ÞÞ¯ÞÞ¦_ÞÞ¦ÞÞ°_ÞÞªÞÞ¦_ÞÞªÞÞ§_ÞÞªÞÞª_ÞÞ®ÞÞ¨'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'D/M/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /ÞÞ|ÞÞ/,
        isPM: function (input) {
            return 'ÞÞ' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ÞÞ';
            } else {
                return 'ÞÞ';
            }
        },
        calendar: {
            sameDay: '[ÞÞ¨ÞÞ¦ÞÞª] LT',
            nextDay: '[ÞÞ§ÞÞ¦ÞÞ§] LT',
            nextWeek: 'dddd LT',
            lastDay: '[ÞÞ¨ÞÞ°ÞÞ¬] LT',
            lastWeek: '[ÞÞ§ÞÞ¨ÞÞªÞÞ¨] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ÞÞ¬ÞÞ­ÞÞ¦ÞÞ¨ %s',
            past: 'ÞÞªÞÞ¨ÞÞ° %s',
            s: 'ÞÞ¨ÞÞªÞÞ°ÞÞªÞÞ®ÞÞ¬ÞÞ°',
            ss: 'd% ÞÞ¨ÞÞªÞÞ°ÞÞª',
            m: 'ÞÞ¨ÞÞ¨ÞÞ¬ÞÞ°',
            mm: 'ÞÞ¨ÞÞ¨ÞÞª %d',
            h: 'ÞÞ¦ÞÞ¨ÞÞ¨ÞÞ¬ÞÞ°',
            hh: 'ÞÞ¦ÞÞ¨ÞÞ¨ÞÞª %d',
            d: 'ÞÞªÞÞ¦ÞÞ¬ÞÞ°',
            dd: 'ÞÞªÞÞ¦ÞÞ° %d',
            M: 'ÞÞ¦ÞÞ¬ÞÞ°',
            MM: 'ÞÞ¦ÞÞ° %d',
            y: 'ÞÞ¦ÞÞ¦ÞÞ¬ÞÞ°',
            yy: 'ÞÞ¦ÞÞ¦ÞÞª %d',
        },
        preparse: function (string) {
            return string.replace(/Ø/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, 'Ø');
        },
        week: {
            dow: 7, // Sunday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return dv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/el.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/el.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Greek [el]
//! author : Aggelos Karalias : https://github.com/mehiel

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    var el = moment.defineLocale('el', {
        monthsNominativeEl:
            'ÎÎ±Î½Î¿ÏÎ¬ÏÎ¹Î¿Ï_Î¦ÎµÎ²ÏÎ¿ÏÎ¬ÏÎ¹Î¿Ï_ÎÎ¬ÏÏÎ¹Î¿Ï_ÎÏÏÎ¯Î»Î¹Î¿Ï_ÎÎ¬Î¹Î¿Ï_ÎÎ¿ÏÎ½Î¹Î¿Ï_ÎÎ¿ÏÎ»Î¹Î¿Ï_ÎÏÎ³Î¿ÏÏÏÎ¿Ï_Î£ÎµÏÏÎ­Î¼Î²ÏÎ¹Î¿Ï_ÎÎºÏÏÎ²ÏÎ¹Î¿Ï_ÎÎ¿Î­Î¼Î²ÏÎ¹Î¿Ï_ÎÎµÎºÎ­Î¼Î²ÏÎ¹Î¿Ï'.split(
                '_'
            ),
        monthsGenitiveEl:
            'ÎÎ±Î½Î¿ÏÎ±ÏÎ¯Î¿Ï_Î¦ÎµÎ²ÏÎ¿ÏÎ±ÏÎ¯Î¿Ï_ÎÎ±ÏÏÎ¯Î¿Ï_ÎÏÏÎ¹Î»Î¯Î¿Ï_ÎÎ±ÎÎ¿Ï_ÎÎ¿ÏÎ½Î¯Î¿Ï_ÎÎ¿ÏÎ»Î¯Î¿Ï_ÎÏÎ³Î¿ÏÏÏÎ¿Ï_Î£ÎµÏÏÎµÎ¼Î²ÏÎ¯Î¿Ï_ÎÎºÏÏÎ²ÏÎ¯Î¿Ï_ÎÎ¿ÎµÎ¼Î²ÏÎ¯Î¿Ï_ÎÎµÎºÎµÎ¼Î²ÏÎ¯Î¿Ï'.split(
                '_'
            ),
        months: function (momentToFormat, format) {
            if (!momentToFormat) {
                return this._monthsNominativeEl;
            } else if (
                typeof format === 'string' &&
                /D/.test(format.substring(0, format.indexOf('MMMM')))
            ) {
                // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort: 'ÎÎ±Î½_Î¦ÎµÎ²_ÎÎ±Ï_ÎÏÏ_ÎÎ±Ï_ÎÎ¿ÏÎ½_ÎÎ¿ÏÎ»_ÎÏÎ³_Î£ÎµÏ_ÎÎºÏ_ÎÎ¿Îµ_ÎÎµÎº'.split('_'),
        weekdays: 'ÎÏÏÎ¹Î±ÎºÎ®_ÎÎµÏÏÎ­ÏÎ±_Î¤ÏÎ¯ÏÎ·_Î¤ÎµÏÎ¬ÏÏÎ·_Î Î­Î¼ÏÏÎ·_Î Î±ÏÎ±ÏÎºÎµÏÎ®_Î£Î¬Î²Î²Î±ÏÎ¿'.split(
            '_'
        ),
        weekdaysShort: 'ÎÏÏ_ÎÎµÏ_Î¤ÏÎ¹_Î¤ÎµÏ_Î ÎµÎ¼_Î Î±Ï_Î£Î±Î²'.split('_'),
        weekdaysMin: 'ÎÏ_ÎÎµ_Î¤Ï_Î¤Îµ_Î Îµ_Î Î±_Î£Î±'.split('_'),
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'Î¼Î¼' : 'ÎÎ';
            } else {
                return isLower ? 'ÏÎ¼' : 'Î Î';
            }
        },
        isPM: function (input) {
            return (input + '').toLowerCase()[0] === 'Î¼';
        },
        meridiemParse: /[Î Î]\.?Î?\.?/i,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendarEl: {
            sameDay: '[Î£Î®Î¼ÎµÏÎ± {}] LT',
            nextDay: '[ÎÏÏÎ¹Î¿ {}] LT',
            nextWeek: 'dddd [{}] LT',
            lastDay: '[Î§Î¸ÎµÏ {}] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 6:
                        return '[ÏÎ¿ ÏÏÎ¿Î·Î³Î¿ÏÎ¼ÎµÎ½Î¿] dddd [{}] LT';
                    default:
                        return '[ÏÎ·Î½ ÏÏÎ¿Î·Î³Î¿ÏÎ¼ÎµÎ½Î·] dddd [{}] LT';
                }
            },
            sameElse: 'L',
        },
        calendar: function (key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();
            if (isFunction(output)) {
                output = output.apply(mom);
            }
            return output.replace('{}', hours % 12 === 1 ? 'ÏÏÎ·' : 'ÏÏÎ¹Ï');
        },
        relativeTime: {
            future: 'ÏÎµ %s',
            past: '%s ÏÏÎ¹Î½',
            s: 'Î»Î¯Î³Î± Î´ÎµÏÏÎµÏÏÎ»ÎµÏÏÎ±',
            ss: '%d Î´ÎµÏÏÎµÏÏÎ»ÎµÏÏÎ±',
            m: 'Î­Î½Î± Î»ÎµÏÏÏ',
            mm: '%d Î»ÎµÏÏÎ¬',
            h: 'Î¼Î¯Î± ÏÏÎ±',
            hh: '%d ÏÏÎµÏ',
            d: 'Î¼Î¯Î± Î¼Î­ÏÎ±',
            dd: '%d Î¼Î­ÏÎµÏ',
            M: 'Î­Î½Î±Ï Î¼Î®Î½Î±Ï',
            MM: '%d Î¼Î®Î½ÎµÏ',
            y: 'Î­Î½Î±Ï ÏÏÏÎ½Î¿Ï',
            yy: '%d ÏÏÏÎ½Î¹Î±',
        },
        dayOfMonthOrdinalParse: /\d{1,2}Î·/,
        ordinal: '%dÎ·',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4st is the first week of the year.
        },
    });

    return el;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-au.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-au.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Australia) [en-au]
//! author : Jared Morse : https://github.com/jarcoal

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enAu = moment.defineLocale('en-au', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enAu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-ca.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-ca.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Canada) [en-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enCa = moment.defineLocale('en-ca', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'YYYY-MM-DD',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY h:mm A',
            LLLL: 'dddd, MMMM D, YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    return enCa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-gb.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-gb.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (United Kingdom) [en-gb]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enGb = moment.defineLocale('en-gb', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enGb;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-ie.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-ie.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Ireland) [en-ie]
//! author : Chris Cartlidge : https://github.com/chriscartlidge

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enIe = moment.defineLocale('en-ie', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enIe;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-il.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-il.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Israel) [en-il]
//! author : Chris Gedrim : https://github.com/chrisgedrim

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enIl = moment.defineLocale('en-il', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    return enIl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-in.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-in.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (India) [en-in]
//! author : Jatin Agrawal : https://github.com/jatinag22

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enIn = moment.defineLocale('en-in', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 1st is the first week of the year.
        },
    });

    return enIn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-nz.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-nz.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (New Zealand) [en-nz]
//! author : Luke McGregor : https://github.com/lukemcgregor

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enNz = moment.defineLocale('en-nz', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enNz;

})));


/***/ }),

/***/ "./node_modules/moment/locale/en-sg.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/en-sg.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : English (Singapore) [en-sg]
//! author : Matthew Castrillon-Madrigal : https://github.com/techdimension

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var enSg = moment.defineLocale('en-sg', {
        months: 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays: 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
            '_'
        ),
        weekdaysShort: 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin: 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Today at] LT',
            nextDay: '[Tomorrow at] LT',
            nextWeek: 'dddd [at] LT',
            lastDay: '[Yesterday at] LT',
            lastWeek: '[Last] dddd [at] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'in %s',
            past: '%s ago',
            s: 'a few seconds',
            ss: '%d seconds',
            m: 'a minute',
            mm: '%d minutes',
            h: 'an hour',
            hh: '%d hours',
            d: 'a day',
            dd: '%d days',
            M: 'a month',
            MM: '%d months',
            y: 'a year',
            yy: '%d years',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return enSg;

})));


/***/ }),

/***/ "./node_modules/moment/locale/eo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/eo.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Esperanto [eo]
//! author : Colin Dean : https://github.com/colindean
//! author : Mia Nordentoft Imperatori : https://github.com/miestasmia
//! comment : miestasmia corrected the translation by colindean
//! comment : Vivakvo corrected the translation by colindean and miestasmia

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var eo = moment.defineLocale('eo', {
        months: 'januaro_februaro_marto_aprilo_majo_junio_julio_aÅ­gusto_septembro_oktobro_novembro_decembro'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mart_apr_maj_jun_jul_aÅ­g_sept_okt_nov_dec'.split('_'),
        weekdays: 'dimanÄo_lundo_mardo_merkredo_ÄµaÅ­do_vendredo_sabato'.split('_'),
        weekdaysShort: 'dim_lun_mard_merk_ÄµaÅ­_ven_sab'.split('_'),
        weekdaysMin: 'di_lu_ma_me_Äµa_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: '[la] D[-an de] MMMM, YYYY',
            LLL: '[la] D[-an de] MMMM, YYYY HH:mm',
            LLLL: 'dddd[n], [la] D[-an de] MMMM, YYYY HH:mm',
            llll: 'ddd, [la] D[-an de] MMM, YYYY HH:mm',
        },
        meridiemParse: /[ap]\.t\.m/i,
        isPM: function (input) {
            return input.charAt(0).toLowerCase() === 'p';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar: {
            sameDay: '[HodiaÅ­ je] LT',
            nextDay: '[MorgaÅ­ je] LT',
            nextWeek: 'dddd[n je] LT',
            lastDay: '[HieraÅ­ je] LT',
            lastWeek: '[pasintan] dddd[n je] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'post %s',
            past: 'antaÅ­ %s',
            s: 'kelkaj sekundoj',
            ss: '%d sekundoj',
            m: 'unu minuto',
            mm: '%d minutoj',
            h: 'unu horo',
            hh: '%d horoj',
            d: 'unu tago', //ne 'diurno', Äar estas uzita por proksimumo
            dd: '%d tagoj',
            M: 'unu monato',
            MM: '%d monatoj',
            y: 'unu jaro',
            yy: '%d jaroj',
        },
        dayOfMonthOrdinalParse: /\d{1,2}a/,
        ordinal: '%da',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return eo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es-do.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/es-do.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (Dominican Republic) [es-do]

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esDo = moment.defineLocale('es-do', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miÃ©rcoles_jueves_viernes_sÃ¡bado'.split('_'),
        weekdaysShort: 'dom._lun._mar._miÃ©._jue._vie._sÃ¡b.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sÃ¡'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY h:mm A',
            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[maÃ±ana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un dÃ­a',
            dd: '%d dÃ­as',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un aÃ±o',
            yy: '%d aÃ±os',
        },
        dayOfMonthOrdinalParse: /\d{1,2}Âº/,
        ordinal: '%dÂº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return esDo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es-mx.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/es-mx.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (Mexico) [es-mx]
//! author : JC Franco : https://github.com/jcfranco

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esMx = moment.defineLocale('es-mx', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miÃ©rcoles_jueves_viernes_sÃ¡bado'.split('_'),
        weekdaysShort: 'dom._lun._mar._miÃ©._jue._vie._sÃ¡b.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sÃ¡'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[maÃ±ana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un dÃ­a',
            dd: '%d dÃ­as',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un aÃ±o',
            yy: '%d aÃ±os',
        },
        dayOfMonthOrdinalParse: /\d{1,2}Âº/,
        ordinal: '%dÂº',
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
        invalidDate: 'Fecha invÃ¡lida',
    });

    return esMx;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es-us.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/es-us.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish (United States) [es-us]
//! author : bustta : https://github.com/bustta
//! author : chrisrodz : https://github.com/chrisrodz

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esUs = moment.defineLocale('es-us', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miÃ©rcoles_jueves_viernes_sÃ¡bado'.split('_'),
        weekdaysShort: 'dom._lun._mar._miÃ©._jue._vie._sÃ¡b.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sÃ¡'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'MM/DD/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY h:mm A',
            LLLL: 'dddd, D [de] MMMM [de] YYYY h:mm A',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[maÃ±ana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un dÃ­a',
            dd: '%d dÃ­as',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un aÃ±o',
            yy: '%d aÃ±os',
        },
        dayOfMonthOrdinalParse: /\d{1,2}Âº/,
        ordinal: '%dÂº',
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return esUs;

})));


/***/ }),

/***/ "./node_modules/moment/locale/es.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/es.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Spanish [es]
//! author : Julio NapurÃ­ : https://github.com/julionc

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortDot =
            'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split(
                '_'
            ),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_'),
        monthsParse = [
            /^ene/i,
            /^feb/i,
            /^mar/i,
            /^abr/i,
            /^may/i,
            /^jun/i,
            /^jul/i,
            /^ago/i,
            /^sep/i,
            /^oct/i,
            /^nov/i,
            /^dic/i,
        ],
        monthsRegex =
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var es = moment.defineLocale('es', {
        months: 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex:
            /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'domingo_lunes_martes_miÃ©rcoles_jueves_viernes_sÃ¡bado'.split('_'),
        weekdaysShort: 'dom._lun._mar._miÃ©._jue._vie._sÃ¡b.'.split('_'),
        weekdaysMin: 'do_lu_ma_mi_ju_vi_sÃ¡'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[hoy a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextDay: function () {
                return '[maÃ±ana a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastDay: function () {
                return '[ayer a la' + (this.hours() !== 1 ? 's' : '') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[el] dddd [pasado a la' +
                    (this.hours() !== 1 ? 's' : '') +
                    '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'en %s',
            past: 'hace %s',
            s: 'unos segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'una hora',
            hh: '%d horas',
            d: 'un dÃ­a',
            dd: '%d dÃ­as',
            w: 'una semana',
            ww: '%d semanas',
            M: 'un mes',
            MM: '%d meses',
            y: 'un aÃ±o',
            yy: '%d aÃ±os',
        },
        dayOfMonthOrdinalParse: /\d{1,2}Âº/,
        ordinal: '%dÂº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
        invalidDate: 'Fecha invÃ¡lida',
    });

    return es;

})));


/***/ }),

/***/ "./node_modules/moment/locale/et.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/et.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Estonian [et]
//! author : Henry Kehlmann : https://github.com/madhenry
//! improvements : Illimar Tambek : https://github.com/ragulka

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['mÃµne sekundi', 'mÃµni sekund', 'paar sekundit'],
            ss: [number + 'sekundi', number + 'sekundit'],
            m: ['Ã¼he minuti', 'Ã¼ks minut'],
            mm: [number + ' minuti', number + ' minutit'],
            h: ['Ã¼he tunni', 'tund aega', 'Ã¼ks tund'],
            hh: [number + ' tunni', number + ' tundi'],
            d: ['Ã¼he pÃ¤eva', 'Ã¼ks pÃ¤ev'],
            M: ['kuu aja', 'kuu aega', 'Ã¼ks kuu'],
            MM: [number + ' kuu', number + ' kuud'],
            y: ['Ã¼he aasta', 'aasta', 'Ã¼ks aasta'],
            yy: [number + ' aasta', number + ' aastat'],
        };
        if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
    }

    var et = moment.defineLocale('et', {
        months: 'jaanuar_veebruar_mÃ¤rts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split(
            '_'
        ),
        monthsShort:
            'jaan_veebr_mÃ¤rts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
        weekdays:
            'pÃ¼hapÃ¤ev_esmaspÃ¤ev_teisipÃ¤ev_kolmapÃ¤ev_neljapÃ¤ev_reede_laupÃ¤ev'.split(
                '_'
            ),
        weekdaysShort: 'P_E_T_K_N_R_L'.split('_'),
        weekdaysMin: 'P_E_T_K_N_R_L'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[TÃ¤na,] LT',
            nextDay: '[Homme,] LT',
            nextWeek: '[JÃ¤rgmine] dddd LT',
            lastDay: '[Eile,] LT',
            lastWeek: '[Eelmine] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s pÃ¤rast',
            past: '%s tagasi',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: '%d pÃ¤eva',
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return et;

})));


/***/ }),

/***/ "./node_modules/moment/locale/eu.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/eu.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Basque [eu]
//! author : Eneko Illarramendi : https://github.com/eillarra

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var eu = moment.defineLocale('eu', {
        months: 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split(
            '_'
        ),
        monthsShort:
            'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split(
                '_'
            ),
        weekdaysShort: 'ig._al._ar._az._og._ol._lr.'.split('_'),
        weekdaysMin: 'ig_al_ar_az_og_ol_lr'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY[ko] MMMM[ren] D[a]',
            LLL: 'YYYY[ko] MMMM[ren] D[a] HH:mm',
            LLLL: 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
            l: 'YYYY-M-D',
            ll: 'YYYY[ko] MMM D[a]',
            lll: 'YYYY[ko] MMM D[a] HH:mm',
            llll: 'ddd, YYYY[ko] MMM D[a] HH:mm',
        },
        calendar: {
            sameDay: '[gaur] LT[etan]',
            nextDay: '[bihar] LT[etan]',
            nextWeek: 'dddd LT[etan]',
            lastDay: '[atzo] LT[etan]',
            lastWeek: '[aurreko] dddd LT[etan]',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s barru',
            past: 'duela %s',
            s: 'segundo batzuk',
            ss: '%d segundo',
            m: 'minutu bat',
            mm: '%d minutu',
            h: 'ordu bat',
            hh: '%d ordu',
            d: 'egun bat',
            dd: '%d egun',
            M: 'hilabete bat',
            MM: '%d hilabete',
            y: 'urte bat',
            yy: '%d urte',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return eu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fa.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fa.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Persian [fa]
//! author : Ebrahim Byagowi : https://github.com/ebraminio

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'Û±',
            2: 'Û²',
            3: 'Û³',
            4: 'Û´',
            5: 'Ûµ',
            6: 'Û¶',
            7: 'Û·',
            8: 'Û¸',
            9: 'Û¹',
            0: 'Û°',
        },
        numberMap = {
            'Û±': '1',
            'Û²': '2',
            'Û³': '3',
            'Û´': '4',
            'Ûµ': '5',
            'Û¶': '6',
            'Û·': '7',
            'Û¸': '8',
            'Û¹': '9',
            'Û°': '0',
        };

    var fa = moment.defineLocale('fa', {
        months: 'ÚØ§ÙÙÛÙ_ÙÙØ±ÛÙ_ÙØ§Ø±Ø³_Ø¢ÙØ±ÛÙ_ÙÙ_ÚÙØ¦Ù_ÚÙØ¦ÛÙ_Ø§ÙØª_Ø³Ù¾ØªØ§ÙØ¨Ø±_Ø§Ú©ØªØ¨Ø±_ÙÙØ§ÙØ¨Ø±_Ø¯Ø³Ø§ÙØ¨Ø±'.split(
            '_'
        ),
        monthsShort:
            'ÚØ§ÙÙÛÙ_ÙÙØ±ÛÙ_ÙØ§Ø±Ø³_Ø¢ÙØ±ÛÙ_ÙÙ_ÚÙØ¦Ù_ÚÙØ¦ÛÙ_Ø§ÙØª_Ø³Ù¾ØªØ§ÙØ¨Ø±_Ø§Ú©ØªØ¨Ø±_ÙÙØ§ÙØ¨Ø±_Ø¯Ø³Ø§ÙØ¨Ø±'.split(
                '_'
            ),
        weekdays:
            'ÛÚ©\u200cØ´ÙØ¨Ù_Ø¯ÙØ´ÙØ¨Ù_Ø³Ù\u200cØ´ÙØ¨Ù_ÚÙØ§Ø±Ø´ÙØ¨Ù_Ù¾ÙØ¬\u200cØ´ÙØ¨Ù_Ø¬ÙØ¹Ù_Ø´ÙØ¨Ù'.split(
                '_'
            ),
        weekdaysShort:
            'ÛÚ©\u200cØ´ÙØ¨Ù_Ø¯ÙØ´ÙØ¨Ù_Ø³Ù\u200cØ´ÙØ¨Ù_ÚÙØ§Ø±Ø´ÙØ¨Ù_Ù¾ÙØ¬\u200cØ´ÙØ¨Ù_Ø¬ÙØ¹Ù_Ø´ÙØ¨Ù'.split(
                '_'
            ),
        weekdaysMin: 'Û_Ø¯_Ø³_Ú_Ù¾_Ø¬_Ø´'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        meridiemParse: /ÙØ¨Ù Ø§Ø² Ø¸ÙØ±|Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±/,
        isPM: function (input) {
            return /Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ÙØ¨Ù Ø§Ø² Ø¸ÙØ±';
            } else {
                return 'Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±';
            }
        },
        calendar: {
            sameDay: '[Ø§ÙØ±ÙØ² Ø³Ø§Ø¹Øª] LT',
            nextDay: '[ÙØ±Ø¯Ø§ Ø³Ø§Ø¹Øª] LT',
            nextWeek: 'dddd [Ø³Ø§Ø¹Øª] LT',
            lastDay: '[Ø¯ÛØ±ÙØ² Ø³Ø§Ø¹Øª] LT',
            lastWeek: 'dddd [Ù¾ÛØ´] [Ø³Ø§Ø¹Øª] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Ø¯Ø± %s',
            past: '%s Ù¾ÛØ´',
            s: 'ÚÙØ¯ Ø«Ø§ÙÛÙ',
            ss: '%d Ø«Ø§ÙÛÙ',
            m: 'ÛÚ© Ø¯ÙÛÙÙ',
            mm: '%d Ø¯ÙÛÙÙ',
            h: 'ÛÚ© Ø³Ø§Ø¹Øª',
            hh: '%d Ø³Ø§Ø¹Øª',
            d: 'ÛÚ© Ø±ÙØ²',
            dd: '%d Ø±ÙØ²',
            M: 'ÛÚ© ÙØ§Ù',
            MM: '%d ÙØ§Ù',
            y: 'ÛÚ© Ø³Ø§Ù',
            yy: '%d Ø³Ø§Ù',
        },
        preparse: function (string) {
            return string
                .replace(/[Û°-Û¹]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/Ø/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, 'Ø');
        },
        dayOfMonthOrdinalParse: /\d{1,2}Ù/,
        ordinal: '%dÙ',
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return fa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fi.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Finnish [fi]
//! author : Tarmo Aidantausta : https://github.com/bleadof

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var numbersPast =
            'nolla yksi kaksi kolme neljÃ¤ viisi kuusi seitsemÃ¤n kahdeksan yhdeksÃ¤n'.split(
                ' '
            ),
        numbersFuture = [
            'nolla',
            'yhden',
            'kahden',
            'kolmen',
            'neljÃ¤n',
            'viiden',
            'kuuden',
            numbersPast[7],
            numbersPast[8],
            numbersPast[9],
        ];
    function translate(number, withoutSuffix, key, isFuture) {
        var result = '';
        switch (key) {
            case 's':
                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
            case 'ss':
                result = isFuture ? 'sekunnin' : 'sekuntia';
                break;
            case 'm':
                return isFuture ? 'minuutin' : 'minuutti';
            case 'mm':
                result = isFuture ? 'minuutin' : 'minuuttia';
                break;
            case 'h':
                return isFuture ? 'tunnin' : 'tunti';
            case 'hh':
                result = isFuture ? 'tunnin' : 'tuntia';
                break;
            case 'd':
                return isFuture ? 'pÃ¤ivÃ¤n' : 'pÃ¤ivÃ¤';
            case 'dd':
                result = isFuture ? 'pÃ¤ivÃ¤n' : 'pÃ¤ivÃ¤Ã¤';
                break;
            case 'M':
                return isFuture ? 'kuukauden' : 'kuukausi';
            case 'MM':
                result = isFuture ? 'kuukauden' : 'kuukautta';
                break;
            case 'y':
                return isFuture ? 'vuoden' : 'vuosi';
            case 'yy':
                result = isFuture ? 'vuoden' : 'vuotta';
                break;
        }
        result = verbalNumber(number, isFuture) + ' ' + result;
        return result;
    }
    function verbalNumber(number, isFuture) {
        return number < 10
            ? isFuture
                ? numbersFuture[number]
                : numbersPast[number]
            : number;
    }

    var fi = moment.defineLocale('fi', {
        months: 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesÃ¤kuu_heinÃ¤kuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split(
            '_'
        ),
        monthsShort:
            'tammi_helmi_maalis_huhti_touko_kesÃ¤_heinÃ¤_elo_syys_loka_marras_joulu'.split(
                '_'
            ),
        weekdays:
            'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split(
                '_'
            ),
        weekdaysShort: 'su_ma_ti_ke_to_pe_la'.split('_'),
        weekdaysMin: 'su_ma_ti_ke_to_pe_la'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM[ta] YYYY',
            LLL: 'Do MMMM[ta] YYYY, [klo] HH.mm',
            LLLL: 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
            l: 'D.M.YYYY',
            ll: 'Do MMM YYYY',
            lll: 'Do MMM YYYY, [klo] HH.mm',
            llll: 'ddd, Do MMM YYYY, [klo] HH.mm',
        },
        calendar: {
            sameDay: '[tÃ¤nÃ¤Ã¤n] [klo] LT',
            nextDay: '[huomenna] [klo] LT',
            nextWeek: 'dddd [klo] LT',
            lastDay: '[eilen] [klo] LT',
            lastWeek: '[viime] dddd[na] [klo] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s pÃ¤Ã¤stÃ¤',
            past: '%s sitten',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fil.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/fil.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Filipino [fil]
//! author : Dan Hagman : https://github.com/hagmandan
//! author : Matthew Co : https://github.com/matthewdeeco

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var fil = moment.defineLocale('fil', {
        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
            '_'
        ),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split(
            '_'
        ),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY HH:mm',
            LLLL: 'dddd, MMMM DD, YYYY HH:mm',
        },
        calendar: {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            ss: '%d segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon',
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fil;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fo.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Faroese [fo]
//! author : Ragnar Johannesen : https://github.com/ragnar123
//! author : Kristian Sakarisson : https://github.com/sakarisson

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var fo = moment.defineLocale('fo', {
        months: 'januar_februar_mars_aprÃ­l_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays:
            'sunnudagur_mÃ¡nadagur_tÃ½sdagur_mikudagur_hÃ³sdagur_frÃ­ggjadagur_leygardagur'.split(
                '_'
            ),
        weekdaysShort: 'sun_mÃ¡n_tÃ½s_mik_hÃ³s_frÃ­_ley'.split('_'),
        weekdaysMin: 'su_mÃ¡_tÃ½_mi_hÃ³_fr_le'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D. MMMM, YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Ã dag kl.] LT',
            nextDay: '[Ã morgin kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[Ã gjÃ¡r kl.] LT',
            lastWeek: '[sÃ­Ã°stu] dddd [kl] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'um %s',
            past: '%s sÃ­Ã°ani',
            s: 'fÃ¡ sekund',
            ss: '%d sekundir',
            m: 'ein minuttur',
            mm: '%d minuttir',
            h: 'ein tÃ­mi',
            hh: '%d tÃ­mar',
            d: 'ein dagur',
            dd: '%d dagar',
            M: 'ein mÃ¡naÃ°ur',
            MM: '%d mÃ¡naÃ°ir',
            y: 'eitt Ã¡r',
            yy: '%d Ã¡r',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fr-ca.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/fr-ca.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Canada) [fr-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var frCa = moment.defineLocale('fr-ca', {
        months: 'janvier_fÃ©vrier_mars_avril_mai_juin_juillet_aoÃ»t_septembre_octobre_novembre_dÃ©cembre'.split(
            '_'
        ),
        monthsShort:
            'janv._fÃ©vr._mars_avr._mai_juin_juil._aoÃ»t_sept._oct._nov._dÃ©c.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Aujourdâhui Ã ] LT',
            nextDay: '[Demain Ã ] LT',
            nextWeek: 'dddd [Ã ] LT',
            lastDay: '[Hier Ã ] LT',
            lastWeek: 'dddd [dernier Ã ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal: function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
    });

    return frCa;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fr-ch.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/fr-ch.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French (Switzerland) [fr-ch]
//! author : Gaspard Bucher : https://github.com/gaspard

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var frCh = moment.defineLocale('fr-ch', {
        months: 'janvier_fÃ©vrier_mars_avril_mai_juin_juillet_aoÃ»t_septembre_octobre_novembre_dÃ©cembre'.split(
            '_'
        ),
        monthsShort:
            'janv._fÃ©vr._mars_avr._mai_juin_juil._aoÃ»t_sept._oct._nov._dÃ©c.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Aujourdâhui Ã ] LT',
            nextDay: '[Demain Ã ] LT',
            nextWeek: 'dddd [Ã ] LT',
            lastDay: '[Hier Ã ] LT',
            lastWeek: 'dddd [dernier Ã ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal: function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return frCh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fr.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : French [fr]
//! author : John Fischer : https://github.com/jfroffice

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsStrictRegex =
            /^(janvier|fÃ©vrier|mars|avril|mai|juin|juillet|aoÃ»t|septembre|octobre|novembre|dÃ©cembre)/i,
        monthsShortStrictRegex =
            /(janv\.?|fÃ©vr\.?|mars|avr\.?|mai|juin|juil\.?|aoÃ»t|sept\.?|oct\.?|nov\.?|dÃ©c\.?)/i,
        monthsRegex =
            /(janv\.?|fÃ©vr\.?|mars|avr\.?|mai|juin|juil\.?|aoÃ»t|sept\.?|oct\.?|nov\.?|dÃ©c\.?|janvier|fÃ©vrier|mars|avril|mai|juin|juillet|aoÃ»t|septembre|octobre|novembre|dÃ©cembre)/i,
        monthsParse = [
            /^janv/i,
            /^fÃ©vr/i,
            /^mars/i,
            /^avr/i,
            /^mai/i,
            /^juin/i,
            /^juil/i,
            /^aoÃ»t/i,
            /^sept/i,
            /^oct/i,
            /^nov/i,
            /^dÃ©c/i,
        ];

    var fr = moment.defineLocale('fr', {
        months: 'janvier_fÃ©vrier_mars_avril_mai_juin_juillet_aoÃ»t_septembre_octobre_novembre_dÃ©cembre'.split(
            '_'
        ),
        monthsShort:
            'janv._fÃ©vr._mars_avr._mai_juin_juil._aoÃ»t_sept._oct._nov._dÃ©c.'.split(
                '_'
            ),
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: monthsStrictRegex,
        monthsShortStrictRegex: monthsShortStrictRegex,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays: 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort: 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin: 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Aujourdâhui Ã ] LT',
            nextDay: '[Demain Ã ] LT',
            nextWeek: 'dddd [Ã ] LT',
            lastDay: '[Hier Ã ] LT',
            lastWeek: 'dddd [dernier Ã ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dans %s',
            past: 'il y a %s',
            s: 'quelques secondes',
            ss: '%d secondes',
            m: 'une minute',
            mm: '%d minutes',
            h: 'une heure',
            hh: '%d heures',
            d: 'un jour',
            dd: '%d jours',
            w: 'une semaine',
            ww: '%d semaines',
            M: 'un mois',
            MM: '%d mois',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
        ordinal: function (number, period) {
            switch (period) {
                // TODO: Return 'e' when day of month > 1. Move this case inside
                // block for masculine words below.
                // See https://github.com/moment/moment/issues/3375
                case 'D':
                    return number + (number === 1 ? 'er' : '');

                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/fy.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/fy.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Frisian [fy]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots =
            'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
        monthsShortWithoutDots =
            'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

    var fy = moment.defineLocale('fy', {
        months: 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },
        monthsParseExact: true,
        weekdays: 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split(
            '_'
        ),
        weekdaysShort: 'si._mo._ti._wo._to._fr._so.'.split('_'),
        weekdaysMin: 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[hjoed om] LT',
            nextDay: '[moarn om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[juster om] LT',
            lastWeek: '[Ã´frÃ»ne] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'oer %s',
            past: '%s lyn',
            s: 'in pear sekonden',
            ss: '%d sekonden',
            m: 'ien minÃºt',
            mm: '%d minuten',
            h: 'ien oere',
            hh: '%d oeren',
            d: 'ien dei',
            dd: '%d dagen',
            M: 'ien moanne',
            MM: '%d moannen',
            y: 'ien jier',
            yy: '%d jierren',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return fy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ga.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ga.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Irish or Irish Gaelic [ga]
//! author : AndrÃ© Silva : https://github.com/askpt

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'EanÃ¡ir',
            'Feabhra',
            'MÃ¡rta',
            'AibreÃ¡n',
            'Bealtaine',
            'Meitheamh',
            'IÃºil',
            'LÃºnasa',
            'MeÃ¡n FÃ³mhair',
            'Deireadh FÃ³mhair',
            'Samhain',
            'Nollaig',
        ],
        monthsShort = [
            'Ean',
            'Feabh',
            'MÃ¡rt',
            'Aib',
            'Beal',
            'Meith',
            'IÃºil',
            'LÃºn',
            'M.F.',
            'D.F.',
            'Samh',
            'Noll',
        ],
        weekdays = [
            'DÃ© Domhnaigh',
            'DÃ© Luain',
            'DÃ© MÃ¡irt',
            'DÃ© CÃ©adaoin',
            'DÃ©ardaoin',
            'DÃ© hAoine',
            'DÃ© Sathairn',
        ],
        weekdaysShort = ['Domh', 'Luan', 'MÃ¡irt', 'CÃ©ad', 'DÃ©ar', 'Aoine', 'Sath'],
        weekdaysMin = ['Do', 'Lu', 'MÃ¡', 'CÃ©', 'DÃ©', 'A', 'Sa'];

    var ga = moment.defineLocale('ga', {
        months: months,
        monthsShort: monthsShort,
        monthsParseExact: true,
        weekdays: weekdays,
        weekdaysShort: weekdaysShort,
        weekdaysMin: weekdaysMin,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Inniu ag] LT',
            nextDay: '[AmÃ¡rach ag] LT',
            nextWeek: 'dddd [ag] LT',
            lastDay: '[InnÃ© ag] LT',
            lastWeek: 'dddd [seo caite] [ag] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'i %s',
            past: '%s Ã³ shin',
            s: 'cÃºpla soicind',
            ss: '%d soicind',
            m: 'nÃ³imÃ©ad',
            mm: '%d nÃ³imÃ©ad',
            h: 'uair an chloig',
            hh: '%d uair an chloig',
            d: 'lÃ¡',
            dd: '%d lÃ¡',
            M: 'mÃ­',
            MM: '%d mÃ­onna',
            y: 'bliain',
            yy: '%d bliain',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ga;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gd.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/gd.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Scottish Gaelic [gd]
//! author : Jon Ashdown : https://github.com/jonashdown

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'Am Faoilleach',
            'An Gearran',
            'Am MÃ rt',
            'An Giblean',
            'An CÃ¨itean',
            'An t-Ãgmhios',
            'An t-Iuchar',
            'An LÃ¹nastal',
            'An t-Sultain',
            'An DÃ mhair',
            'An t-Samhain',
            'An DÃ¹bhlachd',
        ],
        monthsShort = [
            'Faoi',
            'Gear',
            'MÃ rt',
            'Gibl',
            'CÃ¨it',
            'Ãgmh',
            'Iuch',
            'LÃ¹n',
            'Sult',
            'DÃ mh',
            'Samh',
            'DÃ¹bh',
        ],
        weekdays = [
            'DidÃ²mhnaich',
            'Diluain',
            'DimÃ irt',
            'Diciadain',
            'Diardaoin',
            'Dihaoine',
            'Disathairne',
        ],
        weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'],
        weekdaysMin = ['DÃ²', 'Lu', 'MÃ ', 'Ci', 'Ar', 'Ha', 'Sa'];

    var gd = moment.defineLocale('gd', {
        months: months,
        monthsShort: monthsShort,
        monthsParseExact: true,
        weekdays: weekdays,
        weekdaysShort: weekdaysShort,
        weekdaysMin: weekdaysMin,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[An-diugh aig] LT',
            nextDay: '[A-mÃ ireach aig] LT',
            nextWeek: 'dddd [aig] LT',
            lastDay: '[An-dÃ¨ aig] LT',
            lastWeek: 'dddd [seo chaidh] [aig] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ann an %s',
            past: 'bho chionn %s',
            s: 'beagan diogan',
            ss: '%d diogan',
            m: 'mionaid',
            mm: '%d mionaidean',
            h: 'uair',
            hh: '%d uairean',
            d: 'latha',
            dd: '%d latha',
            M: 'mÃ¬os',
            MM: '%d mÃ¬osan',
            y: 'bliadhna',
            yy: '%d bliadhna',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
        ordinal: function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return gd;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/gl.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Galician [gl]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var gl = moment.defineLocale('gl', {
        months: 'xaneiro_febreiro_marzo_abril_maio_xuÃ±o_xullo_agosto_setembro_outubro_novembro_decembro'.split(
            '_'
        ),
        monthsShort:
            'xan._feb._mar._abr._mai._xuÃ±._xul._ago._set._out._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'domingo_luns_martes_mÃ©rcores_xoves_venres_sÃ¡bado'.split('_'),
        weekdaysShort: 'dom._lun._mar._mÃ©r._xov._ven._sÃ¡b.'.split('_'),
        weekdaysMin: 'do_lu_ma_mÃ©_xo_ve_sÃ¡'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY H:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY H:mm',
        },
        calendar: {
            sameDay: function () {
                return '[hoxe ' + (this.hours() !== 1 ? 'Ã¡s' : 'Ã¡') + '] LT';
            },
            nextDay: function () {
                return '[maÃ±Ã¡ ' + (this.hours() !== 1 ? 'Ã¡s' : 'Ã¡') + '] LT';
            },
            nextWeek: function () {
                return 'dddd [' + (this.hours() !== 1 ? 'Ã¡s' : 'a') + '] LT';
            },
            lastDay: function () {
                return '[onte ' + (this.hours() !== 1 ? 'Ã¡' : 'a') + '] LT';
            },
            lastWeek: function () {
                return (
                    '[o] dddd [pasado ' + (this.hours() !== 1 ? 'Ã¡s' : 'a') + '] LT'
                );
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: function (str) {
                if (str.indexOf('un') === 0) {
                    return 'n' + str;
                }
                return 'en ' + str;
            },
            past: 'hai %s',
            s: 'uns segundos',
            ss: '%d segundos',
            m: 'un minuto',
            mm: '%d minutos',
            h: 'unha hora',
            hh: '%d horas',
            d: 'un dÃ­a',
            dd: '%d dÃ­as',
            M: 'un mes',
            MM: '%d meses',
            y: 'un ano',
            yy: '%d anos',
        },
        dayOfMonthOrdinalParse: /\d{1,2}Âº/,
        ordinal: '%dÂº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return gl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gom-deva.js":
/*!************************************************!*\
  !*** ./node_modules/moment/locale/gom-deva.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Konkani Devanagari script [gom-deva]
//! author : The Discoverer : https://github.com/WikiDiscoverer

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['à¤¥à¥à¤¡à¤¯à¤¾ à¤¸à¥à¤à¤à¤¡à¤¾à¤à¤¨à¥', 'à¤¥à¥à¤¡à¥ à¤¸à¥à¤à¤à¤¡'],
            ss: [number + ' à¤¸à¥à¤à¤à¤¡à¤¾à¤à¤¨à¥', number + ' à¤¸à¥à¤à¤à¤¡'],
            m: ['à¤à¤à¤¾ à¤®à¤¿à¤£à¤à¤¾à¤¨', 'à¤à¤ à¤®à¤¿à¤¨à¥à¤'],
            mm: [number + ' à¤®à¤¿à¤£à¤à¤¾à¤à¤¨à¥', number + ' à¤®à¤¿à¤£à¤à¤¾à¤'],
            h: ['à¤à¤à¤¾ à¤µà¤°à¤¾à¤¨', 'à¤à¤ à¤µà¤°'],
            hh: [number + ' à¤µà¤°à¤¾à¤à¤¨à¥', number + ' à¤µà¤°à¤¾à¤'],
            d: ['à¤à¤à¤¾ à¤¦à¤¿à¤¸à¤¾à¤¨', 'à¤à¤ à¤¦à¥à¤¸'],
            dd: [number + ' à¤¦à¤¿à¤¸à¤¾à¤à¤¨à¥', number + ' à¤¦à¥à¤¸'],
            M: ['à¤à¤à¤¾ à¤®à¥à¤¹à¤¯à¤¨à¥à¤¯à¤¾à¤¨', 'à¤à¤ à¤®à¥à¤¹à¤¯à¤¨à¥'],
            MM: [number + ' à¤®à¥à¤¹à¤¯à¤¨à¥à¤¯à¤¾à¤¨à¥', number + ' à¤®à¥à¤¹à¤¯à¤¨à¥'],
            y: ['à¤à¤à¤¾ à¤µà¤°à¥à¤¸à¤¾à¤¨', 'à¤à¤ à¤µà¤°à¥à¤¸'],
            yy: [number + ' à¤µà¤°à¥à¤¸à¤¾à¤à¤¨à¥', number + ' à¤µà¤°à¥à¤¸à¤¾à¤'],
        };
        return isFuture ? format[key][0] : format[key][1];
    }

    var gomDeva = moment.defineLocale('gom-deva', {
        months: {
            standalone:
                'à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥_à¤«à¥à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥_à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¥à¤²_à¤®à¥_à¤à¥à¤¨_à¤à¥à¤²à¤¯_à¤à¤à¤¸à¥à¤_à¤¸à¤ªà¥à¤à¥à¤à¤¬à¤°_à¤à¤à¥à¤à¥à¤¬à¤°_à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°_à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°'.split(
                    '_'
                ),
            format: 'à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥à¤à¥à¤¯à¤¾_à¤«à¥à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥à¤à¥à¤¯à¤¾_à¤®à¤¾à¤°à¥à¤à¤¾à¤à¥à¤¯à¤¾_à¤à¤ªà¥à¤°à¥à¤²à¤¾à¤à¥à¤¯à¤¾_à¤®à¥à¤¯à¤¾à¤à¥à¤¯à¤¾_à¤à¥à¤¨à¤¾à¤à¥à¤¯à¤¾_à¤à¥à¤²à¤¯à¤¾à¤à¥à¤¯à¤¾_à¤à¤à¤¸à¥à¤à¤¾à¤à¥à¤¯à¤¾_à¤¸à¤ªà¥à¤à¥à¤à¤¬à¤°à¤¾à¤à¥à¤¯à¤¾_à¤à¤à¥à¤à¥à¤¬à¤°à¤¾à¤à¥à¤¯à¤¾_à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°à¤¾à¤à¥à¤¯à¤¾_à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°à¤¾à¤à¥à¤¯à¤¾'.split(
                '_'
            ),
            isFormat: /MMMM(\s)+D[oD]?/,
        },
        monthsShort:
            'à¤à¤¾à¤¨à¥._à¤«à¥à¤¬à¥à¤°à¥._à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¥._à¤®à¥_à¤à¥à¤¨_à¤à¥à¤²._à¤à¤._à¤¸à¤ªà¥à¤à¥à¤._à¤à¤à¥à¤à¥._à¤¨à¥à¤µà¥à¤¹à¥à¤._à¤¡à¤¿à¤¸à¥à¤.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'à¤à¤¯à¤¤à¤¾à¤°_à¤¸à¥à¤®à¤¾à¤°_à¤®à¤à¤à¤³à¤¾à¤°_à¤¬à¥à¤§à¤µà¤¾à¤°_à¤¬à¤¿à¤°à¥à¤¸à¥à¤¤à¤¾à¤°_à¤¸à¥à¤à¥à¤°à¤¾à¤°_à¤¶à¥à¤¨à¤µà¤¾à¤°'.split('_'),
        weekdaysShort: 'à¤à¤¯à¤¤._à¤¸à¥à¤®._à¤®à¤à¤à¤³._à¤¬à¥à¤§._à¤¬à¥à¤°à¥à¤¸à¥à¤¤._à¤¸à¥à¤à¥à¤°._à¤¶à¥à¤¨.'.split('_'),
        weekdaysMin: 'à¤_à¤¸à¥_à¤®à¤_à¤¬à¥_à¤¬à¥à¤°à¥_à¤¸à¥_à¤¶à¥'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'A h:mm [à¤µà¤¾à¤à¤¤à¤¾à¤]',
            LTS: 'A h:mm:ss [à¤µà¤¾à¤à¤¤à¤¾à¤]',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY A h:mm [à¤µà¤¾à¤à¤¤à¤¾à¤]',
            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [à¤µà¤¾à¤à¤¤à¤¾à¤]',
            llll: 'ddd, D MMM YYYY, A h:mm [à¤µà¤¾à¤à¤¤à¤¾à¤]',
        },
        calendar: {
            sameDay: '[à¤à¤¯à¤] LT',
            nextDay: '[à¤«à¤¾à¤²à¥à¤¯à¤¾à¤] LT',
            nextWeek: '[à¤«à¥à¤¡à¤²à¥] dddd[,] LT',
            lastDay: '[à¤à¤¾à¤²] LT',
            lastWeek: '[à¤«à¤¾à¤à¤²à¥] dddd[,] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s',
            past: '%s à¤à¤¦à¥à¤',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}(à¤µà¥à¤°)/,
        ordinal: function (number, period) {
            switch (period) {
                // the ordinal 'à¤µà¥à¤°' only applies to day of the month
                case 'D':
                    return number + 'à¤µà¥à¤°';
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                case 'w':
                case 'W':
                    return number;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week
            doy: 3, // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)
        },
        meridiemParse: /à¤°à¤¾à¤¤à¥|à¤¸à¤à¤¾à¤³à¥à¤|à¤¦à¤¨à¤ªà¤¾à¤°à¤¾à¤|à¤¸à¤¾à¤à¤à¥/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'à¤°à¤¾à¤¤à¥') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'à¤¸à¤à¤¾à¤³à¥à¤') {
                return hour;
            } else if (meridiem === 'à¤¦à¤¨à¤ªà¤¾à¤°à¤¾à¤') {
                return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'à¤¸à¤¾à¤à¤à¥') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'à¤°à¤¾à¤¤à¥';
            } else if (hour < 12) {
                return 'à¤¸à¤à¤¾à¤³à¥à¤';
            } else if (hour < 16) {
                return 'à¤¦à¤¨à¤ªà¤¾à¤°à¤¾à¤';
            } else if (hour < 20) {
                return 'à¤¸à¤¾à¤à¤à¥';
            } else {
                return 'à¤°à¤¾à¤¤à¥';
            }
        },
    });

    return gomDeva;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gom-latn.js":
/*!************************************************!*\
  !*** ./node_modules/moment/locale/gom-latn.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Konkani Latin script [gom-latn]
//! author : The Discoverer : https://github.com/WikiDiscoverer

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['thoddea sekondamni', 'thodde sekond'],
            ss: [number + ' sekondamni', number + ' sekond'],
            m: ['eka mintan', 'ek minut'],
            mm: [number + ' mintamni', number + ' mintam'],
            h: ['eka voran', 'ek vor'],
            hh: [number + ' voramni', number + ' voram'],
            d: ['eka disan', 'ek dis'],
            dd: [number + ' disamni', number + ' dis'],
            M: ['eka mhoinean', 'ek mhoino'],
            MM: [number + ' mhoineamni', number + ' mhoine'],
            y: ['eka vorsan', 'ek voros'],
            yy: [number + ' vorsamni', number + ' vorsam'],
        };
        return isFuture ? format[key][0] : format[key][1];
    }

    var gomLatn = moment.defineLocale('gom-latn', {
        months: {
            standalone:
                'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split(
                    '_'
                ),
            format: 'Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea'.split(
                '_'
            ),
            isFormat: /MMMM(\s)+D[oD]?/,
        },
        monthsShort:
            'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
        monthsParseExact: true,
        weekdays: "Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split('_'),
        weekdaysShort: 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
        weekdaysMin: 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'A h:mm [vazta]',
            LTS: 'A h:mm:ss [vazta]',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY A h:mm [vazta]',
            LLLL: 'dddd, MMMM Do, YYYY, A h:mm [vazta]',
            llll: 'ddd, D MMM YYYY, A h:mm [vazta]',
        },
        calendar: {
            sameDay: '[Aiz] LT',
            nextDay: '[Faleam] LT',
            nextWeek: '[Fuddlo] dddd[,] LT',
            lastDay: '[Kal] LT',
            lastWeek: '[Fattlo] dddd[,] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s',
            past: '%s adim',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er)/,
        ordinal: function (number, period) {
            switch (period) {
                // the ordinal 'er' only applies to day of the month
                case 'D':
                    return number + 'er';
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                case 'w':
                case 'W':
                    return number;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week
            doy: 3, // The week that contains Jan 4th is the first week of the year (7 + 0 - 4)
        },
        meridiemParse: /rati|sokallim|donparam|sanje/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'rati') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'sokallim') {
                return hour;
            } else if (meridiem === 'donparam') {
                return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'sanje') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'rati';
            } else if (hour < 12) {
                return 'sokallim';
            } else if (hour < 16) {
                return 'donparam';
            } else if (hour < 20) {
                return 'sanje';
            } else {
                return 'rati';
            }
        },
    });

    return gomLatn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/gu.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/gu.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Gujarati [gu]
//! author : Kaushik Thanki : https://github.com/Kaushik1987

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'à«§',
            2: 'à«¨',
            3: 'à«©',
            4: 'à«ª',
            5: 'à««',
            6: 'à«¬',
            7: 'à«­',
            8: 'à«®',
            9: 'à«¯',
            0: 'à«¦',
        },
        numberMap = {
            'à«§': '1',
            'à«¨': '2',
            'à«©': '3',
            'à«ª': '4',
            'à««': '5',
            'à«¬': '6',
            'à«­': '7',
            'à«®': '8',
            'à«¯': '9',
            'à«¦': '0',
        };

    var gu = moment.defineLocale('gu', {
        months: 'àªàª¾àª¨à«àª¯à«àªàª°à«_àª«à«àª¬à«àª°à«àªàª°à«_àª®àª¾àª°à«àª_àªàªªà«àª°àª¿àª²_àª®à«_àªà«àª¨_àªà«àª²àª¾àª_àªàªàª¸à«àª_àª¸àªªà«àªà«àª®à«àª¬àª°_àªàªà«àªà«àª¬àª°_àª¨àªµà«àª®à«àª¬àª°_àª¡àª¿àª¸à«àª®à«àª¬àª°'.split(
            '_'
        ),
        monthsShort:
            'àªàª¾àª¨à«àª¯à«._àª«à«àª¬à«àª°à«._àª®àª¾àª°à«àª_àªàªªà«àª°àª¿._àª®à«_àªà«àª¨_àªà«àª²àª¾._àªàª._àª¸àªªà«àªà«._àªàªà«àªà«._àª¨àªµà«._àª¡àª¿àª¸à«.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'àª°àªµàª¿àªµàª¾àª°_àª¸à«àª®àªµàª¾àª°_àª®àªàªàª³àªµàª¾àª°_àª¬à«àª§à«àªµàª¾àª°_àªà«àª°à«àªµàª¾àª°_àª¶à«àªà«àª°àªµàª¾àª°_àª¶àª¨àª¿àªµàª¾àª°'.split(
            '_'
        ),
        weekdaysShort: 'àª°àªµàª¿_àª¸à«àª®_àª®àªàªàª³_àª¬à«àª§à«_àªà«àª°à«_àª¶à«àªà«àª°_àª¶àª¨àª¿'.split('_'),
        weekdaysMin: 'àª°_àª¸à«_àª®àª_àª¬à«_àªà«_àª¶à«_àª¶'.split('_'),
        longDateFormat: {
            LT: 'A h:mm àªµàª¾àªà«àª¯à«',
            LTS: 'A h:mm:ss àªµàª¾àªà«àª¯à«',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm àªµàª¾àªà«àª¯à«',
            LLLL: 'dddd, D MMMM YYYY, A h:mm àªµàª¾àªà«àª¯à«',
        },
        calendar: {
            sameDay: '[àªàª] LT',
            nextDay: '[àªàª¾àª²à«] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[àªàªàªàª¾àª²à«] LT',
            lastWeek: '[àªªàª¾àªàª²àª¾] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s àª®àª¾',
            past: '%s àªªàª¹à«àª²àª¾',
            s: 'àªàª®à«àª àªªàª³à«',
            ss: '%d àª¸à«àªàªàª¡',
            m: 'àªàª àª®àª¿àª¨àª¿àª',
            mm: '%d àª®àª¿àª¨àª¿àª',
            h: 'àªàª àªàª²àª¾àª',
            hh: '%d àªàª²àª¾àª',
            d: 'àªàª àª¦àª¿àªµàª¸',
            dd: '%d àª¦àª¿àªµàª¸',
            M: 'àªàª àª®àª¹àª¿àª¨à«',
            MM: '%d àª®àª¹àª¿àª¨à«',
            y: 'àªàª àªµàª°à«àª·',
            yy: '%d àªµàª°à«àª·',
        },
        preparse: function (string) {
            return string.replace(/[à«§à«¨à«©à«ªà««à«¬à«­à«®à«¯à«¦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
        meridiemParse: /àª°àª¾àª¤|àª¬àªªà«àª°|àª¸àªµàª¾àª°|àª¸àª¾àªàª/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'àª°àª¾àª¤') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'àª¸àªµàª¾àª°') {
                return hour;
            } else if (meridiem === 'àª¬àªªà«àª°') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'àª¸àª¾àªàª') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'àª°àª¾àª¤';
            } else if (hour < 10) {
                return 'àª¸àªµàª¾àª°';
            } else if (hour < 17) {
                return 'àª¬àªªà«àª°';
            } else if (hour < 20) {
                return 'àª¸àª¾àªàª';
            } else {
                return 'àª°àª¾àª¤';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return gu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/he.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/he.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hebrew [he]
//! author : Tomer Cohen : https://github.com/tomer
//! author : Moshe Simantov : https://github.com/DevelopmentIL
//! author : Tal Ater : https://github.com/TalAter

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var he = moment.defineLocale('he', {
        months: '×× ×××¨_×¤××¨×××¨_××¨×¥_××¤×¨××_×××_××× ×_××××_×××××¡×_×¡×¤××××¨_×××§××××¨_× ×××××¨_××¦×××¨'.split(
            '_'
        ),
        monthsShort:
            '×× ××³_×¤××¨×³_××¨×¥_××¤×¨×³_×××_××× ×_××××_××××³_×¡×¤××³_×××§×³_× ×××³_××¦××³'.split('_'),
        weekdays: '×¨××©××_×©× ×_×©×××©×_×¨×××¢×_××××©×_×©××©×_×©××ª'.split('_'),
        weekdaysShort: '××³_××³_××³_××³_××³_××³_×©×³'.split('_'),
        weekdaysMin: '×_×_×_×_×_×_×©'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [×]MMMM YYYY',
            LLL: 'D [×]MMMM YYYY HH:mm',
            LLLL: 'dddd, D [×]MMMM YYYY HH:mm',
            l: 'D/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[×××× ×Ö¾]LT',
            nextDay: '[×××¨ ×Ö¾]LT',
            nextWeek: 'dddd [××©×¢×] LT',
            lastDay: '[××ª××× ×Ö¾]LT',
            lastWeek: '[××××] dddd [××××¨×× ××©×¢×] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '××¢×× %s',
            past: '××¤× × %s',
            s: '××¡×¤×¨ ×©× ×××ª',
            ss: '%d ×©× ×××ª',
            m: '××§×',
            mm: '%d ××§××ª',
            h: '×©×¢×',
            hh: function (number) {
                if (number === 2) {
                    return '×©×¢×ª×××';
                }
                return number + ' ×©×¢××ª';
            },
            d: '×××',
            dd: function (number) {
                if (number === 2) {
                    return '××××××';
                }
                return number + ' ××××';
            },
            M: '××××©',
            MM: function (number) {
                if (number === 2) {
                    return '××××©×××';
                }
                return number + ' ××××©××';
            },
            y: '×©× ×',
            yy: function (number) {
                if (number === 2) {
                    return '×©× ×ª×××';
                } else if (number % 10 === 0 && number !== 10) {
                    return number + ' ×©× ×';
                }
                return number + ' ×©× ××';
            },
        },
        meridiemParse:
            /×××"×¦|××¤× ×"×¦|×××¨× ××¦××¨×××|××¤× × ××¦××¨×××|××¤× ××ª ×××§×¨|××××§×¨|××¢×¨×/i,
        isPM: function (input) {
            return /^(×××"×¦|×××¨× ××¦××¨×××|××¢×¨×)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 5) {
                return '××¤× ××ª ×××§×¨';
            } else if (hour < 10) {
                return '××××§×¨';
            } else if (hour < 12) {
                return isLower ? '××¤× ×"×¦' : '××¤× × ××¦××¨×××';
            } else if (hour < 18) {
                return isLower ? '×××"×¦' : '×××¨× ××¦××¨×××';
            } else {
                return '××¢×¨×';
            }
        },
    });

    return he;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/hi.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hindi [hi]
//! author : Mayank Singhal : https://github.com/mayanksinghal

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'à¥§',
            2: 'à¥¨',
            3: 'à¥©',
            4: 'à¥ª',
            5: 'à¥«',
            6: 'à¥¬',
            7: 'à¥­',
            8: 'à¥®',
            9: 'à¥¯',
            0: 'à¥¦',
        },
        numberMap = {
            'à¥§': '1',
            'à¥¨': '2',
            'à¥©': '3',
            'à¥ª': '4',
            'à¥«': '5',
            'à¥¬': '6',
            'à¥­': '7',
            'à¥®': '8',
            'à¥¯': '9',
            'à¥¦': '0',
        },
        monthsParse = [
            /^à¤à¤¨/i,
            /^à¤«à¤¼à¤°|à¤«à¤°/i,
            /^à¤®à¤¾à¤°à¥à¤/i,
            /^à¤à¤ªà¥à¤°à¥/i,
            /^à¤®à¤/i,
            /^à¤à¥à¤¨/i,
            /^à¤à¥à¤²/i,
            /^à¤à¤/i,
            /^à¤¸à¤¿à¤¤à¤|à¤¸à¤¿à¤¤/i,
            /^à¤à¤à¥à¤à¥/i,
            /^à¤¨à¤µ|à¤¨à¤µà¤/i,
            /^à¤¦à¤¿à¤¸à¤|à¤¦à¤¿à¤¸/i,
        ],
        shortMonthsParse = [
            /^à¤à¤¨/i,
            /^à¤«à¤¼à¤°/i,
            /^à¤®à¤¾à¤°à¥à¤/i,
            /^à¤à¤ªà¥à¤°à¥/i,
            /^à¤®à¤/i,
            /^à¤à¥à¤¨/i,
            /^à¤à¥à¤²/i,
            /^à¤à¤/i,
            /^à¤¸à¤¿à¤¤/i,
            /^à¤à¤à¥à¤à¥/i,
            /^à¤¨à¤µ/i,
            /^à¤¦à¤¿à¤¸/i,
        ];

    var hi = moment.defineLocale('hi', {
        months: {
            format: 'à¤à¤¨à¤µà¤°à¥_à¤«à¤¼à¤°à¤µà¤°à¥_à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¥à¤²_à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²à¤¾à¤_à¤à¤à¤¸à¥à¤¤_à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°_à¤à¤à¥à¤à¥à¤¬à¤°_à¤¨à¤µà¤®à¥à¤¬à¤°_à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°'.split(
                '_'
            ),
            standalone:
                'à¤à¤¨à¤µà¤°à¥_à¤«à¤°à¤µà¤°à¥_à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¥à¤²_à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²à¤¾à¤_à¤à¤à¤¸à¥à¤¤_à¤¸à¤¿à¤¤à¤à¤¬à¤°_à¤à¤à¥à¤à¥à¤¬à¤°_à¤¨à¤µà¤à¤¬à¤°_à¤¦à¤¿à¤¸à¤à¤¬à¤°'.split(
                    '_'
                ),
        },
        monthsShort:
            'à¤à¤¨._à¤«à¤¼à¤°._à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¥._à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²._à¤à¤._à¤¸à¤¿à¤¤._à¤à¤à¥à¤à¥._à¤¨à¤µ._à¤¦à¤¿à¤¸.'.split('_'),
        weekdays: 'à¤°à¤µà¤¿à¤µà¤¾à¤°_à¤¸à¥à¤®à¤µà¤¾à¤°_à¤®à¤à¤à¤²à¤µà¤¾à¤°_à¤¬à¥à¤§à¤µà¤¾à¤°_à¤à¥à¤°à¥à¤µà¤¾à¤°_à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°_à¤¶à¤¨à¤¿à¤µà¤¾à¤°'.split('_'),
        weekdaysShort: 'à¤°à¤µà¤¿_à¤¸à¥à¤®_à¤®à¤à¤à¤²_à¤¬à¥à¤§_à¤à¥à¤°à¥_à¤¶à¥à¤à¥à¤°_à¤¶à¤¨à¤¿'.split('_'),
        weekdaysMin: 'à¤°_à¤¸à¥_à¤®à¤_à¤¬à¥_à¤à¥_à¤¶à¥_à¤¶'.split('_'),
        longDateFormat: {
            LT: 'A h:mm à¤¬à¤à¥',
            LTS: 'A h:mm:ss à¤¬à¤à¥',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm à¤¬à¤à¥',
            LLLL: 'dddd, D MMMM YYYY, A h:mm à¤¬à¤à¥',
        },

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: shortMonthsParse,

        monthsRegex:
            /^(à¤à¤¨à¤µà¤°à¥|à¤à¤¨\.?|à¤«à¤¼à¤°à¤µà¤°à¥|à¤«à¤°à¤µà¤°à¥|à¤«à¤¼à¤°\.?|à¤®à¤¾à¤°à¥à¤?|à¤à¤ªà¥à¤°à¥à¤²|à¤à¤ªà¥à¤°à¥\.?|à¤®à¤?|à¤à¥à¤¨?|à¤à¥à¤²à¤¾à¤|à¤à¥à¤²\.?|à¤à¤à¤¸à¥à¤¤|à¤à¤\.?|à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°|à¤¸à¤¿à¤¤à¤à¤¬à¤°|à¤¸à¤¿à¤¤\.?|à¤à¤à¥à¤à¥à¤¬à¤°|à¤à¤à¥à¤à¥\.?|à¤¨à¤µà¤®à¥à¤¬à¤°|à¤¨à¤µà¤à¤¬à¤°|à¤¨à¤µ\.?|à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°|à¤¦à¤¿à¤¸à¤à¤¬à¤°|à¤¦à¤¿à¤¸\.?)/i,

        monthsShortRegex:
            /^(à¤à¤¨à¤µà¤°à¥|à¤à¤¨\.?|à¤«à¤¼à¤°à¤µà¤°à¥|à¤«à¤°à¤µà¤°à¥|à¤«à¤¼à¤°\.?|à¤®à¤¾à¤°à¥à¤?|à¤à¤ªà¥à¤°à¥à¤²|à¤à¤ªà¥à¤°à¥\.?|à¤®à¤?|à¤à¥à¤¨?|à¤à¥à¤²à¤¾à¤|à¤à¥à¤²\.?|à¤à¤à¤¸à¥à¤¤|à¤à¤\.?|à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°|à¤¸à¤¿à¤¤à¤à¤¬à¤°|à¤¸à¤¿à¤¤\.?|à¤à¤à¥à¤à¥à¤¬à¤°|à¤à¤à¥à¤à¥\.?|à¤¨à¤µà¤®à¥à¤¬à¤°|à¤¨à¤µà¤à¤¬à¤°|à¤¨à¤µ\.?|à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°|à¤¦à¤¿à¤¸à¤à¤¬à¤°|à¤¦à¤¿à¤¸\.?)/i,

        monthsStrictRegex:
            /^(à¤à¤¨à¤µà¤°à¥?|à¤«à¤¼à¤°à¤µà¤°à¥|à¤«à¤°à¤µà¤°à¥?|à¤®à¤¾à¤°à¥à¤?|à¤à¤ªà¥à¤°à¥à¤²?|à¤®à¤?|à¤à¥à¤¨?|à¤à¥à¤²à¤¾à¤?|à¤à¤à¤¸à¥à¤¤?|à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°|à¤¸à¤¿à¤¤à¤à¤¬à¤°|à¤¸à¤¿à¤¤?\.?|à¤à¤à¥à¤à¥à¤¬à¤°|à¤à¤à¥à¤à¥\.?|à¤¨à¤µà¤®à¥à¤¬à¤°|à¤¨à¤µà¤à¤¬à¤°?|à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°|à¤¦à¤¿à¤¸à¤à¤¬à¤°?)/i,

        monthsShortStrictRegex:
            /^(à¤à¤¨\.?|à¤«à¤¼à¤°\.?|à¤®à¤¾à¤°à¥à¤?|à¤à¤ªà¥à¤°à¥\.?|à¤®à¤?|à¤à¥à¤¨?|à¤à¥à¤²\.?|à¤à¤\.?|à¤¸à¤¿à¤¤\.?|à¤à¤à¥à¤à¥\.?|à¤¨à¤µ\.?|à¤¦à¤¿à¤¸\.?)/i,

        calendar: {
            sameDay: '[à¤à¤] LT',
            nextDay: '[à¤à¤²] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[à¤à¤²] LT',
            lastWeek: '[à¤ªà¤¿à¤à¤²à¥] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s à¤®à¥à¤',
            past: '%s à¤ªà¤¹à¤²à¥',
            s: 'à¤à¥à¤ à¤¹à¥ à¤à¥à¤·à¤£',
            ss: '%d à¤¸à¥à¤à¤à¤¡',
            m: 'à¤à¤ à¤®à¤¿à¤¨à¤',
            mm: '%d à¤®à¤¿à¤¨à¤',
            h: 'à¤à¤ à¤à¤à¤à¤¾',
            hh: '%d à¤à¤à¤à¥',
            d: 'à¤à¤ à¤¦à¤¿à¤¨',
            dd: '%d à¤¦à¤¿à¤¨',
            M: 'à¤à¤ à¤®à¤¹à¥à¤¨à¥',
            MM: '%d à¤®à¤¹à¥à¤¨à¥',
            y: 'à¤à¤ à¤µà¤°à¥à¤·',
            yy: '%d à¤µà¤°à¥à¤·',
        },
        preparse: function (string) {
            return string.replace(/[à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯à¥¦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiemParse: /à¤°à¤¾à¤¤|à¤¸à¥à¤¬à¤¹|à¤¦à¥à¤ªà¤¹à¤°|à¤¶à¤¾à¤®/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'à¤°à¤¾à¤¤') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'à¤¸à¥à¤¬à¤¹') {
                return hour;
            } else if (meridiem === 'à¤¦à¥à¤ªà¤¹à¤°') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'à¤¶à¤¾à¤®') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'à¤°à¤¾à¤¤';
            } else if (hour < 10) {
                return 'à¤¸à¥à¤¬à¤¹';
            } else if (hour < 17) {
                return 'à¤¦à¥à¤ªà¤¹à¤°';
            } else if (hour < 20) {
                return 'à¤¶à¤¾à¤®';
            } else {
                return 'à¤°à¤¾à¤¤';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return hi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/hr.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Croatian [hr]
//! author : Bojan MarkoviÄ : https://github.com/bmarkovic

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var hr = moment.defineLocale('hr', {
        months: {
            format: 'sijeÄnja_veljaÄe_oÅ¾ujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split(
                '_'
            ),
            standalone:
                'sijeÄanj_veljaÄa_oÅ¾ujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split(
                    '_'
                ),
        },
        monthsShort:
            'sij._velj._oÅ¾u._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_Äetvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sri._Äet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_Äe_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'Do MMMM YYYY',
            LLL: 'Do MMMM YYYY H:mm',
            LLLL: 'dddd, Do MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juÄer u] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[proÅ¡lu] [nedjelju] [u] LT';
                    case 3:
                        return '[proÅ¡lu] [srijedu] [u] LT';
                    case 6:
                        return '[proÅ¡le] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[proÅ¡li] dddd [u] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'par sekundi',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: 'dan',
            dd: translate,
            M: 'mjesec',
            MM: translate,
            y: 'godinu',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return hr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hu.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/hu.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Hungarian [hu]
//! author : Adam Brunner : https://github.com/adambrunner
//! author : Peter Viszt  : https://github.com/passatgt

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var weekEndings =
        'vasÃ¡rnap hÃ©tfÅn kedden szerdÃ¡n csÃ¼tÃ¶rtÃ¶kÃ¶n pÃ©nteken szombaton'.split(' ');
    function translate(number, withoutSuffix, key, isFuture) {
        var num = number;
        switch (key) {
            case 's':
                return isFuture || withoutSuffix
                    ? 'nÃ©hÃ¡ny mÃ¡sodperc'
                    : 'nÃ©hÃ¡ny mÃ¡sodperce';
            case 'ss':
                return num + (isFuture || withoutSuffix)
                    ? ' mÃ¡sodperc'
                    : ' mÃ¡sodperce';
            case 'm':
                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'mm':
                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'h':
                return 'egy' + (isFuture || withoutSuffix ? ' Ã³ra' : ' Ã³rÃ¡ja');
            case 'hh':
                return num + (isFuture || withoutSuffix ? ' Ã³ra' : ' Ã³rÃ¡ja');
            case 'd':
                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'dd':
                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'M':
                return 'egy' + (isFuture || withoutSuffix ? ' hÃ³nap' : ' hÃ³napja');
            case 'MM':
                return num + (isFuture || withoutSuffix ? ' hÃ³nap' : ' hÃ³napja');
            case 'y':
                return 'egy' + (isFuture || withoutSuffix ? ' Ã©v' : ' Ã©ve');
            case 'yy':
                return num + (isFuture || withoutSuffix ? ' Ã©v' : ' Ã©ve');
        }
        return '';
    }
    function week(isFuture) {
        return (
            (isFuture ? '' : '[mÃºlt] ') +
            '[' +
            weekEndings[this.day()] +
            '] LT[-kor]'
        );
    }

    var hu = moment.defineLocale('hu', {
        months: 'januÃ¡r_februÃ¡r_mÃ¡rcius_Ã¡prilis_mÃ¡jus_jÃºnius_jÃºlius_augusztus_szeptember_oktÃ³ber_november_december'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mÃ¡rc._Ã¡pr._mÃ¡j._jÃºn._jÃºl._aug._szept._okt._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'vasÃ¡rnap_hÃ©tfÅ_kedd_szerda_csÃ¼tÃ¶rtÃ¶k_pÃ©ntek_szombat'.split('_'),
        weekdaysShort: 'vas_hÃ©t_kedd_sze_csÃ¼t_pÃ©n_szo'.split('_'),
        weekdaysMin: 'v_h_k_sze_cs_p_szo'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'YYYY.MM.DD.',
            LL: 'YYYY. MMMM D.',
            LLL: 'YYYY. MMMM D. H:mm',
            LLLL: 'YYYY. MMMM D., dddd H:mm',
        },
        meridiemParse: /de|du/i,
        isPM: function (input) {
            return input.charAt(1).toLowerCase() === 'u';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
            } else {
                return isLower === true ? 'du' : 'DU';
            }
        },
        calendar: {
            sameDay: '[ma] LT[-kor]',
            nextDay: '[holnap] LT[-kor]',
            nextWeek: function () {
                return week.call(this, true);
            },
            lastDay: '[tegnap] LT[-kor]',
            lastWeek: function () {
                return week.call(this, false);
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s mÃºlva',
            past: '%s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return hu;

})));


/***/ }),

/***/ "./node_modules/moment/locale/hy-am.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/hy-am.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Armenian [hy-am]
//! author : Armendarabyan : https://github.com/armendarabyan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var hyAm = moment.defineLocale('hy-am', {
        months: {
            format: 'Õ°Õ¸ÖÕ¶Õ¾Õ¡ÖÕ«_ÖÕ¥Õ¿ÖÕ¾Õ¡ÖÕ«_Õ´Õ¡ÖÕ¿Õ«_Õ¡ÕºÖÕ«Õ¬Õ«_Õ´Õ¡ÕµÕ«Õ½Õ«_Õ°Õ¸ÖÕ¶Õ«Õ½Õ«_Õ°Õ¸ÖÕ¬Õ«Õ½Õ«_ÖÕ£Õ¸Õ½Õ¿Õ¸Õ½Õ«_Õ½Õ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥ÖÕ«_Õ°Õ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥ÖÕ«_Õ¶Õ¸ÕµÕ¥Õ´Õ¢Õ¥ÖÕ«_Õ¤Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥ÖÕ«'.split(
                '_'
            ),
            standalone:
                'Õ°Õ¸ÖÕ¶Õ¾Õ¡Ö_ÖÕ¥Õ¿ÖÕ¾Õ¡Ö_Õ´Õ¡ÖÕ¿_Õ¡ÕºÖÕ«Õ¬_Õ´Õ¡ÕµÕ«Õ½_Õ°Õ¸ÖÕ¶Õ«Õ½_Õ°Õ¸ÖÕ¬Õ«Õ½_ÖÕ£Õ¸Õ½Õ¿Õ¸Õ½_Õ½Õ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥Ö_Õ°Õ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö_Õ¶Õ¸ÕµÕ¥Õ´Õ¢Õ¥Ö_Õ¤Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö'.split(
                    '_'
                ),
        },
        monthsShort: 'Õ°Õ¶Õ¾_ÖÕ¿Ö_Õ´ÖÕ¿_Õ¡ÕºÖ_Õ´ÕµÕ½_Õ°Õ¶Õ½_Õ°Õ¬Õ½_ÖÕ£Õ½_Õ½ÕºÕ¿_Õ°Õ¯Õ¿_Õ¶Õ´Õ¢_Õ¤Õ¯Õ¿'.split('_'),
        weekdays:
            'Õ¯Õ«ÖÕ¡Õ¯Õ«_Õ¥ÖÕ¯Õ¸ÖÕ·Õ¡Õ¢Õ©Õ«_Õ¥ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«_Õ¹Õ¸ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«_Õ°Õ«Õ¶Õ£Õ·Õ¡Õ¢Õ©Õ«_Õ¸ÖÖÕ¢Õ¡Õ©_Õ·Õ¡Õ¢Õ¡Õ©'.split(
                '_'
            ),
        weekdaysShort: 'Õ¯ÖÕ¯_Õ¥ÖÕ¯_Õ¥ÖÖ_Õ¹ÖÖ_Õ°Õ¶Õ£_Õ¸ÖÖÕ¢_Õ·Õ¢Õ©'.split('_'),
        weekdaysMin: 'Õ¯ÖÕ¯_Õ¥ÖÕ¯_Õ¥ÖÖ_Õ¹ÖÖ_Õ°Õ¶Õ£_Õ¸ÖÖÕ¢_Õ·Õ¢Õ©'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY Õ©.',
            LLL: 'D MMMM YYYY Õ©., HH:mm',
            LLLL: 'dddd, D MMMM YYYY Õ©., HH:mm',
        },
        calendar: {
            sameDay: '[Õ¡ÕµÕ½ÖÖ] LT',
            nextDay: '[Õ¾Õ¡Õ²Õ¨] LT',
            lastDay: '[Õ¥ÖÕ¥Õ¯] LT',
            nextWeek: function () {
                return 'dddd [ÖÖÕ¨ ÕªÕ¡Õ´Õ¨] LT';
            },
            lastWeek: function () {
                return '[Õ¡Õ¶ÖÕ¡Õ®] dddd [ÖÖÕ¨ ÕªÕ¡Õ´Õ¨] LT';
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s Õ°Õ¥Õ¿Õ¸',
            past: '%s Õ¡Õ¼Õ¡Õ»',
            s: 'Õ´Õ« ÖÕ¡Õ¶Õ« Õ¾Õ¡ÕµÖÕ¯ÕµÕ¡Õ¶',
            ss: '%d Õ¾Õ¡ÕµÖÕ¯ÕµÕ¡Õ¶',
            m: 'ÖÕ¸ÕºÕ¥',
            mm: '%d ÖÕ¸ÕºÕ¥',
            h: 'ÕªÕ¡Õ´',
            hh: '%d ÕªÕ¡Õ´',
            d: 'ÖÖ',
            dd: '%d ÖÖ',
            M: 'Õ¡Õ´Õ«Õ½',
            MM: '%d Õ¡Õ´Õ«Õ½',
            y: 'Õ¿Õ¡ÖÕ«',
            yy: '%d Õ¿Õ¡ÖÕ«',
        },
        meridiemParse: /Õ£Õ«Õ·Õ¥ÖÕ¾Õ¡|Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿Õ¾Õ¡|ÖÕ¥ÖÕ¥Õ¯Õ¾Õ¡|Õ¥ÖÕ¥Õ¯Õ¸ÕµÕ¡Õ¶/,
        isPM: function (input) {
            return /^(ÖÕ¥ÖÕ¥Õ¯Õ¾Õ¡|Õ¥ÖÕ¥Õ¯Õ¸ÕµÕ¡Õ¶)$/.test(input);
        },
        meridiem: function (hour) {
            if (hour < 4) {
                return 'Õ£Õ«Õ·Õ¥ÖÕ¾Õ¡';
            } else if (hour < 12) {
                return 'Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿Õ¾Õ¡';
            } else if (hour < 17) {
                return 'ÖÕ¥ÖÕ¥Õ¯Õ¾Õ¡';
            } else {
                return 'Õ¥ÖÕ¥Õ¯Õ¸ÕµÕ¡Õ¶';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(Õ«Õ¶|ÖÕ¤)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'DDD':
                case 'w':
                case 'W':
                case 'DDDo':
                    if (number === 1) {
                        return number + '-Õ«Õ¶';
                    }
                    return number + '-ÖÕ¤';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return hyAm;

})));


/***/ }),

/***/ "./node_modules/moment/locale/id.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/id.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Indonesian [id]
//! author : Mohammad Satrio Utomo : https://github.com/tyok
//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var id = moment.defineLocale('id', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des'.split('_'),
        weekdays: 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /pagi|siang|sore|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'siang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sore' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Besok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kemarin pukul] LT',
            lastWeek: 'dddd [lalu pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lalu',
            s: 'beberapa detik',
            ss: '%d detik',
            m: 'semenit',
            mm: '%d menit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun',
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return id;

})));


/***/ }),

/***/ "./node_modules/moment/locale/is.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/is.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Icelandic [is]
//! author : Hinrik Ãrn SigurÃ°sson : https://github.com/hinrik

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture
                    ? 'nokkrar sekÃºndur'
                    : 'nokkrum sekÃºndum';
            case 'ss':
                if (plural(number)) {
                    return (
                        result +
                        (withoutSuffix || isFuture ? 'sekÃºndur' : 'sekÃºndum')
                    );
                }
                return result + 'sekÃºnda';
            case 'm':
                return withoutSuffix ? 'mÃ­nÃºta' : 'mÃ­nÃºtu';
            case 'mm':
                if (plural(number)) {
                    return (
                        result + (withoutSuffix || isFuture ? 'mÃ­nÃºtur' : 'mÃ­nÃºtum')
                    );
                } else if (withoutSuffix) {
                    return result + 'mÃ­nÃºta';
                }
                return result + 'mÃ­nÃºtu';
            case 'hh':
                if (plural(number)) {
                    return (
                        result +
                        (withoutSuffix || isFuture
                            ? 'klukkustundir'
                            : 'klukkustundum')
                    );
                }
                return result + 'klukkustund';
            case 'd':
                if (withoutSuffix) {
                    return 'dagur';
                }
                return isFuture ? 'dag' : 'degi';
            case 'dd':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'dagar';
                    }
                    return result + (isFuture ? 'daga' : 'dÃ¶gum');
                } else if (withoutSuffix) {
                    return result + 'dagur';
                }
                return result + (isFuture ? 'dag' : 'degi');
            case 'M':
                if (withoutSuffix) {
                    return 'mÃ¡nuÃ°ur';
                }
                return isFuture ? 'mÃ¡nuÃ°' : 'mÃ¡nuÃ°i';
            case 'MM':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'mÃ¡nuÃ°ir';
                    }
                    return result + (isFuture ? 'mÃ¡nuÃ°i' : 'mÃ¡nuÃ°um');
                } else if (withoutSuffix) {
                    return result + 'mÃ¡nuÃ°ur';
                }
                return result + (isFuture ? 'mÃ¡nuÃ°' : 'mÃ¡nuÃ°i');
            case 'y':
                return withoutSuffix || isFuture ? 'Ã¡r' : 'Ã¡ri';
            case 'yy':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'Ã¡r' : 'Ã¡rum');
                }
                return result + (withoutSuffix || isFuture ? 'Ã¡r' : 'Ã¡ri');
        }
    }

    var is = moment.defineLocale('is', {
        months: 'janÃºar_febrÃºar_mars_aprÃ­l_maÃ­_jÃºnÃ­_jÃºlÃ­_Ã¡gÃºst_september_oktÃ³ber_nÃ³vember_desember'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_maÃ­_jÃºn_jÃºl_Ã¡gÃº_sep_okt_nÃ³v_des'.split('_'),
        weekdays:
            'sunnudagur_mÃ¡nudagur_Ã¾riÃ°judagur_miÃ°vikudagur_fimmtudagur_fÃ¶studagur_laugardagur'.split(
                '_'
            ),
        weekdaysShort: 'sun_mÃ¡n_Ã¾ri_miÃ°_fim_fÃ¶s_lau'.split('_'),
        weekdaysMin: 'Su_MÃ¡_Ãr_Mi_Fi_FÃ¶_La'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd, D. MMMM YYYY [kl.] H:mm',
        },
        calendar: {
            sameDay: '[Ã­ dag kl.] LT',
            nextDay: '[Ã¡ morgun kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[Ã­ gÃ¦r kl.] LT',
            lastWeek: '[sÃ­Ã°asta] dddd [kl.] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'eftir %s',
            past: 'fyrir %s sÃ­Ã°an',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: 'klukkustund',
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return is;

})));


/***/ }),

/***/ "./node_modules/moment/locale/it-ch.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/it-ch.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Italian (Switzerland) [it-ch]
//! author : xfh : https://github.com/xfh

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var itCh = moment.defineLocale('it-ch', {
        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
            '_'
        ),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays: 'domenica_lunedÃ¬_martedÃ¬_mercoledÃ¬_giovedÃ¬_venerdÃ¬_sabato'.split(
            '_'
        ),
        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[la scorsa] dddd [alle] LT';
                    default:
                        return '[lo scorso] dddd [alle] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: function (s) {
                return (/^[0-9].+$/.test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past: '%s fa',
            s: 'alcuni secondi',
            ss: '%d secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: "un'ora",
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni',
        },
        dayOfMonthOrdinalParse: /\d{1,2}Âº/,
        ordinal: '%dÂº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return itCh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/it.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/it.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Italian [it]
//! author : Lorenzo : https://github.com/aliem
//! author: Mattia Larentis: https://github.com/nostalgiaz
//! author: Marco : https://github.com/Manfre98

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var it = moment.defineLocale('it', {
        months: 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split(
            '_'
        ),
        monthsShort: 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays: 'domenica_lunedÃ¬_martedÃ¬_mercoledÃ¬_giovedÃ¬_venerdÃ¬_sabato'.split(
            '_'
        ),
        weekdaysShort: 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin: 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: function () {
                return (
                    '[Oggi a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            nextDay: function () {
                return (
                    '[Domani a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            nextWeek: function () {
                return (
                    'dddd [a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            lastDay: function () {
                return (
                    '[Ieri a' +
                    (this.hours() > 1 ? 'lle ' : this.hours() === 0 ? ' ' : "ll'") +
                    ']LT'
                );
            },
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return (
                            '[La scorsa] dddd [a' +
                            (this.hours() > 1
                                ? 'lle '
                                : this.hours() === 0
                                ? ' '
                                : "ll'") +
                            ']LT'
                        );
                    default:
                        return (
                            '[Lo scorso] dddd [a' +
                            (this.hours() > 1
                                ? 'lle '
                                : this.hours() === 0
                                ? ' '
                                : "ll'") +
                            ']LT'
                        );
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'tra %s',
            past: '%s fa',
            s: 'alcuni secondi',
            ss: '%d secondi',
            m: 'un minuto',
            mm: '%d minuti',
            h: "un'ora",
            hh: '%d ore',
            d: 'un giorno',
            dd: '%d giorni',
            w: 'una settimana',
            ww: '%d settimane',
            M: 'un mese',
            MM: '%d mesi',
            y: 'un anno',
            yy: '%d anni',
        },
        dayOfMonthOrdinalParse: /\d{1,2}Âº/,
        ordinal: '%dÂº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return it;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ja.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ja.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Japanese [ja]
//! author : LI Long : https://github.com/baryon

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ja = moment.defineLocale('ja', {
        eras: [
            {
                since: '2019-05-01',
                offset: 1,
                name: 'ä»¤å',
                narrow: 'ã¿',
                abbr: 'R',
            },
            {
                since: '1989-01-08',
                until: '2019-04-30',
                offset: 1,
                name: 'å¹³æ',
                narrow: 'ã»',
                abbr: 'H',
            },
            {
                since: '1926-12-25',
                until: '1989-01-07',
                offset: 1,
                name: 'æ­å',
                narrow: 'ã¼',
                abbr: 'S',
            },
            {
                since: '1912-07-30',
                until: '1926-12-24',
                offset: 1,
                name: 'å¤§æ­£',
                narrow: 'ã½',
                abbr: 'T',
            },
            {
                since: '1873-01-01',
                until: '1912-07-29',
                offset: 6,
                name: 'ææ²»',
                narrow: 'ã¾',
                abbr: 'M',
            },
            {
                since: '0001-01-01',
                until: '1873-12-31',
                offset: 1,
                name: 'è¥¿æ¦',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'ç´åå',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        eraYearOrdinalRegex: /(å|\d+)å¹´/,
        eraYearOrdinalParse: function (input, match) {
            return match[1] === 'å' ? 1 : parseInt(match[1] || input, 10);
        },
        months: '1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ'.split('_'),
        monthsShort: '1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ'.split(
            '_'
        ),
        weekdays: 'æ¥ææ¥_æææ¥_ç«ææ¥_æ°´ææ¥_æ¨ææ¥_éææ¥_åææ¥'.split('_'),
        weekdaysShort: 'æ¥_æ_ç«_æ°´_æ¨_é_å'.split('_'),
        weekdaysMin: 'æ¥_æ_ç«_æ°´_æ¨_é_å'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYYå¹´MæDæ¥',
            LLL: 'YYYYå¹´MæDæ¥ HH:mm',
            LLLL: 'YYYYå¹´MæDæ¥ dddd HH:mm',
            l: 'YYYY/MM/DD',
            ll: 'YYYYå¹´MæDæ¥',
            lll: 'YYYYå¹´MæDæ¥ HH:mm',
            llll: 'YYYYå¹´MæDæ¥(ddd) HH:mm',
        },
        meridiemParse: /åå|åå¾/i,
        isPM: function (input) {
            return input === 'åå¾';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'åå';
            } else {
                return 'åå¾';
            }
        },
        calendar: {
            sameDay: '[ä»æ¥] LT',
            nextDay: '[ææ¥] LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    return '[æ¥é±]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            lastDay: '[æ¨æ¥] LT',
            lastWeek: function (now) {
                if (this.week() !== now.week()) {
                    return '[åé±]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}æ¥/,
        ordinal: function (number, period) {
            switch (period) {
                case 'y':
                    return number === 1 ? 'åå¹´' : number + 'å¹´';
                case 'd':
                case 'D':
                case 'DDD':
                    return number + 'æ¥';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%så¾',
            past: '%så',
            s: 'æ°ç§',
            ss: '%dç§',
            m: '1å',
            mm: '%då',
            h: '1æé',
            hh: '%dæé',
            d: '1æ¥',
            dd: '%dæ¥',
            M: '1ã¶æ',
            MM: '%dã¶æ',
            y: '1å¹´',
            yy: '%då¹´',
        },
    });

    return ja;

})));


/***/ }),

/***/ "./node_modules/moment/locale/jv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/jv.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Javanese [jv]
//! author : Rony Lantip : https://github.com/lantip
//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var jv = moment.defineLocale('jv', {
        months: 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
        weekdays: 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
        weekdaysShort: 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
        weekdaysMin: 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /enjing|siyang|sonten|ndalu/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'enjing') {
                return hour;
            } else if (meridiem === 'siyang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'enjing';
            } else if (hours < 15) {
                return 'siyang';
            } else if (hours < 19) {
                return 'sonten';
            } else {
                return 'ndalu';
            }
        },
        calendar: {
            sameDay: '[Dinten puniko pukul] LT',
            nextDay: '[Mbenjang pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kala wingi pukul] LT',
            lastWeek: 'dddd [kepengker pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'wonten ing %s',
            past: '%s ingkang kepengker',
            s: 'sawetawis detik',
            ss: '%d detik',
            m: 'setunggal menit',
            mm: '%d menit',
            h: 'setunggal jam',
            hh: '%d jam',
            d: 'sedinten',
            dd: '%d dinten',
            M: 'sewulan',
            MM: '%d wulan',
            y: 'setaun',
            yy: '%d taun',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return jv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ka.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ka.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Georgian [ka]
//! author : Irakli Janiashvili : https://github.com/IrakliJani

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ka = moment.defineLocale('ka', {
        months: 'áááááá á_ááááá áááá_ááá á¢á_ááá ááá_áááá¡á_ááááá¡á_ááááá¡á_ááááá¡á¢á_á¡áá¥á¢ááááá á_áá¥á¢ááááá á_ááááááá á_áááááááá á'.split(
            '_'
        ),
        monthsShort: 'ááá_ááá_ááá _ááá _ááá_ááá_ááá_ááá_á¡áá¥_áá¥á¢_ááá_ááá'.split('_'),
        weekdays: {
            standalone:
                'áááá á_áá á¨ááááá_á¡ááá¨ááááá_ááá®á¨ááááá_á®á£áá¨ááááá_ááá áá¡áááá_á¨ááááá'.split(
                    '_'
                ),
            format: 'áááá áá¡_áá á¨ááááá¡_á¡ááá¨ááááá¡_ááá®á¨ááááá¡_á®á£áá¨ááááá¡_ááá áá¡áááá¡_á¨ááááá¡'.split(
                '_'
            ),
            isFormat: /(á¬ááá|á¨ááááá)/,
        },
        weekdaysShort: 'ááá_áá á¨_á¡áá_ááá®_á®á£á_ááá _á¨áá'.split('_'),
        weekdaysMin: 'áá_áá _á¡á_áá_á®á£_áá_á¨á'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[áá¦áá¡] LT[-áá]',
            nextDay: '[á®ááá] LT[-áá]',
            lastDay: '[áá£á¨áá] LT[-áá]',
            nextWeek: '[á¨ááááá] dddd LT[-áá]',
            lastWeek: '[á¬ááá] dddd LT-áá',
            sameElse: 'L',
        },
        relativeTime: {
            future: function (s) {
                return s.replace(
                    /(á¬áá|á¬á£á|á¡ááá|á¬áá|áá¦|áá)(á|á)/,
                    function ($0, $1, $2) {
                        return $2 === 'á' ? $1 + 'á¨á' : $1 + $2 + 'á¨á';
                    }
                );
            },
            past: function (s) {
                if (/(á¬ááá|á¬á£áá|á¡áááá|áá¦á|ááá)/.test(s)) {
                    return s.replace(/(á|á)$/, 'áá¡ á¬áá');
                }
                if (/á¬ááá/.test(s)) {
                    return s.replace(/á¬ááá$/, 'á¬ááá¡ á¬áá');
                }
                return s;
            },
            s: 'á áááááááá á¬ááá',
            ss: '%d á¬ááá',
            m: 'á¬á£áá',
            mm: '%d á¬á£áá',
            h: 'á¡áááá',
            hh: '%d á¡áááá',
            d: 'áá¦á',
            dd: '%d áá¦á',
            M: 'ááá',
            MM: '%d ááá',
            y: 'á¬ááá',
            yy: '%d á¬ááá',
        },
        dayOfMonthOrdinalParse: /0|1-áá|áá-\d{1,2}|\d{1,2}-á/,
        ordinal: function (number) {
            if (number === 0) {
                return number;
            }
            if (number === 1) {
                return number + '-áá';
            }
            if (
                number < 20 ||
                (number <= 100 && number % 20 === 0) ||
                number % 100 === 0
            ) {
                return 'áá-' + number;
            }
            return number + '-á';
        },
        week: {
            dow: 1,
            doy: 7,
        },
    });

    return ka;

})));


/***/ }),

/***/ "./node_modules/moment/locale/kk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/kk.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kazakh [kk]
//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        0: '-ÑÑ',
        1: '-ÑÑ',
        2: '-ÑÑ',
        3: '-ÑÑ',
        4: '-ÑÑ',
        5: '-ÑÑ',
        6: '-ÑÑ',
        7: '-ÑÑ',
        8: '-ÑÑ',
        9: '-ÑÑ',
        10: '-ÑÑ',
        20: '-ÑÑ',
        30: '-ÑÑ',
        40: '-ÑÑ',
        50: '-ÑÑ',
        60: '-ÑÑ',
        70: '-ÑÑ',
        80: '-ÑÑ',
        90: '-ÑÑ',
        100: '-ÑÑ',
    };

    var kk = moment.defineLocale('kk', {
        months: 'ÒÐ°Ò£ÑÐ°Ñ_Ð°ÒÐ¿Ð°Ð½_Ð½Ð°ÑÑÑÐ·_ÑÓÑÑÑ_Ð¼Ð°Ð¼ÑÑ_Ð¼Ð°ÑÑÑÐ¼_ÑÑÐ»Ð´Ðµ_ÑÐ°Ð¼ÑÐ·_ÒÑÑÐºÒ¯Ð¹ÐµÐº_ÒÐ°Ð·Ð°Ð½_ÒÐ°ÑÐ°ÑÐ°_Ð¶ÐµÐ»ÑÐ¾ÒÑÐ°Ð½'.split(
            '_'
        ),
        monthsShort: 'ÒÐ°Ò£_Ð°ÒÐ¿_Ð½Ð°Ñ_ÑÓÑ_Ð¼Ð°Ð¼_Ð¼Ð°Ñ_ÑÑÐ»_ÑÐ°Ð¼_ÒÑÑ_ÒÐ°Ð·_ÒÐ°Ñ_Ð¶ÐµÐ»'.split('_'),
        weekdays: 'Ð¶ÐµÐºÑÐµÐ½Ð±Ñ_Ð´Ò¯Ð¹ÑÐµÐ½Ð±Ñ_ÑÐµÐ¹ÑÐµÐ½Ð±Ñ_ÑÓÑÑÐµÐ½Ð±Ñ_Ð±ÐµÐ¹ÑÐµÐ½Ð±Ñ_Ð¶Ò±Ð¼Ð°_ÑÐµÐ½Ð±Ñ'.split(
            '_'
        ),
        weekdaysShort: 'Ð¶ÐµÐº_Ð´Ò¯Ð¹_ÑÐµÐ¹_ÑÓÑ_Ð±ÐµÐ¹_Ð¶Ò±Ð¼_ÑÐµÐ½'.split('_'),
        weekdaysMin: 'Ð¶Ðº_Ð´Ð¹_ÑÐ¹_ÑÑ_Ð±Ð¹_Ð¶Ð¼_ÑÐ½'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[ÐÒ¯Ð³ÑÐ½ ÑÐ°ÒÐ°Ñ] LT',
            nextDay: '[ÐÑÑÐµÒ£ ÑÐ°ÒÐ°Ñ] LT',
            nextWeek: 'dddd [ÑÐ°ÒÐ°Ñ] LT',
            lastDay: '[ÐÐµÑÐµ ÑÐ°ÒÐ°Ñ] LT',
            lastWeek: '[Ó¨ÑÐºÐµÐ½ Ð°Ð¿ÑÐ°Ð½ÑÒ£] dddd [ÑÐ°ÒÐ°Ñ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ÑÑÑÐ½Ð´Ðµ',
            past: '%s Ð±Ò±ÑÑÐ½',
            s: 'Ð±ÑÑÐ½ÐµÑÐµ ÑÐµÐºÑÐ½Ð´',
            ss: '%d ÑÐµÐºÑÐ½Ð´',
            m: 'Ð±ÑÑ Ð¼Ð¸Ð½ÑÑ',
            mm: '%d Ð¼Ð¸Ð½ÑÑ',
            h: 'Ð±ÑÑ ÑÐ°ÒÐ°Ñ',
            hh: '%d ÑÐ°ÒÐ°Ñ',
            d: 'Ð±ÑÑ ÐºÒ¯Ð½',
            dd: '%d ÐºÒ¯Ð½',
            M: 'Ð±ÑÑ Ð°Ð¹',
            MM: '%d Ð°Ð¹',
            y: 'Ð±ÑÑ Ð¶ÑÐ»',
            yy: '%d Ð¶ÑÐ»',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ÑÑ|ÑÑ)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return kk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/km.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/km.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Cambodian [km]
//! author : Kruy Vanna : https://github.com/kruyvanna

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'á¡',
            2: 'á¢',
            3: 'á£',
            4: 'á¤',
            5: 'á¥',
            6: 'á¦',
            7: 'á§',
            8: 'á¨',
            9: 'á©',
            0: 'á ',
        },
        numberMap = {
            'á¡': '1',
            'á¢': '2',
            'á£': '3',
            'á¤': '4',
            'á¥': '5',
            'á¦': '6',
            'á§': '7',
            'á¨': '8',
            'á©': '9',
            'á ': '0',
        };

    var km = moment.defineLocale('km', {
        months: 'áááá¶_áá»áááá_áá¸áá¶_áááá¶_á§ááá¶_áá·áá»áá¶_áááááá¶_áá¸á á¶_ááááá¶_áá»áá¶_áá·áááá·áá¶_áááá¼'.split(
            '_'
        ),
        monthsShort:
            'áááá¶_áá»áááá_áá¸áá¶_áááá¶_á§ááá¶_áá·áá»áá¶_áááááá¶_áá¸á á¶_ááááá¶_áá»áá¶_áá·áááá·áá¶_áááá¼'.split(
                '_'
            ),
        weekdays: 'á¢á¶áá·ááá_ááááá_á¢áááá¶á_áá»á_áááá ááááá·á_áá»ááá_áááá'.split('_'),
        weekdaysShort: 'á¢á¶_á_á¢_á_ááá_áá»_á'.split('_'),
        weekdaysMin: 'á¢á¶_á_á¢_á_ááá_áá»_á'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        meridiemParse: /áááá¹á|áááá¶á/,
        isPM: function (input) {
            return input === 'áááá¶á';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'áááá¹á';
            } else {
                return 'áááá¶á';
            }
        },
        calendar: {
            sameDay: '[ááááááá áááá] LT',
            nextDay: '[ááá¢áá áááá] LT',
            nextWeek: 'dddd [áááá] LT',
            lastDay: '[áááá·ááá·á áááá] LT',
            lastWeek: 'dddd [ááááá¶á ááá»á] [áááá] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sááá',
            past: '%sáá»á',
            s: 'ááá»áááá¶ááá·áá¶áá¸',
            ss: '%d áá·áá¶áá¸',
            m: 'áá½ááá¶áá¸',
            mm: '%d áá¶áá¸',
            h: 'áá½ááááá',
            hh: '%d áááá',
            d: 'áá½ááááá',
            dd: '%d áááá',
            M: 'áá½ááá',
            MM: '%d áá',
            y: 'áá½ááááá¶á',
            yy: '%d áááá¶á',
        },
        dayOfMonthOrdinalParse: /áá¸\d{1,2}/,
        ordinal: 'áá¸%d',
        preparse: function (string) {
            return string.replace(/[á¡á¢á£á¤á¥á¦á§á¨á©á ]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return km;

})));


/***/ }),

/***/ "./node_modules/moment/locale/kn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/kn.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kannada [kn]
//! author : Rajeev Naik : https://github.com/rajeevnaikte

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'à³§',
            2: 'à³¨',
            3: 'à³©',
            4: 'à³ª',
            5: 'à³«',
            6: 'à³¬',
            7: 'à³­',
            8: 'à³®',
            9: 'à³¯',
            0: 'à³¦',
        },
        numberMap = {
            'à³§': '1',
            'à³¨': '2',
            'à³©': '3',
            'à³ª': '4',
            'à³«': '5',
            'à³¬': '6',
            'à³­': '7',
            'à³®': '8',
            'à³¯': '9',
            'à³¦': '0',
        };

    var kn = moment.defineLocale('kn', {
        months: 'à²à²¨à²µà²°à²¿_à²«à³à²¬à³à²°à²µà²°à²¿_à²®à²¾à²°à³à²à³_à²à²ªà³à²°à²¿à²²à³_à²®à³à³_à²à³à²¨à³_à²à³à²²à³à³_à²à²à²¸à³à²à³_à²¸à³à²ªà³à²à³à²à²¬à²°à³_à²à²à³à²à³à³à³à²¬à²°à³_à²¨à²µà³à²à²¬à²°à³_à²¡à²¿à²¸à³à²à²¬à²°à³'.split(
            '_'
        ),
        monthsShort:
            'à²à²¨_à²«à³à²¬à³à²°_à²®à²¾à²°à³à²à³_à²à²ªà³à²°à²¿à²²à³_à²®à³à³_à²à³à²¨à³_à²à³à²²à³à³_à²à²à²¸à³à²à³_à²¸à³à²ªà³à²à³à²_à²à²à³à²à³à³à³_à²¨à²µà³à²_à²¡à²¿à²¸à³à²'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'à²­à²¾à²¨à³à²µà²¾à²°_à²¸à³à³à³à²®à²µà²¾à²°_à²®à²à²à²³à²µà²¾à²°_à²¬à³à²§à²µà²¾à²°_à²à³à²°à³à²µà²¾à²°_à²¶à³à²à³à²°à²µà²¾à²°_à²¶à²¨à²¿à²µà²¾à²°'.split(
            '_'
        ),
        weekdaysShort: 'à²­à²¾à²¨à³_à²¸à³à³à³à²®_à²®à²à²à²³_à²¬à³à²§_à²à³à²°à³_à²¶à³à²à³à²°_à²¶à²¨à²¿'.split('_'),
        weekdaysMin: 'à²­à²¾_à²¸à³à³à³_à²®à²_à²¬à³_à²à³_à²¶à³_à²¶'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm',
        },
        calendar: {
            sameDay: '[à²à²à²¦à³] LT',
            nextDay: '[à²¨à²¾à²³à³] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[à²¨à²¿à²¨à³à²¨à³] LT',
            lastWeek: '[à²à³à³à²¨à³à²¯] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s à²¨à²à²¤à²°',
            past: '%s à²¹à²¿à²à²¦à³',
            s: 'à²à³à²²à²µà³ à²à³à²·à²£à²à²³à³',
            ss: '%d à²¸à³à²à³à²à²¡à³à²à²³à³',
            m: 'à²à²à²¦à³ à²¨à²¿à²®à²¿à²·',
            mm: '%d à²¨à²¿à²®à²¿à²·',
            h: 'à²à²à²¦à³ à²à²à²à³',
            hh: '%d à²à²à²à³',
            d: 'à²à²à²¦à³ à²¦à²¿à²¨',
            dd: '%d à²¦à²¿à²¨',
            M: 'à²à²à²¦à³ à²¤à²¿à²à²à²³à³',
            MM: '%d à²¤à²¿à²à²à²³à³',
            y: 'à²à²à²¦à³ à²µà²°à³à²·',
            yy: '%d à²µà²°à³à²·',
        },
        preparse: function (string) {
            return string.replace(/[à³§à³¨à³©à³ªà³«à³¬à³­à³®à³¯à³¦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /à²°à²¾à²¤à³à²°à²¿|à²¬à³à²³à²¿à²à³à²à³|à²®à²§à³à²¯à²¾à²¹à³à²¨|à²¸à²à²à³/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'à²°à²¾à²¤à³à²°à²¿') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'à²¬à³à²³à²¿à²à³à²à³') {
                return hour;
            } else if (meridiem === 'à²®à²§à³à²¯à²¾à²¹à³à²¨') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'à²¸à²à²à³') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'à²°à²¾à²¤à³à²°à²¿';
            } else if (hour < 10) {
                return 'à²¬à³à²³à²¿à²à³à²à³';
            } else if (hour < 17) {
                return 'à²®à²§à³à²¯à²¾à²¹à³à²¨';
            } else if (hour < 20) {
                return 'à²¸à²à²à³';
            } else {
                return 'à²°à²¾à²¤à³à²°à²¿';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}(à²¨à³à³)/,
        ordinal: function (number) {
            return number + 'à²¨à³à³';
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return kn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ko.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ko.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Korean [ko]
//! author : Kyungwook, Park : https://github.com/kyungw00k
//! author : Jeeeyul Lee <jeeeyul@gmail.com>

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ko = moment.defineLocale('ko', {
        months: '1ì_2ì_3ì_4ì_5ì_6ì_7ì_8ì_9ì_10ì_11ì_12ì'.split('_'),
        monthsShort: '1ì_2ì_3ì_4ì_5ì_6ì_7ì_8ì_9ì_10ì_11ì_12ì'.split(
            '_'
        ),
        weekdays: 'ì¼ìì¼_ììì¼_íìì¼_ììì¼_ëª©ìì¼_ê¸ìì¼_í ìì¼'.split('_'),
        weekdaysShort: 'ì¼_ì_í_ì_ëª©_ê¸_í '.split('_'),
        weekdaysMin: 'ì¼_ì_í_ì_ëª©_ê¸_í '.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'YYYY.MM.DD.',
            LL: 'YYYYë MMMM Dì¼',
            LLL: 'YYYYë MMMM Dì¼ A h:mm',
            LLLL: 'YYYYë MMMM Dì¼ dddd A h:mm',
            l: 'YYYY.MM.DD.',
            ll: 'YYYYë MMMM Dì¼',
            lll: 'YYYYë MMMM Dì¼ A h:mm',
            llll: 'YYYYë MMMM Dì¼ dddd A h:mm',
        },
        calendar: {
            sameDay: 'ì¤ë LT',
            nextDay: 'ë´ì¼ LT',
            nextWeek: 'dddd LT',
            lastDay: 'ì´ì  LT',
            lastWeek: 'ì§ëì£¼ dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s í',
            past: '%s ì ',
            s: 'ëª ì´',
            ss: '%dì´',
            m: '1ë¶',
            mm: '%dë¶',
            h: 'í ìê°',
            hh: '%dìê°',
            d: 'íë£¨',
            dd: '%dì¼',
            M: 'í ë¬',
            MM: '%dë¬',
            y: 'ì¼ ë',
            yy: '%dë',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ì¼|ì|ì£¼)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + 'ì¼';
                case 'M':
                    return number + 'ì';
                case 'w':
                case 'W':
                    return number + 'ì£¼';
                default:
                    return number;
            }
        },
        meridiemParse: /ì¤ì |ì¤í/,
        isPM: function (token) {
            return token === 'ì¤í';
        },
        meridiem: function (hour, minute, isUpper) {
            return hour < 12 ? 'ì¤ì ' : 'ì¤í';
        },
    });

    return ko;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ku.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ku.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kurdish [ku]
//! author : Shahram Mebashar : https://github.com/ShahramMebashar

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'Ù¡',
            2: 'Ù¢',
            3: 'Ù£',
            4: 'Ù¤',
            5: 'Ù¥',
            6: 'Ù¦',
            7: 'Ù§',
            8: 'Ù¨',
            9: 'Ù©',
            0: 'Ù ',
        },
        numberMap = {
            'Ù¡': '1',
            'Ù¢': '2',
            'Ù£': '3',
            'Ù¤': '4',
            'Ù¥': '5',
            'Ù¦': '6',
            'Ù§': '7',
            'Ù¨': '8',
            'Ù©': '9',
            'Ù ': '0',
        },
        months = [
            'Ú©Ø§ÙÙÙÛ Ø¯ÙÙÛÙ',
            'Ø´ÙØ¨Ø§Øª',
            'Ø¦Ø§Ø²Ø§Ø±',
            'ÙÛØ³Ø§Ù',
            'Ø¦Ø§ÛØ§Ø±',
            'Ø­ÙØ²ÛÛØ±Ø§Ù',
            'ØªÛÙÙÙØ²',
            'Ø¦Ø§Ø¨',
            'Ø¦ÛÛÙÙÙÙ',
            'ØªØ´Ø±ÛÙÛ ÛÛÙÛÙ',
            'ØªØ´Ø±ÛÙÛ Ø¯ÙÙÛÙ',
            'ÙØ§ÙÙÙÛ ÛÛÚ©ÛÙ',
        ];

    var ku = moment.defineLocale('ku', {
        months: months,
        monthsShort: months,
        weekdays:
            'ÛÙâÙØ´ÙâÙÙÙâ_Ø¯ÙÙØ´ÙâÙÙÙâ_Ø³ÛØ´ÙâÙÙÙâ_ÚÙØ§Ø±Ø´ÙâÙÙÙâ_Ù¾ÛÙØ¬Ø´ÙâÙÙÙâ_ÙÙâÛÙÛ_Ø´ÙâÙÙÙâ'.split(
                '_'
            ),
        weekdaysShort:
            'ÛÙâÙØ´ÙâÙ_Ø¯ÙÙØ´ÙâÙ_Ø³ÛØ´ÙâÙ_ÚÙØ§Ø±Ø´ÙâÙ_Ù¾ÛÙØ¬Ø´ÙâÙ_ÙÙâÛÙÛ_Ø´ÙâÙÙÙâ'.split('_'),
        weekdaysMin: 'Û_Ø¯_Ø³_Ú_Ù¾_Ù_Ø´'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        meridiemParse: /Ø¦ÛÙØ§Ø±Ùâ|Ø¨ÙâÛØ§ÙÛ/,
        isPM: function (input) {
            return /Ø¦ÛÙØ§Ø±Ùâ/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'Ø¨ÙâÛØ§ÙÛ';
            } else {
                return 'Ø¦ÛÙØ§Ø±Ùâ';
            }
        },
        calendar: {
            sameDay: '[Ø¦ÙâÙØ±Û ÙØ§ØªÚÙÛØ±] LT',
            nextDay: '[Ø¨ÙâÛØ§ÙÛ ÙØ§ØªÚÙÛØ±] LT',
            nextWeek: 'dddd [ÙØ§ØªÚÙÛØ±] LT',
            lastDay: '[Ø¯ÙÛÙÛ ÙØ§ØªÚÙÛØ±] LT',
            lastWeek: 'dddd [ÙØ§ØªÚÙÛØ±] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ÙÙâ %s',
            past: '%s',
            s: 'ÚÙâÙØ¯ ÚØ±ÙÙâÛÙâÙ',
            ss: 'ÚØ±ÙÙâ %d',
            m: 'ÛÙâÙ Ø®ÙÙÙâÙ',
            mm: '%d Ø®ÙÙÙâÙ',
            h: 'ÛÙâÙ ÙØ§ØªÚÙÛØ±',
            hh: '%d ÙØ§ØªÚÙÛØ±',
            d: 'ÛÙâÙ ÚÛÚ',
            dd: '%d ÚÛÚ',
            M: 'ÛÙâÙ ÙØ§ÙÚ¯',
            MM: '%d ÙØ§ÙÚ¯',
            y: 'ÛÙâÙ Ø³Ø§Úµ',
            yy: '%d Ø³Ø§Úµ',
        },
        preparse: function (string) {
            return string
                .replace(/[Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Ù ]/g, function (match) {
                    return numberMap[match];
                })
                .replace(/Ø/g, ',');
        },
        postformat: function (string) {
            return string
                .replace(/\d/g, function (match) {
                    return symbolMap[match];
                })
                .replace(/,/g, 'Ø');
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return ku;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ky.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ky.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Kyrgyz [ky]
//! author : Chyngyz Arystan uulu : https://github.com/chyngyz

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        0: '-ÑÒ¯',
        1: '-ÑÐ¸',
        2: '-ÑÐ¸',
        3: '-ÑÒ¯',
        4: '-ÑÒ¯',
        5: '-ÑÐ¸',
        6: '-ÑÑ',
        7: '-ÑÐ¸',
        8: '-ÑÐ¸',
        9: '-ÑÑ',
        10: '-ÑÑ',
        20: '-ÑÑ',
        30: '-ÑÑ',
        40: '-ÑÑ',
        50: '-ÑÒ¯',
        60: '-ÑÑ',
        70: '-ÑÐ¸',
        80: '-ÑÐ¸',
        90: '-ÑÑ',
        100: '-ÑÒ¯',
    };

    var ky = moment.defineLocale('ky', {
        months: 'ÑÐ½Ð²Ð°ÑÑ_ÑÐµÐ²ÑÐ°Ð»Ñ_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐµÐ»Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ½ÑÑÐ±ÑÑ_Ð¾ÐºÑÑÐ±ÑÑ_Ð½Ð¾ÑÐ±ÑÑ_Ð´ÐµÐºÐ°Ð±ÑÑ'.split(
            '_'
        ),
        monthsShort: 'ÑÐ½Ð²_ÑÐµÐ²_Ð¼Ð°ÑÑ_Ð°Ð¿Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³_ÑÐµÐ½_Ð¾ÐºÑ_Ð½Ð¾Ñ_Ð´ÐµÐº'.split(
            '_'
        ),
        weekdays: 'ÐÐµÐºÑÐµÐ¼Ð±Ð¸_ÐÒ¯Ð¹ÑÓ©Ð¼Ð±Ò¯_Ð¨ÐµÐ¹ÑÐµÐ¼Ð±Ð¸_Ð¨Ð°ÑÑÐµÐ¼Ð±Ð¸_ÐÐµÐ¹ÑÐµÐ¼Ð±Ð¸_ÐÑÐ¼Ð°_ÐÑÐµÐ¼Ð±Ð¸'.split(
            '_'
        ),
        weekdaysShort: 'ÐÐµÐº_ÐÒ¯Ð¹_Ð¨ÐµÐ¹_Ð¨Ð°Ñ_ÐÐµÐ¹_ÐÑÐ¼_ÐÑÐµ'.split('_'),
        weekdaysMin: 'ÐÐº_ÐÐ¹_Ð¨Ð¹_Ð¨Ñ_ÐÐ¹_ÐÐ¼_ÐÑ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[ÐÒ¯Ð³Ò¯Ð½ ÑÐ°Ð°Ñ] LT',
            nextDay: '[Ð­ÑÑÐµÒ£ ÑÐ°Ð°Ñ] LT',
            nextWeek: 'dddd [ÑÐ°Ð°Ñ] LT',
            lastDay: '[ÐÐµÑÑÑ ÑÐ°Ð°Ñ] LT',
            lastWeek: '[Ó¨ÑÐºÓ©Ð½ Ð°Ð¿ÑÐ°Ð½ÑÐ½] dddd [ÐºÒ¯Ð½Ò¯] [ÑÐ°Ð°Ñ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s Ð¸ÑÐ¸Ð½Ð´Ðµ',
            past: '%s Ð¼ÑÑÑÐ½',
            s: 'Ð±Ð¸ÑÐ½ÐµÑÐµ ÑÐµÐºÑÐ½Ð´',
            ss: '%d ÑÐµÐºÑÐ½Ð´',
            m: 'Ð±Ð¸Ñ Ð¼Ò¯Ð½Ó©Ñ',
            mm: '%d Ð¼Ò¯Ð½Ó©Ñ',
            h: 'Ð±Ð¸Ñ ÑÐ°Ð°Ñ',
            hh: '%d ÑÐ°Ð°Ñ',
            d: 'Ð±Ð¸Ñ ÐºÒ¯Ð½',
            dd: '%d ÐºÒ¯Ð½',
            M: 'Ð±Ð¸Ñ Ð°Ð¹',
            MM: '%d Ð°Ð¹',
            y: 'Ð±Ð¸Ñ Ð¶ÑÐ»',
            yy: '%d Ð¶ÑÐ»',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ÑÐ¸|ÑÑ|ÑÒ¯|ÑÑ)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return ky;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lb.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lb.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Luxembourgish [lb]
//! author : mweimerskirch : https://github.com/mweimerskirch
//! author : David Raison : https://github.com/kwisatz

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            m: ['eng Minutt', 'enger Minutt'],
            h: ['eng Stonn', 'enger Stonn'],
            d: ['een Dag', 'engem Dag'],
            M: ['ee Mount', 'engem Mount'],
            y: ['ee Joer', 'engem Joer'],
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }
    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'a ' + string;
        }
        return 'an ' + string;
    }
    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'viru ' + string;
        }
        return 'virun ' + string;
    }
    /**
     * Returns true if the word before the given number loses the '-n' ending.
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
     *
     * @param number {integer}
     * @returns {boolean}
     */
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
            return false;
        }
        if (number < 0) {
            // Negative Number --> always true
            return true;
        } else if (number < 10) {
            // Only 1 digit
            if (4 <= number && number <= 7) {
                return true;
            }
            return false;
        } else if (number < 100) {
            // 2 digits
            var lastDigit = number % 10,
                firstDigit = number / 10;
            if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
            }
            return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
            // 3 or 4 digits --> recursively check first digit
            while (number >= 10) {
                number = number / 10;
            }
            return eifelerRegelAppliesToNumber(number);
        } else {
            // Anything larger than 4 digits: recursively check first n-3 digits
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
        }
    }

    var lb = moment.defineLocale('lb', {
        months: 'Januar_Februar_MÃ¤erz_AbrÃ«ll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split(
            '_'
        ),
        monthsShort:
            'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'Sonndeg_MÃ©indeg_DÃ«nschdeg_MÃ«ttwoch_Donneschdeg_Freideg_Samschdeg'.split(
                '_'
            ),
        weekdaysShort: 'So._MÃ©._DÃ«._MÃ«._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_MÃ©_DÃ«_MÃ«_Do_Fr_Sa'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm [Auer]',
            LTS: 'H:mm:ss [Auer]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm [Auer]',
            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]',
        },
        calendar: {
            sameDay: '[Haut um] LT',
            sameElse: 'L',
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[GÃ«schter um] LT',
            lastWeek: function () {
                // Different date string for 'DÃ«nschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                switch (this.day()) {
                    case 2:
                    case 4:
                        return '[Leschten] dddd [um] LT';
                    default:
                        return '[Leschte] dddd [um] LT';
                }
            },
        },
        relativeTime: {
            future: processFutureTime,
            past: processPastTime,
            s: 'e puer Sekonnen',
            ss: '%d Sekonnen',
            m: processRelativeTime,
            mm: '%d Minutten',
            h: processRelativeTime,
            hh: '%d Stonnen',
            d: processRelativeTime,
            dd: '%d Deeg',
            M: processRelativeTime,
            MM: '%d MÃ©int',
            y: processRelativeTime,
            yy: '%d Joer',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return lb;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lo.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lao [lo]
//! author : Ryan Hart : https://github.com/ryanhart2

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var lo = moment.defineLocale('lo', {
        months: 'àº¡àº±àºàºàº­àº_àºàº¸àº¡àºàº²_àº¡àºµàºàº²_à»àº¡àºªàº²_àºàº¶àºàºªàº°àºàº²_àº¡àº´àºàº¸àºàº²_àºà»àº¥àº°àºàº»àº_àºªàº´àºàº«àº²_àºàº±àºàºàº²_àºàº¸àº¥àº²_àºàº°àºàº´àº_àºàº±àºàº§àº²'.split(
            '_'
        ),
        monthsShort:
            'àº¡àº±àºàºàº­àº_àºàº¸àº¡àºàº²_àº¡àºµàºàº²_à»àº¡àºªàº²_àºàº¶àºàºªàº°àºàº²_àº¡àº´àºàº¸àºàº²_àºà»àº¥àº°àºàº»àº_àºªàº´àºàº«àº²_àºàº±àºàºàº²_àºàº¸àº¥àº²_àºàº°àºàº´àº_àºàº±àºàº§àº²'.split(
                '_'
            ),
        weekdays: 'àº­àº²àºàº´àº_àºàº±àº_àº­àº±àºàºàº²àº_àºàº¸àº_àºàº°àº«àº±àº_àºªàº¸àº_à»àºªàº»àº²'.split('_'),
        weekdaysShort: 'àºàº´àº_àºàº±àº_àº­àº±àºàºàº²àº_àºàº¸àº_àºàº°àº«àº±àº_àºªàº¸àº_à»àºªàº»àº²'.split('_'),
        weekdaysMin: 'àº_àº_àº­àº_àº_àºàº«_àºªàº_àºª'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'àº§àº±àºdddd D MMMM YYYY HH:mm',
        },
        meridiemParse: /àºàº­àºà»àºàº»à»àº²|àºàº­àºà»àº¥àº/,
        isPM: function (input) {
            return input === 'àºàº­àºà»àº¥àº';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'àºàº­àºà»àºàº»à»àº²';
            } else {
                return 'àºàº­àºà»àº¥àº';
            }
        },
        calendar: {
            sameDay: '[àº¡àº·à»àºàºµà»à»àº§àº¥àº²] LT',
            nextDay: '[àº¡àº·à»àº­àº·à»àºà»àº§àº¥àº²] LT',
            nextWeek: '[àº§àº±àº]dddd[à»à»àº²à»àº§àº¥àº²] LT',
            lastDay: '[àº¡àº·à»àº§àº²àºàºàºµà»à»àº§àº¥àº²] LT',
            lastWeek: '[àº§àº±àº]dddd[à»àº¥à»àº§àºàºµà»à»àº§àº¥àº²] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'àº­àºµàº %s',
            past: '%sàºà»àº²àºàº¡àº²',
            s: 'àºà»à»à»àºàº»à»àº²à»àºàº§àº´àºàº²àºàºµ',
            ss: '%d àº§àº´àºàº²àºàºµ',
            m: '1 àºàº²àºàºµ',
            mm: '%d àºàº²àºàºµ',
            h: '1 àºàº»à»àº§à»àº¡àº',
            hh: '%d àºàº»à»àº§à»àº¡àº',
            d: '1 àº¡àº·à»',
            dd: '%d àº¡àº·à»',
            M: '1 à»àºàº·àº­àº',
            MM: '%d à»àºàº·àº­àº',
            y: '1 àºàºµ',
            yy: '%d àºàºµ',
        },
        dayOfMonthOrdinalParse: /(àºàºµà»)\d{1,2}/,
        ordinal: function (number) {
            return 'àºàºµà»' + number;
        },
    });

    return lo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lt.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lt.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Lithuanian [lt]
//! author : Mindaugas MozÅ«ras : https://github.com/mmozuras

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var units = {
        ss: 'sekundÄ_sekundÅ¾iÅ³_sekundes',
        m: 'minutÄ_minutÄs_minutÄ',
        mm: 'minutÄs_minuÄiÅ³_minutes',
        h: 'valanda_valandos_valandÄ',
        hh: 'valandos_valandÅ³_valandas',
        d: 'diena_dienos_dienÄ',
        dd: 'dienos_dienÅ³_dienas',
        M: 'mÄnuo_mÄnesio_mÄnesÄ¯',
        MM: 'mÄnesiai_mÄnesiÅ³_mÄnesius',
        y: 'metai_metÅ³_metus',
        yy: 'metai_metÅ³_metus',
    };
    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return 'kelios sekundÄs';
        } else {
            return isFuture ? 'keliÅ³ sekundÅ¾iÅ³' : 'kelias sekundes';
        }
    }
    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix
            ? forms(key)[0]
            : isFuture
            ? forms(key)[1]
            : forms(key)[2];
    }
    function special(number) {
        return number % 10 === 0 || (number > 10 && number < 20);
    }
    function forms(key) {
        return units[key].split('_');
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        if (number === 1) {
            return (
                result + translateSingular(number, withoutSuffix, key[0], isFuture)
            );
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }
    var lt = moment.defineLocale('lt', {
        months: {
            format: 'sausio_vasario_kovo_balandÅ¾io_geguÅ¾Äs_birÅ¾elio_liepos_rugpjÅ«Äio_rugsÄjo_spalio_lapkriÄio_gruodÅ¾io'.split(
                '_'
            ),
            standalone:
                'sausis_vasaris_kovas_balandis_geguÅ¾Ä_birÅ¾elis_liepa_rugpjÅ«tis_rugsÄjis_spalis_lapkritis_gruodis'.split(
                    '_'
                ),
            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/,
        },
        monthsShort: 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
        weekdays: {
            format: 'sekmadienÄ¯_pirmadienÄ¯_antradienÄ¯_treÄiadienÄ¯_ketvirtadienÄ¯_penktadienÄ¯_Å¡eÅ¡tadienÄ¯'.split(
                '_'
            ),
            standalone:
                'sekmadienis_pirmadienis_antradienis_treÄiadienis_ketvirtadienis_penktadienis_Å¡eÅ¡tadienis'.split(
                    '_'
                ),
            isFormat: /dddd HH:mm/,
        },
        weekdaysShort: 'Sek_Pir_Ant_Tre_Ket_Pen_Å eÅ¡'.split('_'),
        weekdaysMin: 'S_P_A_T_K_Pn_Å '.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY [m.] MMMM D [d.]',
            LLL: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            LLLL: 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
            l: 'YYYY-MM-DD',
            ll: 'YYYY [m.] MMMM D [d.]',
            lll: 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            llll: 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]',
        },
        calendar: {
            sameDay: '[Å iandien] LT',
            nextDay: '[Rytoj] LT',
            nextWeek: 'dddd LT',
            lastDay: '[Vakar] LT',
            lastWeek: '[PraÄjusÄ¯] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'po %s',
            past: 'prieÅ¡ %s',
            s: translateSeconds,
            ss: translate,
            m: translateSingular,
            mm: translate,
            h: translateSingular,
            hh: translate,
            d: translateSingular,
            dd: translate,
            M: translateSingular,
            MM: translate,
            y: translateSingular,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}-oji/,
        ordinal: function (number) {
            return number + '-oji';
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return lt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/lv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/lv.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Latvian [lv]
//! author : Kristaps Karlsons : https://github.com/skakri
//! author : JÄnis Elmeris : https://github.com/JanisE

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var units = {
        ss: 'sekundes_sekundÄm_sekunde_sekundes'.split('_'),
        m: 'minÅ«tes_minÅ«tÄm_minÅ«te_minÅ«tes'.split('_'),
        mm: 'minÅ«tes_minÅ«tÄm_minÅ«te_minÅ«tes'.split('_'),
        h: 'stundas_stundÄm_stunda_stundas'.split('_'),
        hh: 'stundas_stundÄm_stunda_stundas'.split('_'),
        d: 'dienas_dienÄm_diena_dienas'.split('_'),
        dd: 'dienas_dienÄm_diena_dienas'.split('_'),
        M: 'mÄneÅ¡a_mÄneÅ¡iem_mÄnesis_mÄneÅ¡i'.split('_'),
        MM: 'mÄneÅ¡a_mÄneÅ¡iem_mÄnesis_mÄneÅ¡i'.split('_'),
        y: 'gada_gadiem_gads_gadi'.split('_'),
        yy: 'gada_gadiem_gads_gadi'.split('_'),
    };
    /**
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
     */
    function format(forms, number, withoutSuffix) {
        if (withoutSuffix) {
            // E.g. "21 minÅ«te", "3 minÅ«tes".
            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
        } else {
            // E.g. "21 minÅ«tes" as in "pÄc 21 minÅ«tes".
            // E.g. "3 minÅ«tÄm" as in "pÄc 3 minÅ«tÄm".
            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
        }
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + format(units[key], number, withoutSuffix);
    }
    function relativeTimeWithSingular(number, withoutSuffix, key) {
        return format(units[key], number, withoutSuffix);
    }
    function relativeSeconds(number, withoutSuffix) {
        return withoutSuffix ? 'daÅ¾as sekundes' : 'daÅ¾Äm sekundÄm';
    }

    var lv = moment.defineLocale('lv', {
        months: 'janvÄris_februÄris_marts_aprÄ«lis_maijs_jÅ«nijs_jÅ«lijs_augusts_septembris_oktobris_novembris_decembris'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_mai_jÅ«n_jÅ«l_aug_sep_okt_nov_dec'.split('_'),
        weekdays:
            'svÄtdiena_pirmdiena_otrdiena_treÅ¡diena_ceturtdiena_piektdiena_sestdiena'.split(
                '_'
            ),
        weekdaysShort: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysMin: 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY.',
            LL: 'YYYY. [gada] D. MMMM',
            LLL: 'YYYY. [gada] D. MMMM, HH:mm',
            LLLL: 'YYYY. [gada] D. MMMM, dddd, HH:mm',
        },
        calendar: {
            sameDay: '[Å odien pulksten] LT',
            nextDay: '[RÄ«t pulksten] LT',
            nextWeek: 'dddd [pulksten] LT',
            lastDay: '[Vakar pulksten] LT',
            lastWeek: '[PagÄjuÅ¡Ä] dddd [pulksten] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'pÄc %s',
            past: 'pirms %s',
            s: relativeSeconds,
            ss: relativeTimeWithPlural,
            m: relativeTimeWithSingular,
            mm: relativeTimeWithPlural,
            h: relativeTimeWithSingular,
            hh: relativeTimeWithPlural,
            d: relativeTimeWithSingular,
            dd: relativeTimeWithPlural,
            M: relativeTimeWithSingular,
            MM: relativeTimeWithPlural,
            y: relativeTimeWithSingular,
            yy: relativeTimeWithPlural,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return lv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/me.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/me.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Montenegrin [me]
//! author : Miodrag NikaÄ <miodrag@restartit.me> : https://github.com/miodragnikac

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var translator = {
        words: {
            //Different grammatical cases
            ss: ['sekund', 'sekunda', 'sekundi'],
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mjesec', 'mjeseca', 'mjeseci'],
            yy: ['godina', 'godine', 'godina'],
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1
                ? wordKey[0]
                : number >= 2 && number <= 4
                ? wordKey[1]
                : wordKey[2];
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return (
                    number +
                    ' ' +
                    translator.correctGrammaticalCase(number, wordKey)
                );
            }
        },
    };

    var me = moment.defineLocale('me', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_Äetvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sri._Äet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_Äe_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sjutra u] LT',

            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juÄe u] LT',
            lastWeek: function () {
                var lastWeekDays = [
                    '[proÅ¡le] [nedjelje] [u] LT',
                    '[proÅ¡log] [ponedjeljka] [u] LT',
                    '[proÅ¡log] [utorka] [u] LT',
                    '[proÅ¡le] [srijede] [u] LT',
                    '[proÅ¡log] [Äetvrtka] [u] LT',
                    '[proÅ¡log] [petka] [u] LT',
                    '[proÅ¡le] [subote] [u] LT',
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'prije %s',
            s: 'nekoliko sekundi',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: 'dan',
            dd: translator.translate,
            M: 'mjesec',
            MM: translator.translate,
            y: 'godinu',
            yy: translator.translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return me;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mi.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maori [mi]
//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var mi = moment.defineLocale('mi', {
        months: 'Kohi-tÄte_Hui-tanguru_PoutÅ«-te-rangi_Paenga-whÄwhÄ_Haratua_Pipiri_HÅngoingoi_Here-turi-kÅkÄ_Mahuru_Whiringa-Ä-nuku_Whiringa-Ä-rangi_Hakihea'.split(
            '_'
        ),
        monthsShort:
            'Kohi_Hui_Pou_Pae_Hara_Pipi_HÅngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split(
                '_'
            ),
        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
        weekdays: 'RÄtapu_Mane_TÅ«rei_Wenerei_TÄite_Paraire_HÄtarei'.split('_'),
        weekdaysShort: 'Ta_Ma_TÅ«_We_TÄi_Pa_HÄ'.split('_'),
        weekdaysMin: 'Ta_Ma_TÅ«_We_TÄi_Pa_HÄ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [i] HH:mm',
            LLLL: 'dddd, D MMMM YYYY [i] HH:mm',
        },
        calendar: {
            sameDay: '[i teie mahana, i] LT',
            nextDay: '[apopo i] LT',
            nextWeek: 'dddd [i] LT',
            lastDay: '[inanahi i] LT',
            lastWeek: 'dddd [whakamutunga i] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'i roto i %s',
            past: '%s i mua',
            s: 'te hÄkona ruarua',
            ss: '%d hÄkona',
            m: 'he meneti',
            mm: '%d meneti',
            h: 'te haora',
            hh: '%d haora',
            d: 'he ra',
            dd: '%d ra',
            M: 'he marama',
            MM: '%d marama',
            y: 'he tau',
            yy: '%d tau',
        },
        dayOfMonthOrdinalParse: /\d{1,2}Âº/,
        ordinal: '%dÂº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return mi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mk.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Macedonian [mk]
//! author : Borislav Mickov : https://github.com/B0k0
//! author : Sashko Todorov : https://github.com/bkyceh

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var mk = moment.defineLocale('mk', {
        months: 'ÑÐ°Ð½ÑÐ°ÑÐ¸_ÑÐµÐ²ÑÑÐ°ÑÐ¸_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐ¸Ð»_Ð¼Ð°Ñ_ÑÑÐ½Ð¸_ÑÑÐ»Ð¸_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸_Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸_Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸_Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸'.split(
            '_'
        ),
        monthsShort: 'ÑÐ°Ð½_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ñ_ÑÑÐ½_ÑÑÐ»_Ð°Ð²Ð³_ÑÐµÐ¿_Ð¾ÐºÑ_Ð½Ð¾Ðµ_Ð´ÐµÐº'.split('_'),
        weekdays: 'Ð½ÐµÐ´ÐµÐ»Ð°_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÐµÐ´Ð°_ÑÐµÑÐ²ÑÑÐ¾Ðº_Ð¿ÐµÑÐ¾Ðº_ÑÐ°Ð±Ð¾ÑÐ°'.split(
            '_'
        ),
        weekdaysShort: 'Ð½ÐµÐ´_Ð¿Ð¾Ð½_Ð²ÑÐ¾_ÑÑÐµ_ÑÐµÑ_Ð¿ÐµÑ_ÑÐ°Ð±'.split('_'),
        weekdaysMin: 'Ð½e_Ð¿o_Ð²Ñ_ÑÑ_ÑÐµ_Ð¿Ðµ_Ña'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[ÐÐµÐ½ÐµÑ Ð²Ð¾] LT',
            nextDay: '[Ð£ÑÑÐµ Ð²Ð¾] LT',
            nextWeek: '[ÐÐ¾] dddd [Ð²Ð¾] LT',
            lastDay: '[ÐÑÐµÑÐ° Ð²Ð¾] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[ÐÐ·Ð¼Ð¸Ð½Ð°ÑÐ°ÑÐ°] dddd [Ð²Ð¾] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[ÐÐ·Ð¼Ð¸Ð½Ð°ÑÐ¸Ð¾Ñ] dddd [Ð²Ð¾] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Ð·Ð° %s',
            past: 'Ð¿ÑÐµÐ´ %s',
            s: 'Ð½ÐµÐºÐ¾Ð»ÐºÑ ÑÐµÐºÑÐ½Ð´Ð¸',
            ss: '%d ÑÐµÐºÑÐ½Ð´Ð¸',
            m: 'ÐµÐ´Ð½Ð° Ð¼Ð¸Ð½ÑÑÐ°',
            mm: '%d Ð¼Ð¸Ð½ÑÑÐ¸',
            h: 'ÐµÐ´ÐµÐ½ ÑÐ°Ñ',
            hh: '%d ÑÐ°ÑÐ°',
            d: 'ÐµÐ´ÐµÐ½ Ð´ÐµÐ½',
            dd: '%d Ð´ÐµÐ½Ð°',
            M: 'ÐµÐ´ÐµÐ½ Ð¼ÐµÑÐµÑ',
            MM: '%d Ð¼ÐµÑÐµÑÐ¸',
            y: 'ÐµÐ´Ð½Ð° Ð³Ð¾Ð´Ð¸Ð½Ð°',
            yy: '%d Ð³Ð¾Ð´Ð¸Ð½Ð¸',
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ÐµÐ²|ÐµÐ½|ÑÐ¸|Ð²Ð¸|ÑÐ¸|Ð¼Ð¸)/,
        ordinal: function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ÐµÐ²';
            } else if (last2Digits === 0) {
                return number + '-ÐµÐ½';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ÑÐ¸';
            } else if (lastDigit === 1) {
                return number + '-Ð²Ð¸';
            } else if (lastDigit === 2) {
                return number + '-ÑÐ¸';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-Ð¼Ð¸';
            } else {
                return number + '-ÑÐ¸';
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return mk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ml.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ml.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malayalam [ml]
//! author : Floyd Pink : https://github.com/floydpink

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ml = moment.defineLocale('ml', {
        months: 'à´à´¨àµà´µà´°à´¿_à´«àµà´¬àµà´°àµà´µà´°à´¿_à´®à´¾àµ¼à´àµà´àµ_à´à´ªàµà´°à´¿àµ½_à´®àµà´¯àµ_à´àµàµº_à´àµà´²àµ_à´à´à´¸àµà´±àµà´±àµ_à´¸àµà´ªàµà´±àµà´±à´à´¬àµ¼_à´à´àµà´àµà´¬àµ¼_à´¨à´µà´à´¬àµ¼_à´¡à´¿à´¸à´à´¬àµ¼'.split(
            '_'
        ),
        monthsShort:
            'à´à´¨àµ._à´«àµà´¬àµà´°àµ._à´®à´¾àµ¼._à´à´ªàµà´°à´¿._à´®àµà´¯àµ_à´àµàµº_à´àµà´²àµ._à´à´._à´¸àµà´ªàµà´±àµà´±._à´à´àµà´àµ._à´¨à´µà´._à´¡à´¿à´¸à´.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'à´à´¾à´¯à´±à´¾à´´àµà´_à´¤à´¿à´àµà´à´³à´¾à´´àµà´_à´àµà´µàµà´µà´¾à´´àµà´_à´¬àµà´§à´¨à´¾à´´àµà´_à´µàµà´¯à´¾à´´à´¾à´´àµà´_à´µàµà´³àµà´³à´¿à´¯à´¾à´´àµà´_à´¶à´¨à´¿à´¯à´¾à´´àµà´'.split(
                '_'
            ),
        weekdaysShort: 'à´à´¾à´¯àµ¼_à´¤à´¿à´àµà´àµ¾_à´àµà´µàµà´µ_à´¬àµà´§àµ»_à´µàµà´¯à´¾à´´à´_à´µàµà´³àµà´³à´¿_à´¶à´¨à´¿'.split('_'),
        weekdaysMin: 'à´à´¾_à´¤à´¿_à´àµ_à´¬àµ_à´µàµà´¯à´¾_à´µàµ_à´¶'.split('_'),
        longDateFormat: {
            LT: 'A h:mm -à´¨àµ',
            LTS: 'A h:mm:ss -à´¨àµ',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm -à´¨àµ',
            LLLL: 'dddd, D MMMM YYYY, A h:mm -à´¨àµ',
        },
        calendar: {
            sameDay: '[à´à´¨àµà´¨àµ] LT',
            nextDay: '[à´¨à´¾à´³àµ] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[à´à´¨àµà´¨à´²àµ] LT',
            lastWeek: '[à´à´´à´¿à´àµà´] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s à´à´´à´¿à´àµà´àµ',
            past: '%s à´®àµàµ»à´ªàµ',
            s: 'à´àµ½à´ª à´¨à´¿à´®à´¿à´·à´àµà´àµ¾',
            ss: '%d à´¸àµà´àµà´àµ»à´¡àµ',
            m: 'à´à´°àµ à´®à´¿à´¨à´¿à´±àµà´±àµ',
            mm: '%d à´®à´¿à´¨à´¿à´±àµà´±àµ',
            h: 'à´à´°àµ à´®à´£à´¿à´àµà´àµàµ¼',
            hh: '%d à´®à´£à´¿à´àµà´àµàµ¼',
            d: 'à´à´°àµ à´¦à´¿à´µà´¸à´',
            dd: '%d à´¦à´¿à´µà´¸à´',
            M: 'à´à´°àµ à´®à´¾à´¸à´',
            MM: '%d à´®à´¾à´¸à´',
            y: 'à´à´°àµ à´µàµ¼à´·à´',
            yy: '%d à´µàµ¼à´·à´',
        },
        meridiemParse: /à´°à´¾à´¤àµà´°à´¿|à´°à´¾à´µà´¿à´²àµ|à´à´àµà´ à´à´´à´¿à´àµà´àµ|à´µàµà´àµà´¨àµà´¨àµà´°à´|à´°à´¾à´¤àµà´°à´¿/i,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                (meridiem === 'à´°à´¾à´¤àµà´°à´¿' && hour >= 4) ||
                meridiem === 'à´à´àµà´ à´à´´à´¿à´àµà´àµ' ||
                meridiem === 'à´µàµà´àµà´¨àµà´¨àµà´°à´'
            ) {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'à´°à´¾à´¤àµà´°à´¿';
            } else if (hour < 12) {
                return 'à´°à´¾à´µà´¿à´²àµ';
            } else if (hour < 17) {
                return 'à´à´àµà´ à´à´´à´¿à´àµà´àµ';
            } else if (hour < 20) {
                return 'à´µàµà´àµà´¨àµà´¨àµà´°à´';
            } else {
                return 'à´°à´¾à´¤àµà´°à´¿';
            }
        },
    });

    return ml;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mn.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Mongolian [mn]
//! author : Javkhlantugs Nyamdorj : https://github.com/javkhaanj7

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function translate(number, withoutSuffix, key, isFuture) {
        switch (key) {
            case 's':
                return withoutSuffix ? 'ÑÑÐ´ÑÑÐ½ ÑÐµÐºÑÐ½Ð´' : 'ÑÑÐ´ÑÑÐ½ ÑÐµÐºÑÐ½Ð´ÑÐ½';
            case 'ss':
                return number + (withoutSuffix ? ' ÑÐµÐºÑÐ½Ð´' : ' ÑÐµÐºÑÐ½Ð´ÑÐ½');
            case 'm':
            case 'mm':
                return number + (withoutSuffix ? ' Ð¼Ð¸Ð½ÑÑ' : ' Ð¼Ð¸Ð½ÑÑÑÐ½');
            case 'h':
            case 'hh':
                return number + (withoutSuffix ? ' ÑÐ°Ð³' : ' ÑÐ°Ð³Ð¸Ð¹Ð½');
            case 'd':
            case 'dd':
                return number + (withoutSuffix ? ' Ó©Ð´Ó©Ñ' : ' Ó©Ð´ÑÐ¸Ð¹Ð½');
            case 'M':
            case 'MM':
                return number + (withoutSuffix ? ' ÑÐ°Ñ' : ' ÑÐ°ÑÑÐ½');
            case 'y':
            case 'yy':
                return number + (withoutSuffix ? ' Ð¶Ð¸Ð»' : ' Ð¶Ð¸Ð»Ð¸Ð¹Ð½');
            default:
                return number;
        }
    }

    var mn = moment.defineLocale('mn', {
        months: 'ÐÑÐ³Ð´Ò¯Ð³ÑÑÑ ÑÐ°Ñ_Ð¥Ð¾ÑÑÐ´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ_ÐÑÑÐ°Ð²Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ_ÐÓ©ÑÓ©Ð²Ð´Ò¯Ð³ÑÑÑ ÑÐ°Ñ_Ð¢Ð°Ð²Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ_ÐÑÑÐ³Ð°Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ_ÐÐ¾Ð»Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ_ÐÐ°Ð¹Ð¼Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ_ÐÑÐ´Ò¯Ð³ÑÑÑ ÑÐ°Ñ_ÐÑÐ°Ð²Ð´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ_ÐÑÐ²Ð°Ð½ Ð½ÑÐ³Ð´Ò¯Ð³ÑÑÑ ÑÐ°Ñ_ÐÑÐ²Ð°Ð½ ÑÐ¾ÑÑÐ´ÑÐ³Ð°Ð°Ñ ÑÐ°Ñ'.split(
            '_'
        ),
        monthsShort:
            '1 ÑÐ°Ñ_2 ÑÐ°Ñ_3 ÑÐ°Ñ_4 ÑÐ°Ñ_5 ÑÐ°Ñ_6 ÑÐ°Ñ_7 ÑÐ°Ñ_8 ÑÐ°Ñ_9 ÑÐ°Ñ_10 ÑÐ°Ñ_11 ÑÐ°Ñ_12 ÑÐ°Ñ'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'ÐÑÐ¼_ÐÐ°Ð²Ð°Ð°_ÐÑÐ³Ð¼Ð°Ñ_ÐÑÐ°Ð³Ð²Ð°_ÐÒ¯ÑÑÐ²_ÐÐ°Ð°ÑÐ°Ð½_ÐÑÐ¼Ð±Ð°'.split('_'),
        weekdaysShort: 'ÐÑÐ¼_ÐÐ°Ð²_ÐÑÐ³_ÐÑÐ°_ÐÒ¯Ñ_ÐÐ°Ð°_ÐÑÐ¼'.split('_'),
        weekdaysMin: 'ÐÑ_ÐÐ°_ÐÑ_ÐÑ_ÐÒ¯_ÐÐ°_ÐÑ'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY Ð¾Ð½Ñ MMMMÑÐ½ D',
            LLL: 'YYYY Ð¾Ð½Ñ MMMMÑÐ½ D HH:mm',
            LLLL: 'dddd, YYYY Ð¾Ð½Ñ MMMMÑÐ½ D HH:mm',
        },
        meridiemParse: /Ò®Ó¨|Ò®Ð¥/i,
        isPM: function (input) {
            return input === 'Ò®Ð¥';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'Ò®Ó¨';
            } else {
                return 'Ò®Ð¥';
            }
        },
        calendar: {
            sameDay: '[Ó¨Ð½Ó©Ó©Ð´Ó©Ñ] LT',
            nextDay: '[ÐÐ°ÑÐ³Ð°Ð°Ñ] LT',
            nextWeek: '[ÐÑÑÑ] dddd LT',
            lastDay: '[Ó¨ÑÐ¸Ð³Ð´Ó©Ñ] LT',
            lastWeek: '[Ó¨Ð½Ð³Ó©ÑÑÓ©Ð½] dddd LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s Ð´Ð°ÑÐ°Ð°',
            past: '%s Ó©Ð¼Ð½Ó©',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2} Ó©Ð´Ó©Ñ/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + ' Ó©Ð´Ó©Ñ';
                default:
                    return number;
            }
        },
    });

    return mn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mr.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Marathi [mr]
//! author : Harshad Kale : https://github.com/kalehv
//! author : Vivek Athalye : https://github.com/vnathalye

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'à¥§',
            2: 'à¥¨',
            3: 'à¥©',
            4: 'à¥ª',
            5: 'à¥«',
            6: 'à¥¬',
            7: 'à¥­',
            8: 'à¥®',
            9: 'à¥¯',
            0: 'à¥¦',
        },
        numberMap = {
            'à¥§': '1',
            'à¥¨': '2',
            'à¥©': '3',
            'à¥ª': '4',
            'à¥«': '5',
            'à¥¬': '6',
            'à¥­': '7',
            'à¥®': '8',
            'à¥¯': '9',
            'à¥¦': '0',
        };

    function relativeTimeMr(number, withoutSuffix, string, isFuture) {
        var output = '';
        if (withoutSuffix) {
            switch (string) {
                case 's':
                    output = 'à¤à¤¾à¤¹à¥ à¤¸à¥à¤à¤à¤¦';
                    break;
                case 'ss':
                    output = '%d à¤¸à¥à¤à¤à¤¦';
                    break;
                case 'm':
                    output = 'à¤à¤ à¤®à¤¿à¤¨à¤¿à¤';
                    break;
                case 'mm':
                    output = '%d à¤®à¤¿à¤¨à¤¿à¤à¥';
                    break;
                case 'h':
                    output = 'à¤à¤ à¤¤à¤¾à¤¸';
                    break;
                case 'hh':
                    output = '%d à¤¤à¤¾à¤¸';
                    break;
                case 'd':
                    output = 'à¤à¤ à¤¦à¤¿à¤µà¤¸';
                    break;
                case 'dd':
                    output = '%d à¤¦à¤¿à¤µà¤¸';
                    break;
                case 'M':
                    output = 'à¤à¤ à¤®à¤¹à¤¿à¤¨à¤¾';
                    break;
                case 'MM':
                    output = '%d à¤®à¤¹à¤¿à¤¨à¥';
                    break;
                case 'y':
                    output = 'à¤à¤ à¤µà¤°à¥à¤·';
                    break;
                case 'yy':
                    output = '%d à¤µà¤°à¥à¤·à¥';
                    break;
            }
        } else {
            switch (string) {
                case 's':
                    output = 'à¤à¤¾à¤¹à¥ à¤¸à¥à¤à¤à¤¦à¤¾à¤';
                    break;
                case 'ss':
                    output = '%d à¤¸à¥à¤à¤à¤¦à¤¾à¤';
                    break;
                case 'm':
                    output = 'à¤à¤à¤¾ à¤®à¤¿à¤¨à¤¿à¤à¤¾';
                    break;
                case 'mm':
                    output = '%d à¤®à¤¿à¤¨à¤¿à¤à¤¾à¤';
                    break;
                case 'h':
                    output = 'à¤à¤à¤¾ à¤¤à¤¾à¤¸à¤¾';
                    break;
                case 'hh':
                    output = '%d à¤¤à¤¾à¤¸à¤¾à¤';
                    break;
                case 'd':
                    output = 'à¤à¤à¤¾ à¤¦à¤¿à¤µà¤¸à¤¾';
                    break;
                case 'dd':
                    output = '%d à¤¦à¤¿à¤µà¤¸à¤¾à¤';
                    break;
                case 'M':
                    output = 'à¤à¤à¤¾ à¤®à¤¹à¤¿à¤¨à¥à¤¯à¤¾';
                    break;
                case 'MM':
                    output = '%d à¤®à¤¹à¤¿à¤¨à¥à¤¯à¤¾à¤';
                    break;
                case 'y':
                    output = 'à¤à¤à¤¾ à¤µà¤°à¥à¤·à¤¾';
                    break;
                case 'yy':
                    output = '%d à¤µà¤°à¥à¤·à¤¾à¤';
                    break;
            }
        }
        return output.replace(/%d/i, number);
    }

    var mr = moment.defineLocale('mr', {
        months: 'à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥_à¤«à¥à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥_à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¤¿à¤²_à¤®à¥_à¤à¥à¤¨_à¤à¥à¤²à¥_à¤à¤à¤¸à¥à¤_à¤¸à¤ªà¥à¤à¥à¤à¤¬à¤°_à¤à¤à¥à¤à¥à¤¬à¤°_à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°_à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°'.split(
            '_'
        ),
        monthsShort:
            'à¤à¤¾à¤¨à¥._à¤«à¥à¤¬à¥à¤°à¥._à¤®à¤¾à¤°à¥à¤._à¤à¤ªà¥à¤°à¤¿._à¤®à¥._à¤à¥à¤¨._à¤à¥à¤²à¥._à¤à¤._à¤¸à¤ªà¥à¤à¥à¤._à¤à¤à¥à¤à¥._à¤¨à¥à¤µà¥à¤¹à¥à¤._à¤¡à¤¿à¤¸à¥à¤.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'à¤°à¤µà¤¿à¤µà¤¾à¤°_à¤¸à¥à¤®à¤µà¤¾à¤°_à¤®à¤à¤à¤³à¤µà¤¾à¤°_à¤¬à¥à¤§à¤µà¤¾à¤°_à¤à¥à¤°à¥à¤µà¤¾à¤°_à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°_à¤¶à¤¨à¤¿à¤µà¤¾à¤°'.split('_'),
        weekdaysShort: 'à¤°à¤µà¤¿_à¤¸à¥à¤®_à¤®à¤à¤à¤³_à¤¬à¥à¤§_à¤à¥à¤°à¥_à¤¶à¥à¤à¥à¤°_à¤¶à¤¨à¤¿'.split('_'),
        weekdaysMin: 'à¤°_à¤¸à¥_à¤®à¤_à¤¬à¥_à¤à¥_à¤¶à¥_à¤¶'.split('_'),
        longDateFormat: {
            LT: 'A h:mm à¤µà¤¾à¤à¤¤à¤¾',
            LTS: 'A h:mm:ss à¤µà¤¾à¤à¤¤à¤¾',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm à¤µà¤¾à¤à¤¤à¤¾',
            LLLL: 'dddd, D MMMM YYYY, A h:mm à¤µà¤¾à¤à¤¤à¤¾',
        },
        calendar: {
            sameDay: '[à¤à¤] LT',
            nextDay: '[à¤à¤¦à¥à¤¯à¤¾] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[à¤à¤¾à¤²] LT',
            lastWeek: '[à¤®à¤¾à¤à¥à¤²] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sà¤®à¤§à¥à¤¯à¥',
            past: '%sà¤ªà¥à¤°à¥à¤µà¥',
            s: relativeTimeMr,
            ss: relativeTimeMr,
            m: relativeTimeMr,
            mm: relativeTimeMr,
            h: relativeTimeMr,
            hh: relativeTimeMr,
            d: relativeTimeMr,
            dd: relativeTimeMr,
            M: relativeTimeMr,
            MM: relativeTimeMr,
            y: relativeTimeMr,
            yy: relativeTimeMr,
        },
        preparse: function (string) {
            return string.replace(/[à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯à¥¦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /à¤ªà¤¹à¤¾à¤à¥|à¤¸à¤à¤¾à¤³à¥|à¤¦à¥à¤ªà¤¾à¤°à¥|à¤¸à¤¾à¤¯à¤à¤à¤¾à¤³à¥|à¤°à¤¾à¤¤à¥à¤°à¥/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'à¤ªà¤¹à¤¾à¤à¥' || meridiem === 'à¤¸à¤à¤¾à¤³à¥') {
                return hour;
            } else if (
                meridiem === 'à¤¦à¥à¤ªà¤¾à¤°à¥' ||
                meridiem === 'à¤¸à¤¾à¤¯à¤à¤à¤¾à¤³à¥' ||
                meridiem === 'à¤°à¤¾à¤¤à¥à¤°à¥'
            ) {
                return hour >= 12 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour >= 0 && hour < 6) {
                return 'à¤ªà¤¹à¤¾à¤à¥';
            } else if (hour < 12) {
                return 'à¤¸à¤à¤¾à¤³à¥';
            } else if (hour < 17) {
                return 'à¤¦à¥à¤ªà¤¾à¤°à¥';
            } else if (hour < 20) {
                return 'à¤¸à¤¾à¤¯à¤à¤à¤¾à¤³à¥';
            } else {
                return 'à¤°à¤¾à¤¤à¥à¤°à¥';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return mr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ms-my.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ms-my.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms-my]
//! note : DEPRECATED, the correct one is [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var msMy = moment.defineLocale('ms-my', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            ss: '%d saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return msMy;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ms.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ms.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Malay [ms]
//! author : Weldan Jamili : https://github.com/weldan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ms = moment.defineLocale('ms', {
        months: 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays: 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort: 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin: 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [pukul] HH.mm',
            LLLL: 'dddd, D MMMM YYYY [pukul] HH.mm',
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar: {
            sameDay: '[Hari ini pukul] LT',
            nextDay: '[Esok pukul] LT',
            nextWeek: 'dddd [pukul] LT',
            lastDay: '[Kelmarin pukul] LT',
            lastWeek: 'dddd [lepas pukul] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dalam %s',
            past: '%s yang lepas',
            s: 'beberapa saat',
            ss: '%d saat',
            m: 'seminit',
            mm: '%d minit',
            h: 'sejam',
            hh: '%d jam',
            d: 'sehari',
            dd: '%d hari',
            M: 'sebulan',
            MM: '%d bulan',
            y: 'setahun',
            yy: '%d tahun',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return ms;

})));


/***/ }),

/***/ "./node_modules/moment/locale/mt.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/mt.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Maltese (Malta) [mt]
//! author : Alessandro Maruccia : https://github.com/alesma

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var mt = moment.defineLocale('mt', {
        months: 'Jannar_Frar_Marzu_April_Mejju_Ä unju_Lulju_Awwissu_Settembru_Ottubru_Novembru_DiÄembru'.split(
            '_'
        ),
        monthsShort: 'Jan_Fra_Mar_Apr_Mej_Ä un_Lul_Aww_Set_Ott_Nov_DiÄ'.split('_'),
        weekdays:
            'Il-Ä¦add_It-Tnejn_It-Tlieta_L-ErbgÄ§a_Il-Ä¦amis_Il-Ä imgÄ§a_Is-Sibt'.split(
                '_'
            ),
        weekdaysShort: 'Ä¦ad_Tne_Tli_Erb_Ä¦am_Ä im_Sib'.split('_'),
        weekdaysMin: 'Ä¦a_Tn_Tl_Er_Ä¦a_Ä i_Si'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Illum fil-]LT',
            nextDay: '[GÄ§ada fil-]LT',
            nextWeek: 'dddd [fil-]LT',
            lastDay: '[Il-bieraÄ§ fil-]LT',
            lastWeek: 'dddd [li gÄ§adda] [fil-]LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'fâ %s',
            past: '%s ilu',
            s: 'ftit sekondi',
            ss: '%d sekondi',
            m: 'minuta',
            mm: '%d minuti',
            h: 'siegÄ§a',
            hh: '%d siegÄ§at',
            d: 'Ä¡urnata',
            dd: '%d Ä¡ranet',
            M: 'xahar',
            MM: '%d xhur',
            y: 'sena',
            yy: '%d sni',
        },
        dayOfMonthOrdinalParse: /\d{1,2}Âº/,
        ordinal: '%dÂº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return mt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/my.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/my.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Burmese [my]
//! author : Squar team, mysquar.com
//! author : David Rossellat : https://github.com/gholadr
//! author : Tin Aung Lin : https://github.com/thanyawzinmin

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'á',
            2: 'á',
            3: 'á',
            4: 'á',
            5: 'á',
            6: 'á',
            7: 'á',
            8: 'á',
            9: 'á',
            0: 'á',
        },
        numberMap = {
            'á': '1',
            'á': '2',
            'á': '3',
            'á': '4',
            'á': '5',
            'á': '6',
            'á': '7',
            'á': '8',
            'á': '9',
            'á': '0',
        };

    var my = moment.defineLocale('my', {
        months: 'áááºááá«áá®_áá±áá±á¬áºáá«áá®_áááº_á§áá¼á®_áá±_áá½ááº_áá°áá­á¯ááº_áá¼áá¯ááº_áááºáááºáá¬_á¡á±á¬ááºáá­á¯áá¬_áá­á¯áááºáá¬_áá®áááºáá¬'.split(
            '_'
        ),
        monthsShort: 'áááº_áá±_áááº_áá¼á®_áá±_áá½ááº_áá­á¯ááº_áá¼_áááº_á¡á±á¬ááº_áá­á¯_áá®'.split('_'),
        weekdays: 'ááááºá¹ááá½á±_ááááºá¹áá¬_á¡ááºá¹áá«_áá¯áá¹ááá°á¸_áá¼á¬áááá±á¸_áá±á¬áá¼á¬_ááá±'.split(
            '_'
        ),
        weekdaysShort: 'áá½á±_áá¬_áá«_áá°á¸_áá¼á¬_áá±á¬_áá±'.split('_'),
        weekdaysMin: 'áá½á±_áá¬_áá«_áá°á¸_áá¼á¬_áá±á¬_áá±'.split('_'),

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[ááá±.] LT [áá¾á¬]',
            nextDay: '[ááááºáá¼ááº] LT [áá¾á¬]',
            nextWeek: 'dddd LT [áá¾á¬]',
            lastDay: '[ááá±.á] LT [áá¾á¬]',
            lastWeek: '[áá¼á®á¸áá²á·áá±á¬] dddd LT [áá¾á¬]',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'áá¬áááºá· %s áá¾á¬',
            past: 'áá½ááºáá²á·áá±á¬ %s á',
            s: 'ááá¹áááº.á¡áááºá¸áááº',
            ss: '%d ááá¹ááá·áº',
            m: 'áááºáá­áááº',
            mm: '%d áá­áááº',
            h: 'áááºáá¬áá®',
            hh: '%d áá¬áá®',
            d: 'áááºáááº',
            dd: '%d áááº',
            M: 'áááºá',
            MM: '%d á',
            y: 'áááºáá¾ááº',
            yy: '%d áá¾ááº',
        },
        preparse: function (string) {
            return string.replace(/[áááááááááá]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return my;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nb.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/nb.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Norwegian BokmÃ¥l [nb]
//! authors : Espen Hovlandsdal : https://github.com/rexxars
//!           Sigurd Gartmann : https://github.com/sigurdga
//!           Stephen Ramthun : https://github.com/stephenramthun

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var nb = moment.defineLocale('nb', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
        monthsParseExact: true,
        weekdays: 'sÃ¸ndag_mandag_tirsdag_onsdag_torsdag_fredag_lÃ¸rdag'.split('_'),
        weekdaysShort: 'sÃ¸._ma._ti._on._to._fr._lÃ¸.'.split('_'),
        weekdaysMin: 'sÃ¸_ma_ti_on_to_fr_lÃ¸'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] HH:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
        },
        calendar: {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i gÃ¥r kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: '%s siden',
            s: 'noen sekunder',
            ss: '%d sekunder',
            m: 'ett minutt',
            mm: '%d minutter',
            h: 'en time',
            hh: '%d timer',
            d: 'en dag',
            dd: '%d dager',
            w: 'en uke',
            ww: '%d uker',
            M: 'en mÃ¥ned',
            MM: '%d mÃ¥neder',
            y: 'ett Ã¥r',
            yy: '%d Ã¥r',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nb;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ne.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ne.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nepalese [ne]
//! author : suvash : https://github.com/suvash

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'à¥§',
            2: 'à¥¨',
            3: 'à¥©',
            4: 'à¥ª',
            5: 'à¥«',
            6: 'à¥¬',
            7: 'à¥­',
            8: 'à¥®',
            9: 'à¥¯',
            0: 'à¥¦',
        },
        numberMap = {
            'à¥§': '1',
            'à¥¨': '2',
            'à¥©': '3',
            'à¥ª': '4',
            'à¥«': '5',
            'à¥¬': '6',
            'à¥­': '7',
            'à¥®': '8',
            'à¥¯': '9',
            'à¥¦': '0',
        };

    var ne = moment.defineLocale('ne', {
        months: 'à¤à¤¨à¤µà¤°à¥_à¤«à¥à¤¬à¥à¤°à¥à¤µà¤°à¥_à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¤¿à¤²_à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²à¤¾à¤_à¤à¤à¤·à¥à¤_à¤¸à¥à¤ªà¥à¤à¥à¤®à¥à¤¬à¤°_à¤à¤à¥à¤à¥à¤¬à¤°_à¤¨à¥à¤­à¥à¤®à¥à¤¬à¤°_à¤¡à¤¿à¤¸à¥à¤®à¥à¤¬à¤°'.split(
            '_'
        ),
        monthsShort:
            'à¤à¤¨._à¤«à¥à¤¬à¥à¤°à¥._à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¤¿._à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²à¤¾à¤._à¤à¤._à¤¸à¥à¤ªà¥à¤._à¤à¤à¥à¤à¥._à¤¨à¥à¤­à¥._à¤¡à¤¿à¤¸à¥.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'à¤à¤à¤¤à¤¬à¤¾à¤°_à¤¸à¥à¤®à¤¬à¤¾à¤°_à¤®à¤à¥à¤à¤²à¤¬à¤¾à¤°_à¤¬à¥à¤§à¤¬à¤¾à¤°_à¤¬à¤¿à¤¹à¤¿à¤¬à¤¾à¤°_à¤¶à¥à¤à¥à¤°à¤¬à¤¾à¤°_à¤¶à¤¨à¤¿à¤¬à¤¾à¤°'.split(
            '_'
        ),
        weekdaysShort: 'à¤à¤à¤¤._à¤¸à¥à¤®._à¤®à¤à¥à¤à¤²._à¤¬à¥à¤§._à¤¬à¤¿à¤¹à¤¿._à¤¶à¥à¤à¥à¤°._à¤¶à¤¨à¤¿.'.split('_'),
        weekdaysMin: 'à¤._à¤¸à¥._à¤®à¤._à¤¬à¥._à¤¬à¤¿._à¤¶à¥._à¤¶.'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'Aà¤à¥ h:mm à¤¬à¤à¥',
            LTS: 'Aà¤à¥ h:mm:ss à¤¬à¤à¥',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, Aà¤à¥ h:mm à¤¬à¤à¥',
            LLLL: 'dddd, D MMMM YYYY, Aà¤à¥ h:mm à¤¬à¤à¥',
        },
        preparse: function (string) {
            return string.replace(/[à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯à¥¦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /à¤°à¤¾à¤¤à¤¿|à¤¬à¤¿à¤¹à¤¾à¤¨|à¤¦à¤¿à¤à¤à¤¸à¥|à¤¸à¤¾à¤à¤/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'à¤°à¤¾à¤¤à¤¿') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'à¤¬à¤¿à¤¹à¤¾à¤¨') {
                return hour;
            } else if (meridiem === 'à¤¦à¤¿à¤à¤à¤¸à¥') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'à¤¸à¤¾à¤à¤') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 3) {
                return 'à¤°à¤¾à¤¤à¤¿';
            } else if (hour < 12) {
                return 'à¤¬à¤¿à¤¹à¤¾à¤¨';
            } else if (hour < 16) {
                return 'à¤¦à¤¿à¤à¤à¤¸à¥';
            } else if (hour < 20) {
                return 'à¤¸à¤¾à¤à¤';
            } else {
                return 'à¤°à¤¾à¤¤à¤¿';
            }
        },
        calendar: {
            sameDay: '[à¤à¤] LT',
            nextDay: '[à¤­à¥à¤²à¤¿] LT',
            nextWeek: '[à¤à¤à¤à¤¦à¥] dddd[,] LT',
            lastDay: '[à¤¹à¤¿à¤à¥] LT',
            lastWeek: '[à¤à¤à¤à¥] dddd[,] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sà¤®à¤¾',
            past: '%s à¤à¤à¤¾à¤¡à¤¿',
            s: 'à¤à¥à¤¹à¥ à¤à¥à¤·à¤£',
            ss: '%d à¤¸à¥à¤à¥à¤£à¥à¤¡',
            m: 'à¤à¤ à¤®à¤¿à¤¨à¥à¤',
            mm: '%d à¤®à¤¿à¤¨à¥à¤',
            h: 'à¤à¤ à¤à¤£à¥à¤à¤¾',
            hh: '%d à¤à¤£à¥à¤à¤¾',
            d: 'à¤à¤ à¤¦à¤¿à¤¨',
            dd: '%d à¤¦à¤¿à¤¨',
            M: 'à¤à¤ à¤®à¤¹à¤¿à¤¨à¤¾',
            MM: '%d à¤®à¤¹à¤¿à¤¨à¤¾',
            y: 'à¤à¤ à¤¬à¤°à¥à¤·',
            yy: '%d à¤¬à¤°à¥à¤·',
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return ne;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nl-be.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/nl-be.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch (Belgium) [nl-be]
//! author : Joris RÃ¶ling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots =
            'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsShortWithoutDots =
            'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        monthsParse = [
            /^jan/i,
            /^feb/i,
            /^maart|mrt.?$/i,
            /^apr/i,
            /^mei$/i,
            /^jun[i.]?$/i,
            /^jul[i.]?$/i,
            /^aug/i,
            /^sep/i,
            /^okt/i,
            /^nov/i,
            /^dec/i,
        ],
        monthsRegex =
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nlBe = moment.defineLocale('nl-be', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex:
            /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        weekdays:
            'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            ss: '%d seconden',
            m: 'Ã©Ã©n minuut',
            mm: '%d minuten',
            h: 'Ã©Ã©n uur',
            hh: '%d uur',
            d: 'Ã©Ã©n dag',
            dd: '%d dagen',
            M: 'Ã©Ã©n maand',
            MM: '%d maanden',
            y: 'Ã©Ã©n jaar',
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nlBe;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/nl.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Dutch [nl]
//! author : Joris RÃ¶ling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsShortWithDots =
            'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsShortWithoutDots =
            'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        monthsParse = [
            /^jan/i,
            /^feb/i,
            /^maart|mrt.?$/i,
            /^apr/i,
            /^mei$/i,
            /^jun[i.]?$/i,
            /^jul[i.]?$/i,
            /^aug/i,
            /^sep/i,
            /^okt/i,
            /^nov/i,
            /^dec/i,
        ],
        monthsRegex =
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nl = moment.defineLocale('nl', {
        months: 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex:
            /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex:
            /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        weekdays:
            'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort: 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin: 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD-MM-YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'over %s',
            past: '%s geleden',
            s: 'een paar seconden',
            ss: '%d seconden',
            m: 'Ã©Ã©n minuut',
            mm: '%d minuten',
            h: 'Ã©Ã©n uur',
            hh: '%d uur',
            d: 'Ã©Ã©n dag',
            dd: '%d dagen',
            w: 'Ã©Ã©n week',
            ww: '%d weken',
            M: 'Ã©Ã©n maand',
            MM: '%d maanden',
            y: 'Ã©Ã©n jaar',
            yy: '%d jaar',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal: function (number) {
            return (
                number +
                (number === 1 || number === 8 || number >= 20 ? 'ste' : 'de')
            );
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/nn.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/nn.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Nynorsk [nn]
//! authors : https://github.com/mechuwind
//!           Stephen Ramthun : https://github.com/stephenramthun

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var nn = moment.defineLocale('nn', {
        months: 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
        monthsParseExact: true,
        weekdays: 'sundag_mÃ¥ndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
        weekdaysShort: 'su._mÃ¥._ty._on._to._fr._lau.'.split('_'),
        weekdaysMin: 'su_mÃ¥_ty_on_to_fr_la'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY [kl.] H:mm',
            LLLL: 'dddd D. MMMM YYYY [kl.] HH:mm',
        },
        calendar: {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I gÃ¥r klokka] LT',
            lastWeek: '[FÃ¸regÃ¥ande] dddd [klokka] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: '%s sidan',
            s: 'nokre sekund',
            ss: '%d sekund',
            m: 'eit minutt',
            mm: '%d minutt',
            h: 'ein time',
            hh: '%d timar',
            d: 'ein dag',
            dd: '%d dagar',
            w: 'ei veke',
            ww: '%d veker',
            M: 'ein mÃ¥nad',
            MM: '%d mÃ¥nader',
            y: 'eit Ã¥r',
            yy: '%d Ã¥r',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return nn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/oc-lnc.js":
/*!**********************************************!*\
  !*** ./node_modules/moment/locale/oc-lnc.js ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Occitan, lengadocian dialecte [oc-lnc]
//! author : Quentin PAGÃS : https://github.com/Quenty31

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ocLnc = moment.defineLocale('oc-lnc', {
        months: {
            standalone:
                'geniÃ¨r_febriÃ¨r_marÃ§_abril_mai_junh_julhet_agost_setembre_octÃ²bre_novembre_decembre'.split(
                    '_'
                ),
            format: "de geniÃ¨r_de febriÃ¨r_de marÃ§_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octÃ²bre_de novembre_de decembre".split(
                '_'
            ),
            isFormat: /D[oD]?(\s)+MMMM/,
        },
        monthsShort:
            'gen._febr._marÃ§_abr._mai_junh_julh._ago._set._oct._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'dimenge_diluns_dimars_dimÃ¨cres_dijÃ²us_divendres_dissabte'.split(
            '_'
        ),
        weekdaysShort: 'dg._dl._dm._dc._dj._dv._ds.'.split('_'),
        weekdaysMin: 'dg_dl_dm_dc_dj_dv_ds'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [de] YYYY',
            ll: 'D MMM YYYY',
            LLL: 'D MMMM [de] YYYY [a] H:mm',
            lll: 'D MMM YYYY, H:mm',
            LLLL: 'dddd D MMMM [de] YYYY [a] H:mm',
            llll: 'ddd D MMM YYYY, H:mm',
        },
        calendar: {
            sameDay: '[uÃ¨i a] LT',
            nextDay: '[deman a] LT',
            nextWeek: 'dddd [a] LT',
            lastDay: '[iÃ¨r a] LT',
            lastWeek: 'dddd [passat a] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: "d'aquÃ­ %s",
            past: 'fa %s',
            s: 'unas segondas',
            ss: '%d segondas',
            m: 'una minuta',
            mm: '%d minutas',
            h: 'una ora',
            hh: '%d oras',
            d: 'un jorn',
            dd: '%d jorns',
            M: 'un mes',
            MM: '%d meses',
            y: 'un an',
            yy: '%d ans',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|Ã¨|a)/,
        ordinal: function (number, period) {
            var output =
                number === 1
                    ? 'r'
                    : number === 2
                    ? 'n'
                    : number === 3
                    ? 'r'
                    : number === 4
                    ? 't'
                    : 'Ã¨';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4,
        },
    });

    return ocLnc;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pa-in.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/pa-in.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Punjabi (India) [pa-in]
//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'à©§',
            2: 'à©¨',
            3: 'à©©',
            4: 'à©ª',
            5: 'à©«',
            6: 'à©¬',
            7: 'à©­',
            8: 'à©®',
            9: 'à©¯',
            0: 'à©¦',
        },
        numberMap = {
            'à©§': '1',
            'à©¨': '2',
            'à©©': '3',
            'à©ª': '4',
            'à©«': '5',
            'à©¬': '6',
            'à©­': '7',
            'à©®': '8',
            'à©¯': '9',
            'à©¦': '0',
        };

    var paIn = moment.defineLocale('pa-in', {
        // There are months name as per Nanakshahi Calendar but they are not used as rigidly in modern Punjabi.
        months: 'à¨à¨¨à¨µà¨°à©_à¨«à¨¼à¨°à¨µà¨°à©_à¨®à¨¾à¨°à¨_à¨à¨ªà©à¨°à©à¨²_à¨®à¨_à¨à©à¨¨_à¨à©à¨²à¨¾à¨_à¨à¨à¨¸à¨¤_à¨¸à¨¤à©°à¨¬à¨°_à¨à¨à¨¤à©à¨¬à¨°_à¨¨à¨µà©°à¨¬à¨°_à¨¦à¨¸à©°à¨¬à¨°'.split(
            '_'
        ),
        monthsShort:
            'à¨à¨¨à¨µà¨°à©_à¨«à¨¼à¨°à¨µà¨°à©_à¨®à¨¾à¨°à¨_à¨à¨ªà©à¨°à©à¨²_à¨®à¨_à¨à©à¨¨_à¨à©à¨²à¨¾à¨_à¨à¨à¨¸à¨¤_à¨¸à¨¤à©°à¨¬à¨°_à¨à¨à¨¤à©à¨¬à¨°_à¨¨à¨µà©°à¨¬à¨°_à¨¦à¨¸à©°à¨¬à¨°'.split(
                '_'
            ),
        weekdays: 'à¨à¨¤à¨µà¨¾à¨°_à¨¸à©à¨®à¨µà¨¾à¨°_à¨®à©°à¨à¨²à¨µà¨¾à¨°_à¨¬à©à¨§à¨µà¨¾à¨°_à¨µà©à¨°à¨µà¨¾à¨°_à¨¸à¨¼à©à©±à¨à¨°à¨µà¨¾à¨°_à¨¸à¨¼à¨¨à©à¨à¨°à¨µà¨¾à¨°'.split(
            '_'
        ),
        weekdaysShort: 'à¨à¨¤_à¨¸à©à¨®_à¨®à©°à¨à¨²_à¨¬à©à¨§_à¨µà©à¨°_à¨¸à¨¼à©à¨à¨°_à¨¸à¨¼à¨¨à©'.split('_'),
        weekdaysMin: 'à¨à¨¤_à¨¸à©à¨®_à¨®à©°à¨à¨²_à¨¬à©à¨§_à¨µà©à¨°_à¨¸à¨¼à©à¨à¨°_à¨¸à¨¼à¨¨à©'.split('_'),
        longDateFormat: {
            LT: 'A h:mm à¨µà¨à©',
            LTS: 'A h:mm:ss à¨µà¨à©',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm à¨µà¨à©',
            LLLL: 'dddd, D MMMM YYYY, A h:mm à¨µà¨à©',
        },
        calendar: {
            sameDay: '[à¨à¨] LT',
            nextDay: '[à¨à¨²] LT',
            nextWeek: '[à¨à¨à¨²à¨¾] dddd, LT',
            lastDay: '[à¨à¨²] LT',
            lastWeek: '[à¨ªà¨¿à¨à¨²à©] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s à¨µà¨¿à©±à¨',
            past: '%s à¨ªà¨¿à¨à¨²à©',
            s: 'à¨à©à¨ à¨¸à¨à¨¿à©°à¨',
            ss: '%d à¨¸à¨à¨¿à©°à¨',
            m: 'à¨à¨ à¨®à¨¿à©°à¨',
            mm: '%d à¨®à¨¿à©°à¨',
            h: 'à¨à©±à¨ à¨à©°à¨à¨¾',
            hh: '%d à¨à©°à¨à©',
            d: 'à¨à©±à¨ à¨¦à¨¿à¨¨',
            dd: '%d à¨¦à¨¿à¨¨',
            M: 'à¨à©±à¨ à¨®à¨¹à©à¨¨à¨¾',
            MM: '%d à¨®à¨¹à©à¨¨à©',
            y: 'à¨à©±à¨ à¨¸à¨¾à¨²',
            yy: '%d à¨¸à¨¾à¨²',
        },
        preparse: function (string) {
            return string.replace(/[à©§à©¨à©©à©ªà©«à©¬à©­à©®à©¯à©¦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
        meridiemParse: /à¨°à¨¾à¨¤|à¨¸à¨µà©à¨°|à¨¦à©à¨ªà¨¹à¨¿à¨°|à¨¸à¨¼à¨¾à¨®/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'à¨°à¨¾à¨¤') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'à¨¸à¨µà©à¨°') {
                return hour;
            } else if (meridiem === 'à¨¦à©à¨ªà¨¹à¨¿à¨°') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'à¨¸à¨¼à¨¾à¨®') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'à¨°à¨¾à¨¤';
            } else if (hour < 10) {
                return 'à¨¸à¨µà©à¨°';
            } else if (hour < 17) {
                return 'à¨¦à©à¨ªà¨¹à¨¿à¨°';
            } else if (hour < 20) {
                return 'à¨¸à¨¼à¨¾à¨®';
            } else {
                return 'à¨°à¨¾à¨¤';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return paIn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/pl.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Polish [pl]
//! author : Rafal Hirsz : https://github.com/evoL

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var monthsNominative =
            'styczeÅ_luty_marzec_kwiecieÅ_maj_czerwiec_lipiec_sierpieÅ_wrzesieÅ_paÅºdziernik_listopad_grudzieÅ'.split(
                '_'
            ),
        monthsSubjective =
            'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_wrzeÅnia_paÅºdziernika_listopada_grudnia'.split(
                '_'
            ),
        monthsParse = [
            /^sty/i,
            /^lut/i,
            /^mar/i,
            /^kwi/i,
            /^maj/i,
            /^cze/i,
            /^lip/i,
            /^sie/i,
            /^wrz/i,
            /^paÅº/i,
            /^lis/i,
            /^gru/i,
        ];
    function plural(n) {
        return n % 10 < 5 && n % 10 > 1 && ~~(n / 10) % 10 !== 1;
    }
    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                return result + (plural(number) ? 'sekundy' : 'sekund');
            case 'm':
                return withoutSuffix ? 'minuta' : 'minutÄ';
            case 'mm':
                return result + (plural(number) ? 'minuty' : 'minut');
            case 'h':
                return withoutSuffix ? 'godzina' : 'godzinÄ';
            case 'hh':
                return result + (plural(number) ? 'godziny' : 'godzin');
            case 'ww':
                return result + (plural(number) ? 'tygodnie' : 'tygodni');
            case 'MM':
                return result + (plural(number) ? 'miesiÄce' : 'miesiÄcy');
            case 'yy':
                return result + (plural(number) ? 'lata' : 'lat');
        }
    }

    var pl = moment.defineLocale('pl', {
        months: function (momentToFormat, format) {
            if (!momentToFormat) {
                return monthsNominative;
            } else if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort: 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paÅº_lis_gru'.split('_'),
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays:
            'niedziela_poniedziaÅek_wtorek_Åroda_czwartek_piÄtek_sobota'.split('_'),
        weekdaysShort: 'ndz_pon_wt_År_czw_pt_sob'.split('_'),
        weekdaysMin: 'Nd_Pn_Wt_År_Cz_Pt_So'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[DziÅ o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W niedzielÄ o] LT';

                    case 2:
                        return '[We wtorek o] LT';

                    case 3:
                        return '[W ÅrodÄ o] LT';

                    case 6:
                        return '[W sobotÄ o] LT';

                    default:
                        return '[W] dddd [o] LT';
                }
            },
            lastDay: '[Wczoraj o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W zeszÅÄ niedzielÄ o] LT';
                    case 3:
                        return '[W zeszÅÄ ÅrodÄ o] LT';
                    case 6:
                        return '[W zeszÅÄ sobotÄ o] LT';
                    default:
                        return '[W zeszÅy] dddd [o] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: '%s temu',
            s: 'kilka sekund',
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: '1 dzieÅ',
            dd: '%d dni',
            w: 'tydzieÅ',
            ww: translate,
            M: 'miesiÄc',
            MM: translate,
            y: 'rok',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return pl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pt-br.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/pt-br.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese (Brazil) [pt-br]
//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ptBr = moment.defineLocale('pt-br', {
        months: 'janeiro_fevereiro_marÃ§o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
            '_'
        ),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays:
            'domingo_segunda-feira_terÃ§a-feira_quarta-feira_quinta-feira_sexta-feira_sÃ¡bado'.split(
                '_'
            ),
        weekdaysShort: 'dom_seg_ter_qua_qui_sex_sÃ¡b'.split('_'),
        weekdaysMin: 'do_2Âª_3Âª_4Âª_5Âª_6Âª_sÃ¡'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY [Ã s] HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY [Ã s] HH:mm',
        },
        calendar: {
            sameDay: '[Hoje Ã s] LT',
            nextDay: '[AmanhÃ£ Ã s] LT',
            nextWeek: 'dddd [Ã s] LT',
            lastDay: '[Ontem Ã s] LT',
            lastWeek: function () {
                return this.day() === 0 || this.day() === 6
                    ? '[Ãltimo] dddd [Ã s] LT' // Saturday + Sunday
                    : '[Ãltima] dddd [Ã s] LT'; // Monday - Friday
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'em %s',
            past: 'hÃ¡ %s',
            s: 'poucos segundos',
            ss: '%d segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            M: 'um mÃªs',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos',
        },
        dayOfMonthOrdinalParse: /\d{1,2}Âº/,
        ordinal: '%dÂº',
        invalidDate: 'Data invÃ¡lida',
    });

    return ptBr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/pt.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/pt.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Portuguese [pt]
//! author : Jefferson : https://github.com/jalex79

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var pt = moment.defineLocale('pt', {
        months: 'janeiro_fevereiro_marÃ§o_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split(
            '_'
        ),
        monthsShort: 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays:
            'Domingo_Segunda-feira_TerÃ§a-feira_Quarta-feira_Quinta-feira_Sexta-feira_SÃ¡bado'.split(
                '_'
            ),
        weekdaysShort: 'Dom_Seg_Ter_Qua_Qui_Sex_SÃ¡b'.split('_'),
        weekdaysMin: 'Do_2Âª_3Âª_4Âª_5Âª_6Âª_SÃ¡'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D [de] MMMM [de] YYYY',
            LLL: 'D [de] MMMM [de] YYYY HH:mm',
            LLLL: 'dddd, D [de] MMMM [de] YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Hoje Ã s] LT',
            nextDay: '[AmanhÃ£ Ã s] LT',
            nextWeek: 'dddd [Ã s] LT',
            lastDay: '[Ontem Ã s] LT',
            lastWeek: function () {
                return this.day() === 0 || this.day() === 6
                    ? '[Ãltimo] dddd [Ã s] LT' // Saturday + Sunday
                    : '[Ãltima] dddd [Ã s] LT'; // Monday - Friday
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'em %s',
            past: 'hÃ¡ %s',
            s: 'segundos',
            ss: '%d segundos',
            m: 'um minuto',
            mm: '%d minutos',
            h: 'uma hora',
            hh: '%d horas',
            d: 'um dia',
            dd: '%d dias',
            w: 'uma semana',
            ww: '%d semanas',
            M: 'um mÃªs',
            MM: '%d meses',
            y: 'um ano',
            yy: '%d anos',
        },
        dayOfMonthOrdinalParse: /\d{1,2}Âº/,
        ordinal: '%dÂº',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return pt;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ro.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ro.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Romanian [ro]
//! author : Vlad Gurdiga : https://github.com/gurdiga
//! author : Valentin Agachi : https://github.com/avaly
//! author : Emanuel Cepoi : https://github.com/cepem

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
                ss: 'secunde',
                mm: 'minute',
                hh: 'ore',
                dd: 'zile',
                ww: 'sÄptÄmÃ¢ni',
                MM: 'luni',
                yy: 'ani',
            },
            separator = ' ';
        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
            separator = ' de ';
        }
        return number + separator + format[key];
    }

    var ro = moment.defineLocale('ro', {
        months: 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split(
            '_'
        ),
        monthsShort:
            'ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'duminicÄ_luni_marÈi_miercuri_joi_vineri_sÃ¢mbÄtÄ'.split('_'),
        weekdaysShort: 'Dum_Lun_Mar_Mie_Joi_Vin_SÃ¢m'.split('_'),
        weekdaysMin: 'Du_Lu_Ma_Mi_Jo_Vi_SÃ¢'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY H:mm',
            LLLL: 'dddd, D MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[azi la] LT',
            nextDay: '[mÃ¢ine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'peste %s',
            past: '%s Ã®n urmÄ',
            s: 'cÃ¢teva secunde',
            ss: relativeTimeWithPlural,
            m: 'un minut',
            mm: relativeTimeWithPlural,
            h: 'o orÄ',
            hh: relativeTimeWithPlural,
            d: 'o zi',
            dd: relativeTimeWithPlural,
            w: 'o sÄptÄmÃ¢nÄ',
            ww: relativeTimeWithPlural,
            M: 'o lunÄ',
            MM: relativeTimeWithPlural,
            y: 'un an',
            yy: relativeTimeWithPlural,
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return ro;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ru.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ru.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Russian [ru]
//! author : Viktorminator : https://github.com/Viktorminator
//! author : Menelion ElensÃºle : https://github.com/Oire
//! author : ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³ ÐÐ°ÑÐº : https://github.com/socketpair

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11
            ? forms[0]
            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
            ? forms[1]
            : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            ss: withoutSuffix ? 'ÑÐµÐºÑÐ½Ð´Ð°_ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´' : 'ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´',
            mm: withoutSuffix ? 'Ð¼Ð¸Ð½ÑÑÐ°_Ð¼Ð¸Ð½ÑÑÑ_Ð¼Ð¸Ð½ÑÑ' : 'Ð¼Ð¸Ð½ÑÑÑ_Ð¼Ð¸Ð½ÑÑÑ_Ð¼Ð¸Ð½ÑÑ',
            hh: 'ÑÐ°Ñ_ÑÐ°ÑÐ°_ÑÐ°ÑÐ¾Ð²',
            dd: 'Ð´ÐµÐ½Ñ_Ð´Ð½Ñ_Ð´Ð½ÐµÐ¹',
            ww: 'Ð½ÐµÐ´ÐµÐ»Ñ_Ð½ÐµÐ´ÐµÐ»Ð¸_Ð½ÐµÐ´ÐµÐ»Ñ',
            MM: 'Ð¼ÐµÑÑÑ_Ð¼ÐµÑÑÑÐ°_Ð¼ÐµÑÑÑÐµÐ²',
            yy: 'Ð³Ð¾Ð´_Ð³Ð¾Ð´Ð°_Ð»ÐµÑ',
        };
        if (key === 'm') {
            return withoutSuffix ? 'Ð¼Ð¸Ð½ÑÑÐ°' : 'Ð¼Ð¸Ð½ÑÑÑ';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    var monthsParse = [
        /^ÑÐ½Ð²/i,
        /^ÑÐµÐ²/i,
        /^Ð¼Ð°Ñ/i,
        /^Ð°Ð¿Ñ/i,
        /^Ð¼Ð°[Ð¹Ñ]/i,
        /^Ð¸ÑÐ½/i,
        /^Ð¸ÑÐ»/i,
        /^Ð°Ð²Ð³/i,
        /^ÑÐµÐ½/i,
        /^Ð¾ÐºÑ/i,
        /^Ð½Ð¾Ñ/i,
        /^Ð´ÐµÐº/i,
    ];

    // http://new.gramota.ru/spravka/rules/139-prop : Â§ 103
    // Ð¡Ð¾ÐºÑÐ°ÑÐµÐ½Ð¸Ñ Ð¼ÐµÑÑÑÐµÐ²: http://new.gramota.ru/spravka/buro/search-answer?s=242637
    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
    var ru = moment.defineLocale('ru', {
        months: {
            format: 'ÑÐ½Ð²Ð°ÑÑ_ÑÐµÐ²ÑÐ°Ð»Ñ_Ð¼Ð°ÑÑÐ°_Ð°Ð¿ÑÐµÐ»Ñ_Ð¼Ð°Ñ_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³ÑÑÑÐ°_ÑÐµÐ½ÑÑÐ±ÑÑ_Ð¾ÐºÑÑÐ±ÑÑ_Ð½Ð¾ÑÐ±ÑÑ_Ð´ÐµÐºÐ°Ð±ÑÑ'.split(
                '_'
            ),
            standalone:
                'ÑÐ½Ð²Ð°ÑÑ_ÑÐµÐ²ÑÐ°Ð»Ñ_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐµÐ»Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ½ÑÑÐ±ÑÑ_Ð¾ÐºÑÑÐ±ÑÑ_Ð½Ð¾ÑÐ±ÑÑ_Ð´ÐµÐºÐ°Ð±ÑÑ'.split(
                    '_'
                ),
        },
        monthsShort: {
            // Ð¿Ð¾ CLDR Ð¸Ð¼ÐµÐ½Ð½Ð¾ "Ð¸ÑÐ»." Ð¸ "Ð¸ÑÐ½.", Ð½Ð¾ ÐºÐ°ÐºÐ¾Ð¹ ÑÐ¼ÑÑÐ» Ð¼ÐµÐ½ÑÑÑ Ð±ÑÐºÐ²Ñ Ð½Ð° ÑÐ¾ÑÐºÑ?
            format: 'ÑÐ½Ð²._ÑÐµÐ²Ñ._Ð¼Ð°Ñ._Ð°Ð¿Ñ._Ð¼Ð°Ñ_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³._ÑÐµÐ½Ñ._Ð¾ÐºÑ._Ð½Ð¾ÑÐ±._Ð´ÐµÐº.'.split(
                '_'
            ),
            standalone:
                'ÑÐ½Ð²._ÑÐµÐ²Ñ._Ð¼Ð°ÑÑ_Ð°Ð¿Ñ._Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³._ÑÐµÐ½Ñ._Ð¾ÐºÑ._Ð½Ð¾ÑÐ±._Ð´ÐµÐº.'.split(
                    '_'
                ),
        },
        weekdays: {
            standalone:
                'Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÐµÐ´Ð°_ÑÐµÑÐ²ÐµÑÐ³_Ð¿ÑÑÐ½Ð¸ÑÐ°_ÑÑÐ±Ð±Ð¾ÑÐ°'.split(
                    '_'
                ),
            format: 'Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÐµÐ´Ñ_ÑÐµÑÐ²ÐµÑÐ³_Ð¿ÑÑÐ½Ð¸ÑÑ_ÑÑÐ±Ð±Ð¾ÑÑ'.split(
                '_'
            ),
            isFormat: /\[ ?[ÐÐ²] ?(?:Ð¿ÑÐ¾ÑÐ»ÑÑ|ÑÐ»ÐµÐ´ÑÑÑÑÑ|ÑÑÑ)? ?] ?dddd/,
        },
        weekdaysShort: 'Ð²Ñ_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±'.split('_'),
        weekdaysMin: 'Ð²Ñ_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±'.split('_'),
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,

        // Ð¿Ð¾Ð»Ð½ÑÐµ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ñ Ñ Ð¿Ð°Ð´ÐµÐ¶Ð°Ð¼Ð¸, Ð¿Ð¾ ÑÑÐ¸ Ð±ÑÐºÐ²Ñ, Ð´Ð»Ñ Ð½ÐµÐºÐ¾ÑÐ¾ÑÑÑ, Ð¿Ð¾ 4 Ð±ÑÐºÐ²Ñ, ÑÐ¾ÐºÑÐ°ÑÐµÐ½Ð¸Ñ Ñ ÑÐ¾ÑÐºÐ¾Ð¹ Ð¸ Ð±ÐµÐ· ÑÐ¾ÑÐºÐ¸
        monthsRegex:
            /^(ÑÐ½Ð²Ð°Ñ[ÑÑ]|ÑÐ½Ð²\.?|ÑÐµÐ²ÑÐ°Ð»[ÑÑ]|ÑÐµÐ²Ñ?\.?|Ð¼Ð°ÑÑÐ°?|Ð¼Ð°Ñ\.?|Ð°Ð¿ÑÐµÐ»[ÑÑ]|Ð°Ð¿Ñ\.?|Ð¼Ð°[Ð¹Ñ]|Ð¸ÑÐ½[ÑÑ]|Ð¸ÑÐ½\.?|Ð¸ÑÐ»[ÑÑ]|Ð¸ÑÐ»\.?|Ð°Ð²Ð³ÑÑÑÐ°?|Ð°Ð²Ð³\.?|ÑÐµÐ½ÑÑÐ±Ñ[ÑÑ]|ÑÐµÐ½Ñ?\.?|Ð¾ÐºÑÑÐ±Ñ[ÑÑ]|Ð¾ÐºÑ\.?|Ð½Ð¾ÑÐ±Ñ[ÑÑ]|Ð½Ð¾ÑÐ±?\.?|Ð´ÐµÐºÐ°Ð±Ñ[ÑÑ]|Ð´ÐµÐº\.?)/i,

        // ÐºÐ¾Ð¿Ð¸Ñ Ð¿ÑÐµÐ´ÑÐ´ÑÑÐµÐ³Ð¾
        monthsShortRegex:
            /^(ÑÐ½Ð²Ð°Ñ[ÑÑ]|ÑÐ½Ð²\.?|ÑÐµÐ²ÑÐ°Ð»[ÑÑ]|ÑÐµÐ²Ñ?\.?|Ð¼Ð°ÑÑÐ°?|Ð¼Ð°Ñ\.?|Ð°Ð¿ÑÐµÐ»[ÑÑ]|Ð°Ð¿Ñ\.?|Ð¼Ð°[Ð¹Ñ]|Ð¸ÑÐ½[ÑÑ]|Ð¸ÑÐ½\.?|Ð¸ÑÐ»[ÑÑ]|Ð¸ÑÐ»\.?|Ð°Ð²Ð³ÑÑÑÐ°?|Ð°Ð²Ð³\.?|ÑÐµÐ½ÑÑÐ±Ñ[ÑÑ]|ÑÐµÐ½Ñ?\.?|Ð¾ÐºÑÑÐ±Ñ[ÑÑ]|Ð¾ÐºÑ\.?|Ð½Ð¾ÑÐ±Ñ[ÑÑ]|Ð½Ð¾ÑÐ±?\.?|Ð´ÐµÐºÐ°Ð±Ñ[ÑÑ]|Ð´ÐµÐº\.?)/i,

        // Ð¿Ð¾Ð»Ð½ÑÐµ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ñ Ñ Ð¿Ð°Ð´ÐµÐ¶Ð°Ð¼Ð¸
        monthsStrictRegex:
            /^(ÑÐ½Ð²Ð°Ñ[ÑÑ]|ÑÐµÐ²ÑÐ°Ð»[ÑÑ]|Ð¼Ð°ÑÑÐ°?|Ð°Ð¿ÑÐµÐ»[ÑÑ]|Ð¼Ð°[ÑÐ¹]|Ð¸ÑÐ½[ÑÑ]|Ð¸ÑÐ»[ÑÑ]|Ð°Ð²Ð³ÑÑÑÐ°?|ÑÐµÐ½ÑÑÐ±Ñ[ÑÑ]|Ð¾ÐºÑÑÐ±Ñ[ÑÑ]|Ð½Ð¾ÑÐ±Ñ[ÑÑ]|Ð´ÐµÐºÐ°Ð±Ñ[ÑÑ])/i,

        // ÐÑÑÐ°Ð¶ÐµÐ½Ð¸Ðµ, ÐºÐ¾ÑÐ¾ÑÐ¾Ðµ ÑÐ¾Ð¾ÑÐ²ÐµÑÑÑÐ²ÑÐµÑ ÑÐ¾Ð»ÑÐºÐ¾ ÑÐ¾ÐºÑÐ°ÑÑÐ½Ð½ÑÐ¼ ÑÐ¾ÑÐ¼Ð°Ð¼
        monthsShortStrictRegex:
            /^(ÑÐ½Ð²\.|ÑÐµÐ²Ñ?\.|Ð¼Ð°Ñ[Ñ.]|Ð°Ð¿Ñ\.|Ð¼Ð°[ÑÐ¹]|Ð¸ÑÐ½[ÑÑ.]|Ð¸ÑÐ»[ÑÑ.]|Ð°Ð²Ð³\.|ÑÐµÐ½Ñ?\.|Ð¾ÐºÑ\.|Ð½Ð¾ÑÐ±?\.|Ð´ÐµÐº\.)/i,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY Ð³.',
            LLL: 'D MMMM YYYY Ð³., H:mm',
            LLLL: 'dddd, D MMMM YYYY Ð³., H:mm',
        },
        calendar: {
            sameDay: '[Ð¡ÐµÐ³Ð¾Ð´Ð½Ñ, Ð²] LT',
            nextDay: '[ÐÐ°Ð²ÑÑÐ°, Ð²] LT',
            lastDay: '[ÐÑÐµÑÐ°, Ð²] LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[Ð ÑÐ»ÐµÐ´ÑÑÑÐµÐµ] dddd, [Ð²] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[Ð ÑÐ»ÐµÐ´ÑÑÑÐ¸Ð¹] dddd, [Ð²] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[Ð ÑÐ»ÐµÐ´ÑÑÑÑÑ] dddd, [Ð²] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[ÐÐ¾] dddd, [Ð²] LT';
                    } else {
                        return '[Ð] dddd, [Ð²] LT';
                    }
                }
            },
            lastWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[Ð Ð¿ÑÐ¾ÑÐ»Ð¾Ðµ] dddd, [Ð²] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[Ð Ð¿ÑÐ¾ÑÐ»ÑÐ¹] dddd, [Ð²] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[Ð Ð¿ÑÐ¾ÑÐ»ÑÑ] dddd, [Ð²] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[ÐÐ¾] dddd, [Ð²] LT';
                    } else {
                        return '[Ð] dddd, [Ð²] LT';
                    }
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'ÑÐµÑÐµÐ· %s',
            past: '%s Ð½Ð°Ð·Ð°Ð´',
            s: 'Ð½ÐµÑÐºÐ¾Ð»ÑÐºÐ¾ ÑÐµÐºÑÐ½Ð´',
            ss: relativeTimeWithPlural,
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: 'ÑÐ°Ñ',
            hh: relativeTimeWithPlural,
            d: 'Ð´ÐµÐ½Ñ',
            dd: relativeTimeWithPlural,
            w: 'Ð½ÐµÐ´ÐµÐ»Ñ',
            ww: relativeTimeWithPlural,
            M: 'Ð¼ÐµÑÑÑ',
            MM: relativeTimeWithPlural,
            y: 'Ð³Ð¾Ð´',
            yy: relativeTimeWithPlural,
        },
        meridiemParse: /Ð½Ð¾ÑÐ¸|ÑÑÑÐ°|Ð´Ð½Ñ|Ð²ÐµÑÐµÑÐ°/i,
        isPM: function (input) {
            return /^(Ð´Ð½Ñ|Ð²ÐµÑÐµÑÐ°)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'Ð½Ð¾ÑÐ¸';
            } else if (hour < 12) {
                return 'ÑÑÑÐ°';
            } else if (hour < 17) {
                return 'Ð´Ð½Ñ';
            } else {
                return 'Ð²ÐµÑÐµÑÐ°';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(Ð¹|Ð³Ð¾|Ñ)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                    return number + '-Ð¹';
                case 'D':
                    return number + '-Ð³Ð¾';
                case 'w':
                case 'W':
                    return number + '-Ñ';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ru;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sd.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sd.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sindhi [sd]
//! author : Narain Sagar : https://github.com/narainsagar

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'Ø¬ÙÙØ±Ù',
            'ÙÙØ¨Ø±ÙØ±Ù',
            'ÙØ§Ø±Ú',
            'Ø§Ù¾Ø±ÙÙ',
            'ÙØ¦Ù',
            'Ø¬ÙÙ',
            'Ø¬ÙÙØ§Ø¡Ù',
            'Ø¢Ú¯Ø³Ù½',
            'Ø³ÙÙ¾Ù½ÙØ¨Ø±',
            'Ø¢ÚªÙ½ÙØ¨Ø±',
            'ÙÙÙØ¨Ø±',
            'ÚØ³ÙØ¨Ø±',
        ],
        days = ['Ø¢ÚØ±', 'Ø³ÙÙØ±', 'Ø§Ú±Ø§Ø±Ù', 'Ø§Ø±Ø¨Ø¹', 'Ø®ÙÙØ³', 'Ø¬ÙØ¹', 'ÚÙÚØ±'];

    var sd = moment.defineLocale('sd', {
        months: months,
        monthsShort: months,
        weekdays: days,
        weekdaysShort: days,
        weekdaysMin: days,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'ddddØ D MMMM YYYY HH:mm',
        },
        meridiemParse: /ØµØ¨Ø­|Ø´Ø§Ù/,
        isPM: function (input) {
            return 'Ø´Ø§Ù' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ØµØ¨Ø­';
            }
            return 'Ø´Ø§Ù';
        },
        calendar: {
            sameDay: '[Ø§Ú] LT',
            nextDay: '[Ø³ÚØ§Ú»Ù] LT',
            nextWeek: 'dddd [Ø§Ú³ÙÙ ÙÙØªÙ ØªÙ] LT',
            lastDay: '[ÚªØ§ÙÙÙ] LT',
            lastWeek: '[Ú¯Ø²Ø±ÙÙ ÙÙØªÙ] dddd [ØªÙ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s Ù¾ÙØ¡',
            past: '%s Ø§Ú³',
            s: 'ÚÙØ¯ Ø³ÙÚªÙÚ',
            ss: '%d Ø³ÙÚªÙÚ',
            m: 'ÙÚª ÙÙÙ½',
            mm: '%d ÙÙÙ½',
            h: 'ÙÚª ÚªÙØ§Úª',
            hh: '%d ÚªÙØ§Úª',
            d: 'ÙÚª ÚÙÙÙÙ',
            dd: '%d ÚÙÙÙÙ',
            M: 'ÙÚª ÙÙÙÙÙ',
            MM: '%d ÙÙÙÙØ§',
            y: 'ÙÚª Ø³Ø§Ù',
            yy: '%d Ø³Ø§Ù',
        },
        preparse: function (string) {
            return string.replace(/Ø/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, 'Ø');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sd;

})));


/***/ }),

/***/ "./node_modules/moment/locale/se.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/se.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Northern Sami [se]
//! authors : BÃ¥rd Rolstad Henriksen : https://github.com/karamell

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var se = moment.defineLocale('se', {
        months: 'oÄÄajagemÃ¡nnu_guovvamÃ¡nnu_njukÄamÃ¡nnu_cuoÅomÃ¡nnu_miessemÃ¡nnu_geassemÃ¡nnu_suoidnemÃ¡nnu_borgemÃ¡nnu_ÄakÄamÃ¡nnu_golggotmÃ¡nnu_skÃ¡bmamÃ¡nnu_juovlamÃ¡nnu'.split(
            '_'
        ),
        monthsShort:
            'oÄÄj_guov_njuk_cuo_mies_geas_suoi_borg_ÄakÄ_golg_skÃ¡b_juov'.split('_'),
        weekdays:
            'sotnabeaivi_vuossÃ¡rga_maÅÅebÃ¡rga_gaskavahkku_duorastat_bearjadat_lÃ¡vvardat'.split(
                '_'
            ),
        weekdaysShort: 'sotn_vuos_maÅ_gask_duor_bear_lÃ¡v'.split('_'),
        weekdaysMin: 's_v_m_g_d_b_L'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'MMMM D. [b.] YYYY',
            LLL: 'MMMM D. [b.] YYYY [ti.] HH:mm',
            LLLL: 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm',
        },
        calendar: {
            sameDay: '[otne ti] LT',
            nextDay: '[ihttin ti] LT',
            nextWeek: 'dddd [ti] LT',
            lastDay: '[ikte ti] LT',
            lastWeek: '[ovddit] dddd [ti] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s geaÅ¾es',
            past: 'maÅit %s',
            s: 'moadde sekunddat',
            ss: '%d sekunddat',
            m: 'okta minuhta',
            mm: '%d minuhtat',
            h: 'okta diimmu',
            hh: '%d diimmut',
            d: 'okta beaivi',
            dd: '%d beaivvit',
            M: 'okta mÃ¡nnu',
            MM: '%d mÃ¡nut',
            y: 'okta jahki',
            yy: '%d jagit',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return se;

})));


/***/ }),

/***/ "./node_modules/moment/locale/si.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/si.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Sinhalese [si]
//! author : Sampath Sitinamaluwa : https://github.com/sampathsris

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    /*jshint -W100*/
    var si = moment.defineLocale('si', {
        months: 'à¶¢à¶±à·à·à¶»à·_à¶´à·à¶¶à¶»à·à·à¶»à·_à¶¸à·à¶»à·à¶­à·_à¶à¶´à·âà¶»à·à¶½à·_à¶¸à·à¶ºà·_à¶¢à·à¶±à·_à¶¢à·à¶½à·_à¶à¶à·à·à·à¶­à·_à·à·à¶´à·à¶­à·à¶¸à·à¶¶à¶»à·_à¶à¶à·à¶­à·à¶¶à¶»à·_à¶±à·à·à·à¶¸à·à¶¶à¶»à·_à¶¯à·à·à·à¶¸à·à¶¶à¶»à·'.split(
            '_'
        ),
        monthsShort: 'à¶¢à¶±_à¶´à·à¶¶_à¶¸à·à¶»à·_à¶à¶´à·_à¶¸à·à¶ºà·_à¶¢à·à¶±à·_à¶¢à·à¶½à·_à¶à¶à·_à·à·à¶´à·_à¶à¶à·_à¶±à·à·à·_à¶¯à·à·à·'.split(
            '_'
        ),
        weekdays:
            'à¶à¶»à·à¶¯à·_à·à¶³à·à¶¯à·_à¶à¶à·à¶»à·à·à·à¶¯à·_à¶¶à¶¯à·à¶¯à·_à¶¶à·âà¶»à·à·à·à¶´à¶­à·à¶±à·à¶¯à·_à·à·à¶à·à¶»à·à¶¯à·_à·à·à¶±à·à·à¶»à·à¶¯à·'.split(
                '_'
            ),
        weekdaysShort: 'à¶à¶»à·_à·à¶³à·_à¶à¶_à¶¶à¶¯à·_à¶¶à·âà¶»à·_à·à·à¶à·_à·à·à¶±'.split('_'),
        weekdaysMin: 'à¶_à·_à¶_à¶¶_à¶¶à·âà¶»_à·à·_à·à·'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'a h:mm',
            LTS: 'a h:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYY MMMM D',
            LLL: 'YYYY MMMM D, a h:mm',
            LLLL: 'YYYY MMMM D [à·à·à¶±à·] dddd, a h:mm:ss',
        },
        calendar: {
            sameDay: '[à¶à¶¯] LT[à¶§]',
            nextDay: '[à·à·à¶§] LT[à¶§]',
            nextWeek: 'dddd LT[à¶§]',
            lastDay: '[à¶à¶ºà·] LT[à¶§]',
            lastWeek: '[à¶´à·à·à¶à·à¶º] dddd LT[à¶§]',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%sà¶à·à¶±à·',
            past: '%sà¶à¶§ à¶´à·à¶»',
            s: 'à¶­à¶­à·à¶´à¶» à¶à·à·à·à¶´à¶º',
            ss: 'à¶­à¶­à·à¶´à¶» %d',
            m: 'à¶¸à·à¶±à·à¶­à·à¶­à·à·',
            mm: 'à¶¸à·à¶±à·à¶­à·à¶­à· %d',
            h: 'à¶´à·à¶º',
            hh: 'à¶´à·à¶º %d',
            d: 'à¶¯à·à¶±à¶º',
            dd: 'à¶¯à·à¶± %d',
            M: 'à¶¸à·à·à¶º',
            MM: 'à¶¸à·à· %d',
            y: 'à·à·à¶»',
            yy: 'à·à·à¶» %d',
        },
        dayOfMonthOrdinalParse: /\d{1,2} à·à·à¶±à·/,
        ordinal: function (number) {
            return number + ' à·à·à¶±à·';
        },
        meridiemParse: /à¶´à·à¶» à·à¶»à·|à¶´à·à· à·à¶»à·|à¶´à·.à·|à¶´.à·./,
        isPM: function (input) {
            return input === 'à¶´.à·.' || input === 'à¶´à·à· à·à¶»à·';
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'à¶´.à·.' : 'à¶´à·à· à·à¶»à·';
            } else {
                return isLower ? 'à¶´à·.à·.' : 'à¶´à·à¶» à·à¶»à·';
            }
        },
    });

    return si;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sk.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovak [sk]
//! author : Martin Minka : https://github.com/k2s
//! based on work of petrbela : https://github.com/petrbela

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months =
            'januÃ¡r_februÃ¡r_marec_aprÃ­l_mÃ¡j_jÃºn_jÃºl_august_september_oktÃ³ber_november_december'.split(
                '_'
            ),
        monthsShort = 'jan_feb_mar_apr_mÃ¡j_jÃºn_jÃºl_aug_sep_okt_nov_dec'.split('_');
    function plural(n) {
        return n > 1 && n < 5;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's': // a few seconds / in a few seconds / a few seconds ago
                return withoutSuffix || isFuture ? 'pÃ¡r sekÃºnd' : 'pÃ¡r sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekÃºnd');
                } else {
                    return result + 'sekundami';
                }
            case 'm': // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minÃºta' : isFuture ? 'minÃºtu' : 'minÃºtou';
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minÃºty' : 'minÃºt');
                } else {
                    return result + 'minÃºtami';
                }
            case 'h': // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : isFuture ? 'hodinu' : 'hodinou';
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodÃ­n');
                } else {
                    return result + 'hodinami';
                }
            case 'd': // a day / in a day / a day ago
                return withoutSuffix || isFuture ? 'deÅ' : 'dÅom';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dni' : 'dnÃ­');
                } else {
                    return result + 'dÅami';
                }
            case 'M': // a month / in a month / a month ago
                return withoutSuffix || isFuture ? 'mesiac' : 'mesiacom';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'mesiace' : 'mesiacov');
                } else {
                    return result + 'mesiacmi';
                }
            case 'y': // a year / in a year / a year ago
                return withoutSuffix || isFuture ? 'rok' : 'rokom';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'rokov');
                } else {
                    return result + 'rokmi';
                }
        }
    }

    var sk = moment.defineLocale('sk', {
        months: months,
        monthsShort: monthsShort,
        weekdays: 'nedeÄ¾a_pondelok_utorok_streda_Å¡tvrtok_piatok_sobota'.split('_'),
        weekdaysShort: 'ne_po_ut_st_Å¡t_pi_so'.split('_'),
        weekdaysMin: 'ne_po_ut_st_Å¡t_pi_so'.split('_'),
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[dnes o] LT',
            nextDay: '[zajtra o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v nedeÄ¾u o] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [o] LT';
                    case 3:
                        return '[v stredu o] LT';
                    case 4:
                        return '[vo Å¡tvrtok o] LT';
                    case 5:
                        return '[v piatok o] LT';
                    case 6:
                        return '[v sobotu o] LT';
                }
            },
            lastDay: '[vÄera o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulÃº nedeÄ¾u o] LT';
                    case 1:
                    case 2:
                        return '[minulÃ½] dddd [o] LT';
                    case 3:
                        return '[minulÃº stredu o] LT';
                    case 4:
                    case 5:
                        return '[minulÃ½] dddd [o] LT';
                    case 6:
                        return '[minulÃº sobotu o] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'pred %s',
            s: translate,
            ss: translate,
            m: translate,
            mm: translate,
            h: translate,
            hh: translate,
            d: translate,
            dd: translate,
            M: translate,
            MM: translate,
            y: translate,
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sl.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sl.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Slovenian [sl]
//! author : Robert SedovÅ¡ek : https://github.com/sedovsek

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture
                    ? 'nekaj sekund'
                    : 'nekaj sekundami';
            case 'ss':
                if (number === 1) {
                    result += withoutSuffix ? 'sekundo' : 'sekundi';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';
                } else {
                    result += 'sekund';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'ena minuta' : 'eno minuto';
            case 'mm':
                if (number === 1) {
                    result += withoutSuffix ? 'minuta' : 'minuto';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
                } else {
                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'ena ura' : 'eno uro';
            case 'hh':
                if (number === 1) {
                    result += withoutSuffix ? 'ura' : 'uro';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
                } else {
                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
                }
                return result;
            case 'd':
                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
            case 'dd':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
                } else {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
                }
                return result;
            case 'M':
                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
            case 'MM':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
                } else {
                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
                }
                return result;
            case 'y':
                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
            case 'yy':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
                } else {
                    result += withoutSuffix || isFuture ? 'let' : 'leti';
                }
                return result;
        }
    }

    var sl = moment.defineLocale('sl', {
        months: 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljek_torek_sreda_Äetrtek_petek_sobota'.split('_'),
        weekdaysShort: 'ned._pon._tor._sre._Äet._pet._sob.'.split('_'),
        weekdaysMin: 'ne_po_to_sr_Äe_pe_so'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD. MM. YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm',
        },
        calendar: {
            sameDay: '[danes ob] LT',
            nextDay: '[jutri ob] LT',

            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v] [nedeljo] [ob] LT';
                    case 3:
                        return '[v] [sredo] [ob] LT';
                    case 6:
                        return '[v] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[v] dddd [ob] LT';
                }
            },
            lastDay: '[vÄeraj ob] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[prejÅ¡njo] [nedeljo] [ob] LT';
                    case 3:
                        return '[prejÅ¡njo] [sredo] [ob] LT';
                    case 6:
                        return '[prejÅ¡njo] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prejÅ¡nji] dddd [ob] LT';
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Äez %s',
            past: 'pred %s',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return sl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sq.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sq.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Albanian [sq]
//! author : FlakÃ«rim Ismani : https://github.com/flakerimi
//! author : Menelion ElensÃºle : https://github.com/Oire
//! author : Oerd Cukalla : https://github.com/oerd

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var sq = moment.defineLocale('sq', {
        months: 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_NÃ«ntor_Dhjetor'.split(
            '_'
        ),
        monthsShort: 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_NÃ«n_Dhj'.split('_'),
        weekdays: 'E Diel_E HÃ«nÃ«_E MartÃ«_E MÃ«rkurÃ«_E Enjte_E Premte_E ShtunÃ«'.split(
            '_'
        ),
        weekdaysShort: 'Die_HÃ«n_Mar_MÃ«r_Enj_Pre_Sht'.split('_'),
        weekdaysMin: 'D_H_Ma_MÃ«_E_P_Sh'.split('_'),
        weekdaysParseExact: true,
        meridiemParse: /PD|MD/,
        isPM: function (input) {
            return input.charAt(0) === 'M';
        },
        meridiem: function (hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Sot nÃ«] LT',
            nextDay: '[NesÃ«r nÃ«] LT',
            nextWeek: 'dddd [nÃ«] LT',
            lastDay: '[Dje nÃ«] LT',
            lastWeek: 'dddd [e kaluar nÃ«] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'nÃ« %s',
            past: '%s mÃ« parÃ«',
            s: 'disa sekonda',
            ss: '%d sekonda',
            m: 'njÃ« minutÃ«',
            mm: '%d minuta',
            h: 'njÃ« orÃ«',
            hh: '%d orÃ«',
            d: 'njÃ« ditÃ«',
            dd: '%d ditÃ«',
            M: 'njÃ« muaj',
            MM: '%d muaj',
            y: 'njÃ« vit',
            yy: '%d vite',
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sq;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sr-cyrl.js":
/*!***********************************************!*\
  !*** ./node_modules/moment/locale/sr-cyrl.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian Cyrillic [sr-cyrl]
//! author : Milan JanaÄkoviÄ<milanjanackovic@gmail.com> : https://github.com/milan-j
//! author : Stefan CrnjakoviÄ <stefan@hotmail.rs> : https://github.com/crnjakovic

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var translator = {
        words: {
            //Different grammatical cases
            ss: ['ÑÐµÐºÑÐ½Ð´Ð°', 'ÑÐµÐºÑÐ½Ð´Ðµ', 'ÑÐµÐºÑÐ½Ð´Ð¸'],
            m: ['ÑÐµÐ´Ð°Ð½ Ð¼Ð¸Ð½ÑÑ', 'ÑÐµÐ´Ð½Ð¾Ð³ Ð¼Ð¸Ð½ÑÑÐ°'],
            mm: ['Ð¼Ð¸Ð½ÑÑ', 'Ð¼Ð¸Ð½ÑÑÐ°', 'Ð¼Ð¸Ð½ÑÑÐ°'],
            h: ['ÑÐµÐ´Ð°Ð½ ÑÐ°Ñ', 'ÑÐµÐ´Ð½Ð¾Ð³ ÑÐ°ÑÐ°'],
            hh: ['ÑÐ°Ñ', 'ÑÐ°ÑÐ°', 'ÑÐ°ÑÐ¸'],
            d: ['ÑÐµÐ´Ð°Ð½ Ð´Ð°Ð½', 'ÑÐµÐ´Ð½Ð¾Ð³ Ð´Ð°Ð½Ð°'],
            dd: ['Ð´Ð°Ð½', 'Ð´Ð°Ð½Ð°', 'Ð´Ð°Ð½Ð°'],
            M: ['ÑÐµÐ´Ð°Ð½ Ð¼ÐµÑÐµÑ', 'ÑÐµÐ´Ð½Ð¾Ð³ Ð¼ÐµÑÐµÑÐ°'],
            MM: ['Ð¼ÐµÑÐµÑ', 'Ð¼ÐµÑÐµÑÐ°', 'Ð¼ÐµÑÐµÑÐ¸'],
            y: ['ÑÐµÐ´Ð½Ñ Ð³Ð¾Ð´Ð¸Ð½Ñ', 'ÑÐµÐ´Ð½Ðµ Ð³Ð¾Ð´Ð¸Ð½Ðµ'],
            yy: ['Ð³Ð¾Ð´Ð¸Ð½Ñ', 'Ð³Ð¾Ð´Ð¸Ð½Ðµ', 'Ð³Ð¾Ð´Ð¸Ð½Ð°'],
        },
        correctGrammaticalCase: function (number, wordKey) {
            if (
                number % 10 >= 1 &&
                number % 10 <= 4 &&
                (number % 100 < 10 || number % 100 >= 20)
            ) {
                return number % 10 === 1 ? wordKey[0] : wordKey[1];
            }
            return wordKey[2];
        },
        translate: function (number, withoutSuffix, key, isFuture) {
            var wordKey = translator.words[key],
                word;

            if (key.length === 1) {
                // Nominativ
                if (key === 'y' && withoutSuffix) return 'ÑÐµÐ´Ð½Ð° Ð³Ð¾Ð´Ð¸Ð½Ð°';
                return isFuture || withoutSuffix ? wordKey[0] : wordKey[1];
            }

            word = translator.correctGrammaticalCase(number, wordKey);
            // Nominativ
            if (key === 'yy' && withoutSuffix && word === 'Ð³Ð¾Ð´Ð¸Ð½Ñ') {
                return number + ' Ð³Ð¾Ð´Ð¸Ð½Ð°';
            }

            return number + ' ' + word;
        },
    };

    var srCyrl = moment.defineLocale('sr-cyrl', {
        months: 'ÑÐ°Ð½ÑÐ°Ñ_ÑÐµÐ±ÑÑÐ°Ñ_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐ¸Ð»_Ð¼Ð°Ñ_ÑÑÐ½_ÑÑÐ»_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ¿ÑÐµÐ¼Ð±Ð°Ñ_Ð¾ÐºÑÐ¾Ð±Ð°Ñ_Ð½Ð¾Ð²ÐµÐ¼Ð±Ð°Ñ_Ð´ÐµÑÐµÐ¼Ð±Ð°Ñ'.split(
            '_'
        ),
        monthsShort:
            'ÑÐ°Ð½._ÑÐµÐ±._Ð¼Ð°Ñ._Ð°Ð¿Ñ._Ð¼Ð°Ñ_ÑÑÐ½_ÑÑÐ»_Ð°Ð²Ð³._ÑÐµÐ¿._Ð¾ÐºÑ._Ð½Ð¾Ð²._Ð´ÐµÑ.'.split('_'),
        monthsParseExact: true,
        weekdays: 'Ð½ÐµÐ´ÐµÑÐ°_Ð¿Ð¾Ð½ÐµÐ´ÐµÑÐ°Ðº_ÑÑÐ¾ÑÐ°Ðº_ÑÑÐµÐ´Ð°_ÑÐµÑÐ²ÑÑÐ°Ðº_Ð¿ÐµÑÐ°Ðº_ÑÑÐ±Ð¾ÑÐ°'.split('_'),
        weekdaysShort: 'Ð½ÐµÐ´._Ð¿Ð¾Ð½._ÑÑÐ¾._ÑÑÐµ._ÑÐµÑ._Ð¿ÐµÑ._ÑÑÐ±.'.split('_'),
        weekdaysMin: 'Ð½Ðµ_Ð¿Ð¾_ÑÑ_ÑÑ_ÑÐµ_Ð¿Ðµ_ÑÑ'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D. M. YYYY.',
            LL: 'D. MMMM YYYY.',
            LLL: 'D. MMMM YYYY. H:mm',
            LLLL: 'dddd, D. MMMM YYYY. H:mm',
        },
        calendar: {
            sameDay: '[Ð´Ð°Ð½Ð°Ñ Ñ] LT',
            nextDay: '[ÑÑÑÑÐ° Ñ] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[Ñ] [Ð½ÐµÐ´ÐµÑÑ] [Ñ] LT';
                    case 3:
                        return '[Ñ] [ÑÑÐµÐ´Ñ] [Ñ] LT';
                    case 6:
                        return '[Ñ] [ÑÑÐ±Ð¾ÑÑ] [Ñ] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[Ñ] dddd [Ñ] LT';
                }
            },
            lastDay: '[ÑÑÑÐµ Ñ] LT',
            lastWeek: function () {
                var lastWeekDays = [
                    '[Ð¿ÑÐ¾ÑÐ»Ðµ] [Ð½ÐµÐ´ÐµÑÐµ] [Ñ] LT',
                    '[Ð¿ÑÐ¾ÑÐ»Ð¾Ð³] [Ð¿Ð¾Ð½ÐµÐ´ÐµÑÐºÐ°] [Ñ] LT',
                    '[Ð¿ÑÐ¾ÑÐ»Ð¾Ð³] [ÑÑÐ¾ÑÐºÐ°] [Ñ] LT',
                    '[Ð¿ÑÐ¾ÑÐ»Ðµ] [ÑÑÐµÐ´Ðµ] [Ñ] LT',
                    '[Ð¿ÑÐ¾ÑÐ»Ð¾Ð³] [ÑÐµÑÐ²ÑÑÐºÐ°] [Ñ] LT',
                    '[Ð¿ÑÐ¾ÑÐ»Ð¾Ð³] [Ð¿ÐµÑÐºÐ°] [Ñ] LT',
                    '[Ð¿ÑÐ¾ÑÐ»Ðµ] [ÑÑÐ±Ð¾ÑÐµ] [Ñ] LT',
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Ð·Ð° %s',
            past: 'Ð¿ÑÐµ %s',
            s: 'Ð½ÐµÐºÐ¾Ð»Ð¸ÐºÐ¾ ÑÐµÐºÑÐ½Ð´Ð¸',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: translator.translate,
            dd: translator.translate,
            M: translator.translate,
            MM: translator.translate,
            y: translator.translate,
            yy: translator.translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 1st is the first week of the year.
        },
    });

    return srCyrl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sr.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Serbian [sr]
//! author : Milan JanaÄkoviÄ<milanjanackovic@gmail.com> : https://github.com/milan-j
//! author : Stefan CrnjakoviÄ <stefan@hotmail.rs> : https://github.com/crnjakovic

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var translator = {
        words: {
            //Different grammatical cases
            ss: ['sekunda', 'sekunde', 'sekundi'],
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            d: ['jedan dan', 'jednog dana'],
            dd: ['dan', 'dana', 'dana'],
            M: ['jedan mesec', 'jednog meseca'],
            MM: ['mesec', 'meseca', 'meseci'],
            y: ['jednu godinu', 'jedne godine'],
            yy: ['godinu', 'godine', 'godina'],
        },
        correctGrammaticalCase: function (number, wordKey) {
            if (
                number % 10 >= 1 &&
                number % 10 <= 4 &&
                (number % 100 < 10 || number % 100 >= 20)
            ) {
                return number % 10 === 1 ? wordKey[0] : wordKey[1];
            }
            return wordKey[2];
        },
        translate: function (number, withoutSuffix, key, isFuture) {
            var wordKey = translator.words[key],
                word;

            if (key.length === 1) {
                // Nominativ
                if (key === 'y' && withoutSuffix) return 'jedna godina';
                return isFuture || withoutSuffix ? wordKey[0] : wordKey[1];
            }

            word = translator.correctGrammaticalCase(number, wordKey);
            // Nominativ
            if (key === 'yy' && withoutSuffix && word === 'godinu') {
                return number + ' godina';
            }

            return number + ' ' + word;
        },
    };

    var sr = moment.defineLocale('sr', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split(
            '_'
        ),
        monthsShort:
            'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljak_utorak_sreda_Äetvrtak_petak_subota'.split(
            '_'
        ),
        weekdaysShort: 'ned._pon._uto._sre._Äet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_Äe_pe_su'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'D. M. YYYY.',
            LL: 'D. MMMM YYYY.',
            LLL: 'D. MMMM YYYY. H:mm',
            LLLL: 'dddd, D. MMMM YYYY. H:mm',
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedelju] [u] LT';
                    case 3:
                        return '[u] [sredu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay: '[juÄe u] LT',
            lastWeek: function () {
                var lastWeekDays = [
                    '[proÅ¡le] [nedelje] [u] LT',
                    '[proÅ¡log] [ponedeljka] [u] LT',
                    '[proÅ¡log] [utorka] [u] LT',
                    '[proÅ¡le] [srede] [u] LT',
                    '[proÅ¡log] [Äetvrtka] [u] LT',
                    '[proÅ¡log] [petka] [u] LT',
                    '[proÅ¡le] [subote] [u] LT',
                ];
                return lastWeekDays[this.day()];
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'za %s',
            past: 'pre %s',
            s: 'nekoliko sekundi',
            ss: translator.translate,
            m: translator.translate,
            mm: translator.translate,
            h: translator.translate,
            hh: translator.translate,
            d: translator.translate,
            dd: translator.translate,
            M: translator.translate,
            MM: translator.translate,
            y: translator.translate,
            yy: translator.translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return sr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ss.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ss.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : siSwati [ss]
//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ss = moment.defineLocale('ss', {
        months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split(
            '_'
        ),
        monthsShort: 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
        weekdays:
            'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split(
                '_'
            ),
        weekdaysShort: 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
        weekdaysMin: 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[Namuhla nga] LT',
            nextDay: '[Kusasa nga] LT',
            nextWeek: 'dddd [nga] LT',
            lastDay: '[Itolo nga] LT',
            lastWeek: 'dddd [leliphelile] [nga] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'nga %s',
            past: 'wenteka nga %s',
            s: 'emizuzwana lomcane',
            ss: '%d mzuzwana',
            m: 'umzuzu',
            mm: '%d emizuzu',
            h: 'lihora',
            hh: '%d emahora',
            d: 'lilanga',
            dd: '%d emalanga',
            M: 'inyanga',
            MM: '%d tinyanga',
            y: 'umnyaka',
            yy: '%d iminyaka',
        },
        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
        meridiem: function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'ekuseni';
            } else if (hours < 15) {
                return 'emini';
            } else if (hours < 19) {
                return 'entsambama';
            } else {
                return 'ebusuku';
            }
        },
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ekuseni') {
                return hour;
            } else if (meridiem === 'emini') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
                if (hour === 0) {
                    return 0;
                }
                return hour + 12;
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: '%d',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ss;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sv.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sv.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swedish [sv]
//! author : Jens Alm : https://github.com/ulmus

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var sv = moment.defineLocale('sv', {
        months: 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split(
            '_'
        ),
        monthsShort: 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays: 'sÃ¶ndag_mÃ¥ndag_tisdag_onsdag_torsdag_fredag_lÃ¶rdag'.split('_'),
        weekdaysShort: 'sÃ¶n_mÃ¥n_tis_ons_tor_fre_lÃ¶r'.split('_'),
        weekdaysMin: 'sÃ¶_mÃ¥_ti_on_to_fr_lÃ¶'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [kl.] HH:mm',
            LLLL: 'dddd D MMMM YYYY [kl.] HH:mm',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd D MMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[IgÃ¥r] LT',
            nextWeek: '[PÃ¥] dddd LT',
            lastWeek: '[I] dddd[s] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'om %s',
            past: 'fÃ¶r %s sedan',
            s: 'nÃ¥gra sekunder',
            ss: '%d sekunder',
            m: 'en minut',
            mm: '%d minuter',
            h: 'en timme',
            hh: '%d timmar',
            d: 'en dag',
            dd: '%d dagar',
            M: 'en mÃ¥nad',
            MM: '%d mÃ¥nader',
            y: 'ett Ã¥r',
            yy: '%d Ã¥r',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(\:e|\:a)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? ':e'
                        : b === 1
                        ? ':a'
                        : b === 2
                        ? ':a'
                        : b === 3
                        ? ':e'
                        : ':e';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return sv;

})));


/***/ }),

/***/ "./node_modules/moment/locale/sw.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/sw.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Swahili [sw]
//! author : Fahad Kassim : https://github.com/fadsel

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var sw = moment.defineLocale('sw', {
        months: 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split(
            '_'
        ),
        monthsShort: 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
        weekdays:
            'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split(
                '_'
            ),
        weekdaysShort: 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
        weekdaysMin: 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'hh:mm A',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[leo saa] LT',
            nextDay: '[kesho saa] LT',
            nextWeek: '[wiki ijayo] dddd [saat] LT',
            lastDay: '[jana] LT',
            lastWeek: '[wiki iliyopita] dddd [saat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s baadaye',
            past: 'tokea %s',
            s: 'hivi punde',
            ss: 'sekunde %d',
            m: 'dakika moja',
            mm: 'dakika %d',
            h: 'saa limoja',
            hh: 'masaa %d',
            d: 'siku moja',
            dd: 'siku %d',
            M: 'mwezi mmoja',
            MM: 'miezi %d',
            y: 'mwaka mmoja',
            yy: 'miaka %d',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return sw;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ta.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ta.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tamil [ta]
//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var symbolMap = {
            1: 'à¯§',
            2: 'à¯¨',
            3: 'à¯©',
            4: 'à¯ª',
            5: 'à¯«',
            6: 'à¯¬',
            7: 'à¯­',
            8: 'à¯®',
            9: 'à¯¯',
            0: 'à¯¦',
        },
        numberMap = {
            'à¯§': '1',
            'à¯¨': '2',
            'à¯©': '3',
            'à¯ª': '4',
            'à¯«': '5',
            'à¯¬': '6',
            'à¯­': '7',
            'à¯®': '8',
            'à¯¯': '9',
            'à¯¦': '0',
        };

    var ta = moment.defineLocale('ta', {
        months: 'à®à®©à®µà®°à®¿_à®ªà®¿à®ªà¯à®°à®µà®°à®¿_à®®à®¾à®°à¯à®à¯_à®à®ªà¯à®°à®²à¯_à®®à¯_à®à¯à®©à¯_à®à¯à®²à¯_à®à®à®¸à¯à®à¯_à®à¯à®ªà¯à®à¯à®®à¯à®ªà®°à¯_à®à®à¯à®à¯à®¾à®ªà®°à¯_à®¨à®µà®®à¯à®ªà®°à¯_à®à®¿à®à®®à¯à®ªà®°à¯'.split(
            '_'
        ),
        monthsShort:
            'à®à®©à®µà®°à®¿_à®ªà®¿à®ªà¯à®°à®µà®°à®¿_à®®à®¾à®°à¯à®à¯_à®à®ªà¯à®°à®²à¯_à®®à¯_à®à¯à®©à¯_à®à¯à®²à¯_à®à®à®¸à¯à®à¯_à®à¯à®ªà¯à®à¯à®®à¯à®ªà®°à¯_à®à®à¯à®à¯à®¾à®ªà®°à¯_à®¨à®µà®®à¯à®ªà®°à¯_à®à®¿à®à®®à¯à®ªà®°à¯'.split(
                '_'
            ),
        weekdays:
            'à®à®¾à®¯à®¿à®±à¯à®±à¯à®à¯à®à®¿à®´à®®à¯_à®¤à®¿à®à¯à®à®à¯à®à®¿à®´à®®à¯_à®à¯à®µà¯à®µà®¾à®¯à¯à®à®¿à®´à®®à¯_à®ªà¯à®¤à®©à¯à®à®¿à®´à®®à¯_à®µà®¿à®¯à®¾à®´à®à¯à®à®¿à®´à®®à¯_à®µà¯à®³à¯à®³à®¿à®à¯à®à®¿à®´à®®à¯_à®à®©à®¿à®à¯à®à®¿à®´à®®à¯'.split(
                '_'
            ),
        weekdaysShort: 'à®à®¾à®¯à®¿à®±à¯_à®¤à®¿à®à¯à®à®³à¯_à®à¯à®µà¯à®µà®¾à®¯à¯_à®ªà¯à®¤à®©à¯_à®µà®¿à®¯à®¾à®´à®©à¯_à®µà¯à®³à¯à®³à®¿_à®à®©à®¿'.split(
            '_'
        ),
        weekdaysMin: 'à®à®¾_à®¤à®¿_à®à¯_à®ªà¯_à®µà®¿_à®µà¯_à®'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, HH:mm',
            LLLL: 'dddd, D MMMM YYYY, HH:mm',
        },
        calendar: {
            sameDay: '[à®à®©à¯à®±à¯] LT',
            nextDay: '[à®¨à®¾à®³à¯] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[à®¨à¯à®±à¯à®±à¯] LT',
            lastWeek: '[à®à®à®¨à¯à®¤ à®µà®¾à®°à®®à¯] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s à®à®²à¯',
            past: '%s à®®à¯à®©à¯',
            s: 'à®à®°à¯ à®à®¿à®² à®µà®¿à®¨à®¾à®à®¿à®à®³à¯',
            ss: '%d à®µà®¿à®¨à®¾à®à®¿à®à®³à¯',
            m: 'à®à®°à¯ à®¨à®¿à®®à®¿à®à®®à¯',
            mm: '%d à®¨à®¿à®®à®¿à®à®à¯à®à®³à¯',
            h: 'à®à®°à¯ à®®à®£à®¿ à®¨à¯à®°à®®à¯',
            hh: '%d à®®à®£à®¿ à®¨à¯à®°à®®à¯',
            d: 'à®à®°à¯ à®¨à®¾à®³à¯',
            dd: '%d à®¨à®¾à®à¯à®à®³à¯',
            M: 'à®à®°à¯ à®®à®¾à®¤à®®à¯',
            MM: '%d à®®à®¾à®¤à®à¯à®à®³à¯',
            y: 'à®à®°à¯ à®µà®°à¯à®à®®à¯',
            yy: '%d à®à®£à¯à®à¯à®à®³à¯',
        },
        dayOfMonthOrdinalParse: /\d{1,2}à®µà®¤à¯/,
        ordinal: function (number) {
            return number + 'à®µà®¤à¯';
        },
        preparse: function (string) {
            return string.replace(/[à¯§à¯¨à¯©à¯ªà¯«à¯¬à¯­à¯®à¯¯à¯¦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // refer http://ta.wikipedia.org/s/1er1
        meridiemParse: /à®¯à®¾à®®à®®à¯|à®µà¯à®à®±à¯|à®à®¾à®²à¯|à®¨à®£à¯à®ªà®à®²à¯|à®à®±à¯à®ªà®¾à®à¯|à®®à®¾à®²à¯/,
        meridiem: function (hour, minute, isLower) {
            if (hour < 2) {
                return ' à®¯à®¾à®®à®®à¯';
            } else if (hour < 6) {
                return ' à®µà¯à®à®±à¯'; // à®µà¯à®à®±à¯
            } else if (hour < 10) {
                return ' à®à®¾à®²à¯'; // à®à®¾à®²à¯
            } else if (hour < 14) {
                return ' à®¨à®£à¯à®ªà®à®²à¯'; // à®¨à®£à¯à®ªà®à®²à¯
            } else if (hour < 18) {
                return ' à®à®±à¯à®ªà®¾à®à¯'; // à®à®±à¯à®ªà®¾à®à¯
            } else if (hour < 22) {
                return ' à®®à®¾à®²à¯'; // à®®à®¾à®²à¯
            } else {
                return ' à®¯à®¾à®®à®®à¯';
            }
        },
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'à®¯à®¾à®®à®®à¯') {
                return hour < 2 ? hour : hour + 12;
            } else if (meridiem === 'à®µà¯à®à®±à¯' || meridiem === 'à®à®¾à®²à¯') {
                return hour;
            } else if (meridiem === 'à®¨à®£à¯à®ªà®à®²à¯') {
                return hour >= 10 ? hour : hour + 12;
            } else {
                return hour + 12;
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return ta;

})));


/***/ }),

/***/ "./node_modules/moment/locale/te.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/te.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Telugu [te]
//! author : Krishna Chaitanya Thota : https://github.com/kcthota

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var te = moment.defineLocale('te', {
        months: 'à°à°¨à°µà°°à°¿_à°«à°¿à°¬à±à°°à°µà°°à°¿_à°®à°¾à°°à±à°à°¿_à°à°ªà±à°°à°¿à°²à±_à°®à±_à°à±à°¨à±_à°à±à°²à±_à°à°à°¸à±à°à±_à°¸à±à°ªà±à°à±à°à°¬à°°à±_à°à°à±à°à±à°¬à°°à±_à°¨à°µà°à°¬à°°à±_à°¡à°¿à°¸à±à°à°¬à°°à±'.split(
            '_'
        ),
        monthsShort:
            'à°à°¨._à°«à°¿à°¬à±à°°._à°®à°¾à°°à±à°à°¿_à°à°ªà±à°°à°¿._à°®à±_à°à±à°¨à±_à°à±à°²à±_à°à°._à°¸à±à°ªà±._à°à°à±à°à±._à°¨à°µ._à°¡à°¿à°¸à±.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'à°à°¦à°¿à°µà°¾à°°à°_à°¸à±à°®à°µà°¾à°°à°_à°®à°à°à°³à°µà°¾à°°à°_à°¬à±à°§à°µà°¾à°°à°_à°à±à°°à±à°µà°¾à°°à°_à°¶à±à°à±à°°à°µà°¾à°°à°_à°¶à°¨à°¿à°µà°¾à°°à°'.split(
                '_'
            ),
        weekdaysShort: 'à°à°¦à°¿_à°¸à±à°®_à°®à°à°à°³_à°¬à±à°§_à°à±à°°à±_à°¶à±à°à±à°°_à°¶à°¨à°¿'.split('_'),
        weekdaysMin: 'à°_à°¸à±_à°®à°_à°¬à±_à°à±_à°¶à±_à°¶'.split('_'),
        longDateFormat: {
            LT: 'A h:mm',
            LTS: 'A h:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm',
            LLLL: 'dddd, D MMMM YYYY, A h:mm',
        },
        calendar: {
            sameDay: '[à°¨à±à°¡à±] LT',
            nextDay: '[à°°à±à°ªà±] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[à°¨à°¿à°¨à±à°¨] LT',
            lastWeek: '[à°à°¤] dddd, LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s à°²à±',
            past: '%s à°à±à°°à°¿à°¤à°',
            s: 'à°à±à°¨à±à°¨à°¿ à°à±à°·à°£à°¾à°²à±',
            ss: '%d à°¸à±à°à°¨à±à°²à±',
            m: 'à°à° à°¨à°¿à°®à°¿à°·à°',
            mm: '%d à°¨à°¿à°®à°¿à°·à°¾à°²à±',
            h: 'à°à° à°à°à°',
            hh: '%d à°à°à°à°²à±',
            d: 'à°à° à°°à±à°à±',
            dd: '%d à°°à±à°à±à°²à±',
            M: 'à°à° à°¨à±à°²',
            MM: '%d à°¨à±à°²à°²à±',
            y: 'à°à° à°¸à°à°µà°¤à±à°¸à°°à°',
            yy: '%d à°¸à°à°µà°¤à±à°¸à°°à°¾à°²à±',
        },
        dayOfMonthOrdinalParse: /\d{1,2}à°µ/,
        ordinal: '%dà°µ',
        meridiemParse: /à°°à°¾à°¤à±à°°à°¿|à°à°¦à°¯à°|à°®à°§à±à°¯à°¾à°¹à±à°¨à°|à°¸à°¾à°¯à°à°¤à±à°°à°/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'à°°à°¾à°¤à±à°°à°¿') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'à°à°¦à°¯à°') {
                return hour;
            } else if (meridiem === 'à°®à°§à±à°¯à°¾à°¹à±à°¨à°') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'à°¸à°¾à°¯à°à°¤à±à°°à°') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'à°°à°¾à°¤à±à°°à°¿';
            } else if (hour < 10) {
                return 'à°à°¦à°¯à°';
            } else if (hour < 17) {
                return 'à°®à°§à±à°¯à°¾à°¹à±à°¨à°';
            } else if (hour < 20) {
                return 'à°¸à°¾à°¯à°à°¤à±à°°à°';
            } else {
                return 'à°°à°¾à°¤à±à°°à°¿';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6, // The week that contains Jan 6th is the first week of the year.
        },
    });

    return te;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tet.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tet.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tetun Dili (East Timor) [tet]
//! author : Joshua Brooks : https://github.com/joshbrooks
//! author : Onorio De J. Afonso : https://github.com/marobo
//! author : Sonia Simoes : https://github.com/soniasimoes

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tet = moment.defineLocale('tet', {
        months: 'Janeiru_Fevereiru_Marsu_Abril_Maiu_JuÃ±u_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru'.split(
            '_'
        ),
        monthsShort: 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays: 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu'.split('_'),
        weekdaysShort: 'Dom_Seg_Ters_Kua_Kint_Sest_Sab'.split('_'),
        weekdaysMin: 'Do_Seg_Te_Ku_Ki_Ses_Sa'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[Ohin iha] LT',
            nextDay: '[Aban iha] LT',
            nextWeek: 'dddd [iha] LT',
            lastDay: '[Horiseik iha] LT',
            lastWeek: 'dddd [semana kotuk] [iha] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'iha %s',
            past: '%s liuba',
            s: 'segundu balun',
            ss: 'segundu %d',
            m: 'minutu ida',
            mm: 'minutu %d',
            h: 'oras ida',
            hh: 'oras %d',
            d: 'loron ida',
            dd: 'loron %d',
            M: 'fulan ida',
            MM: 'fulan %d',
            y: 'tinan ida',
            yy: 'tinan %d',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return tet;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tg.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/tg.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tajik [tg]
//! author : Orif N. Jr. : https://github.com/orif-jr

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        0: '-ÑÐ¼',
        1: '-ÑÐ¼',
        2: '-ÑÐ¼',
        3: '-ÑÐ¼',
        4: '-ÑÐ¼',
        5: '-ÑÐ¼',
        6: '-ÑÐ¼',
        7: '-ÑÐ¼',
        8: '-ÑÐ¼',
        9: '-ÑÐ¼',
        10: '-ÑÐ¼',
        12: '-ÑÐ¼',
        13: '-ÑÐ¼',
        20: '-ÑÐ¼',
        30: '-ÑÐ¼',
        40: '-ÑÐ¼',
        50: '-ÑÐ¼',
        60: '-ÑÐ¼',
        70: '-ÑÐ¼',
        80: '-ÑÐ¼',
        90: '-ÑÐ¼',
        100: '-ÑÐ¼',
    };

    var tg = moment.defineLocale('tg', {
        months: {
            format: 'ÑÐ½Ð²Ð°ÑÐ¸_ÑÐµÐ²ÑÐ°Ð»Ð¸_Ð¼Ð°ÑÑÐ¸_Ð°Ð¿ÑÐµÐ»Ð¸_Ð¼Ð°Ð¹Ð¸_Ð¸ÑÐ½Ð¸_Ð¸ÑÐ»Ð¸_Ð°Ð²Ð³ÑÑÑÐ¸_ÑÐµÐ½ÑÑÐ±ÑÐ¸_Ð¾ÐºÑÑÐ±ÑÐ¸_Ð½Ð¾ÑÐ±ÑÐ¸_Ð´ÐµÐºÐ°Ð±ÑÐ¸'.split(
                '_'
            ),
            standalone:
                'ÑÐ½Ð²Ð°Ñ_ÑÐµÐ²ÑÐ°Ð»_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐµÐ»_Ð¼Ð°Ð¹_Ð¸ÑÐ½_Ð¸ÑÐ»_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ½ÑÑÐ±Ñ_Ð¾ÐºÑÑÐ±Ñ_Ð½Ð¾ÑÐ±Ñ_Ð´ÐµÐºÐ°Ð±Ñ'.split(
                    '_'
                ),
        },
        monthsShort: 'ÑÐ½Ð²_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½_Ð¸ÑÐ»_Ð°Ð²Ð³_ÑÐµÐ½_Ð¾ÐºÑ_Ð½Ð¾Ñ_Ð´ÐµÐº'.split('_'),
        weekdays: 'ÑÐºÑÐ°Ð½Ð±Ðµ_Ð´ÑÑÐ°Ð½Ð±Ðµ_ÑÐµÑÐ°Ð½Ð±Ðµ_ÑÐ¾ÑÑÐ°Ð½Ð±Ðµ_Ð¿Ð°Ð½Ò·ÑÐ°Ð½Ð±Ðµ_Ò·ÑÐ¼ÑÐ°_ÑÐ°Ð½Ð±Ðµ'.split(
            '_'
        ),
        weekdaysShort: 'ÑÑÐ±_Ð´ÑÐ±_ÑÑÐ±_ÑÑÐ±_Ð¿ÑÐ±_Ò·ÑÐ¼_ÑÐ½Ð±'.split('_'),
        weekdaysMin: 'ÑÑ_Ð´Ñ_ÑÑ_ÑÑ_Ð¿Ñ_Ò·Ð¼_ÑÐ±'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[ÐÐ¼ÑÓ¯Ð· ÑÐ¾Ð°ÑÐ¸] LT',
            nextDay: '[Ð¤Ð°ÑÐ´Ð¾ ÑÐ¾Ð°ÑÐ¸] LT',
            lastDay: '[ÐÐ¸ÑÓ¯Ð· ÑÐ¾Ð°ÑÐ¸] LT',
            nextWeek: 'dddd[Ð¸] [Ò³Ð°ÑÑÐ°Ð¸ Ð¾ÑÐ½Ð´Ð° ÑÐ¾Ð°ÑÐ¸] LT',
            lastWeek: 'dddd[Ð¸] [Ò³Ð°ÑÑÐ°Ð¸ Ð³ÑÐ·Ð°ÑÑÐ° ÑÐ¾Ð°ÑÐ¸] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Ð±Ð°ÑÐ´Ð¸ %s',
            past: '%s Ð¿ÐµÑ',
            s: 'ÑÐºÑÐ°Ð½Ð´ ÑÐ¾Ð½Ð¸Ñ',
            m: 'ÑÐº Ð´Ð°ÒÐ¸ÒÐ°',
            mm: '%d Ð´Ð°ÒÐ¸ÒÐ°',
            h: 'ÑÐº ÑÐ¾Ð°Ñ',
            hh: '%d ÑÐ¾Ð°Ñ',
            d: 'ÑÐº ÑÓ¯Ð·',
            dd: '%d ÑÓ¯Ð·',
            M: 'ÑÐº Ð¼Ð¾Ò³',
            MM: '%d Ð¼Ð¾Ò³',
            y: 'ÑÐº ÑÐ¾Ð»',
            yy: '%d ÑÐ¾Ð»',
        },
        meridiemParse: /ÑÐ°Ð±|ÑÑÐ±Ò³|ÑÓ¯Ð·|Ð±ÐµÐ³Ð¾Ò³/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ÑÐ°Ð±') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ÑÑÐ±Ò³') {
                return hour;
            } else if (meridiem === 'ÑÓ¯Ð·') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'Ð±ÐµÐ³Ð¾Ò³') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ÑÐ°Ð±';
            } else if (hour < 11) {
                return 'ÑÑÐ±Ò³';
            } else if (hour < 16) {
                return 'ÑÓ¯Ð·';
            } else if (hour < 19) {
                return 'Ð±ÐµÐ³Ð¾Ò³';
            } else {
                return 'ÑÐ°Ð±';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ÑÐ¼|ÑÐ¼)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 1th is the first week of the year.
        },
    });

    return tg;

})));


/***/ }),

/***/ "./node_modules/moment/locale/th.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/th.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Thai [th]
//! author : Kridsada Thanabulpong : https://github.com/sirn

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var th = moment.defineLocale('th', {
        months: 'à¸¡à¸à¸£à¸²à¸à¸¡_à¸à¸¸à¸¡à¸ à¸²à¸à¸±à¸à¸à¹_à¸¡à¸µà¸à¸²à¸à¸¡_à¹à¸¡à¸©à¸²à¸¢à¸_à¸à¸¤à¸©à¸ à¸²à¸à¸¡_à¸¡à¸´à¸à¸¸à¸à¸²à¸¢à¸_à¸à¸£à¸à¸à¸²à¸à¸¡_à¸ªà¸´à¸à¸«à¸²à¸à¸¡_à¸à¸±à¸à¸¢à¸²à¸¢à¸_à¸à¸¸à¸¥à¸²à¸à¸¡_à¸à¸¤à¸¨à¸à¸´à¸à¸²à¸¢à¸_à¸à¸±à¸à¸§à¸²à¸à¸¡'.split(
            '_'
        ),
        monthsShort:
            'à¸¡.à¸._à¸.à¸._à¸¡à¸µ.à¸._à¹à¸¡.à¸¢._à¸.à¸._à¸¡à¸´.à¸¢._à¸.à¸._à¸ª.à¸._à¸.à¸¢._à¸.à¸._à¸.à¸¢._à¸.à¸.'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'à¸­à¸²à¸à¸´à¸à¸¢à¹_à¸à¸±à¸à¸à¸£à¹_à¸­à¸±à¸à¸à¸²à¸£_à¸à¸¸à¸_à¸à¸¤à¸«à¸±à¸ªà¸à¸à¸µ_à¸¨à¸¸à¸à¸£à¹_à¹à¸ªà¸²à¸£à¹'.split('_'),
        weekdaysShort: 'à¸­à¸²à¸à¸´à¸à¸¢à¹_à¸à¸±à¸à¸à¸£à¹_à¸­à¸±à¸à¸à¸²à¸£_à¸à¸¸à¸_à¸à¸¤à¸«à¸±à¸ª_à¸¨à¸¸à¸à¸£à¹_à¹à¸ªà¸²à¸£à¹'.split('_'), // yes, three characters difference
        weekdaysMin: 'à¸­à¸²._à¸._à¸­._à¸._à¸à¸¤._à¸¨._à¸ª.'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'H:mm',
            LTS: 'H:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY à¹à¸§à¸¥à¸² H:mm',
            LLLL: 'à¸§à¸±à¸ddddà¸à¸µà¹ D MMMM YYYY à¹à¸§à¸¥à¸² H:mm',
        },
        meridiemParse: /à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸|à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸/,
        isPM: function (input) {
            return input === 'à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸';
            } else {
                return 'à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸';
            }
        },
        calendar: {
            sameDay: '[à¸§à¸±à¸à¸à¸µà¹ à¹à¸§à¸¥à¸²] LT',
            nextDay: '[à¸à¸£à¸¸à¹à¸à¸à¸µà¹ à¹à¸§à¸¥à¸²] LT',
            nextWeek: 'dddd[à¸«à¸à¹à¸² à¹à¸§à¸¥à¸²] LT',
            lastDay: '[à¹à¸¡à¸·à¹à¸­à¸§à¸²à¸à¸à¸µà¹ à¹à¸§à¸¥à¸²] LT',
            lastWeek: '[à¸§à¸±à¸]dddd[à¸à¸µà¹à¹à¸¥à¹à¸§ à¹à¸§à¸¥à¸²] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'à¸­à¸µà¸ %s',
            past: '%sà¸à¸µà¹à¹à¸¥à¹à¸§',
            s: 'à¹à¸¡à¹à¸à¸µà¹à¸§à¸´à¸à¸²à¸à¸µ',
            ss: '%d à¸§à¸´à¸à¸²à¸à¸µ',
            m: '1 à¸à¸²à¸à¸µ',
            mm: '%d à¸à¸²à¸à¸µ',
            h: '1 à¸à¸±à¹à¸§à¹à¸¡à¸',
            hh: '%d à¸à¸±à¹à¸§à¹à¸¡à¸',
            d: '1 à¸§à¸±à¸',
            dd: '%d à¸§à¸±à¸',
            w: '1 à¸ªà¸±à¸à¸à¸²à¸«à¹',
            ww: '%d à¸ªà¸±à¸à¸à¸²à¸«à¹',
            M: '1 à¹à¸à¸·à¸­à¸',
            MM: '%d à¹à¸à¸·à¸­à¸',
            y: '1 à¸à¸µ',
            yy: '%d à¸à¸µ',
        },
    });

    return th;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/tk.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Turkmen [tk]
//! author : Atamyrat Abdyrahmanov : https://github.com/atamyratabdy

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        1: "'inji",
        5: "'inji",
        8: "'inji",
        70: "'inji",
        80: "'inji",
        2: "'nji",
        7: "'nji",
        20: "'nji",
        50: "'nji",
        3: "'Ã¼nji",
        4: "'Ã¼nji",
        100: "'Ã¼nji",
        6: "'njy",
        9: "'unjy",
        10: "'unjy",
        30: "'unjy",
        60: "'ynjy",
        90: "'ynjy",
    };

    var tk = moment.defineLocale('tk', {
        months: 'Ãanwar_Fewral_Mart_Aprel_MaÃ½_IÃ½un_IÃ½ul_Awgust_SentÃ½abr_OktÃ½abr_NoÃ½abr_Dekabr'.split(
            '_'
        ),
        monthsShort: 'Ãan_Few_Mar_Apr_MaÃ½_IÃ½n_IÃ½l_Awg_Sen_Okt_NoÃ½_Dek'.split('_'),
        weekdays: 'ÃekÅenbe_DuÅenbe_SiÅenbe_ÃarÅenbe_PenÅenbe_Anna_Åenbe'.split(
            '_'
        ),
        weekdaysShort: 'Ãek_DuÅ_SiÅ_Ãar_Pen_Ann_Åen'.split('_'),
        weekdaysMin: 'Ãk_DÅ_SÅ_Ãr_Pn_An_Ån'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[bugÃ¼n sagat] LT',
            nextDay: '[ertir sagat] LT',
            nextWeek: '[indiki] dddd [sagat] LT',
            lastDay: '[dÃ¼Ã½n] LT',
            lastWeek: '[geÃ§en] dddd [sagat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s soÅ',
            past: '%s Ã¶Å',
            s: 'birnÃ¤Ã§e sekunt',
            m: 'bir minut',
            mm: '%d minut',
            h: 'bir sagat',
            hh: '%d sagat',
            d: 'bir gÃ¼n',
            dd: '%d gÃ¼n',
            M: 'bir aÃ½',
            MM: '%d aÃ½',
            y: 'bir Ã½yl',
            yy: '%d Ã½yl',
        },
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'Do':
                case 'DD':
                    return number;
                default:
                    if (number === 0) {
                        // special case for zero
                        return number + "'unjy";
                    }
                    var a = number % 10,
                        b = (number % 100) - a,
                        c = number >= 100 ? 100 : null;
                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return tk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tl-ph.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/tl-ph.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Tagalog (Philippines) [tl-ph]
//! author : Dan Hagman : https://github.com/hagmandan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tlPh = moment.defineLocale('tl-ph', {
        months: 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split(
            '_'
        ),
        monthsShort: 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays: 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split(
            '_'
        ),
        weekdaysShort: 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin: 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'MM/D/YYYY',
            LL: 'MMMM D, YYYY',
            LLL: 'MMMM D, YYYY HH:mm',
            LLLL: 'dddd, MMMM DD, YYYY HH:mm',
        },
        calendar: {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'sa loob ng %s',
            past: '%s ang nakalipas',
            s: 'ilang segundo',
            ss: '%d segundo',
            m: 'isang minuto',
            mm: '%d minuto',
            h: 'isang oras',
            hh: '%d oras',
            d: 'isang araw',
            dd: '%d araw',
            M: 'isang buwan',
            MM: '%d buwan',
            y: 'isang taon',
            yy: '%d taon',
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return tlPh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tlh.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tlh.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Klingon [tlh]
//! author : Dominika Kruk : https://github.com/amaranthrose

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var numbersNouns = 'pagh_waâ_chaâ_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

    function translateFuture(output) {
        var time = output;
        time =
            output.indexOf('jaj') !== -1
                ? time.slice(0, -3) + 'leS'
                : output.indexOf('jar') !== -1
                ? time.slice(0, -3) + 'waQ'
                : output.indexOf('DIS') !== -1
                ? time.slice(0, -3) + 'nem'
                : time + ' pIq';
        return time;
    }

    function translatePast(output) {
        var time = output;
        time =
            output.indexOf('jaj') !== -1
                ? time.slice(0, -3) + 'Huâ'
                : output.indexOf('jar') !== -1
                ? time.slice(0, -3) + 'wen'
                : output.indexOf('DIS') !== -1
                ? time.slice(0, -3) + 'ben'
                : time + ' ret';
        return time;
    }

    function translate(number, withoutSuffix, string, isFuture) {
        var numberNoun = numberAsNoun(number);
        switch (string) {
            case 'ss':
                return numberNoun + ' lup';
            case 'mm':
                return numberNoun + ' tup';
            case 'hh':
                return numberNoun + ' rep';
            case 'dd':
                return numberNoun + ' jaj';
            case 'MM':
                return numberNoun + ' jar';
            case 'yy':
                return numberNoun + ' DIS';
        }
    }

    function numberAsNoun(number) {
        var hundred = Math.floor((number % 1000) / 100),
            ten = Math.floor((number % 100) / 10),
            one = number % 10,
            word = '';
        if (hundred > 0) {
            word += numbersNouns[hundred] + 'vatlh';
        }
        if (ten > 0) {
            word += (word !== '' ? ' ' : '') + numbersNouns[ten] + 'maH';
        }
        if (one > 0) {
            word += (word !== '' ? ' ' : '') + numbersNouns[one];
        }
        return word === '' ? 'pagh' : word;
    }

    var tlh = moment.defineLocale('tlh', {
        months: 'teraâ jar waâ_teraâ jar chaâ_teraâ jar wej_teraâ jar loS_teraâ jar vagh_teraâ jar jav_teraâ jar Soch_teraâ jar chorgh_teraâ jar Hut_teraâ jar waâmaH_teraâ jar waâmaH waâ_teraâ jar waâmaH chaâ'.split(
            '_'
        ),
        monthsShort:
            'jar waâ_jar chaâ_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar waâmaH_jar waâmaH waâ_jar waâmaH chaâ'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split(
            '_'
        ),
        weekdaysShort:
            'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        weekdaysMin:
            'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[DaHjaj] LT',
            nextDay: '[waâleS] LT',
            nextWeek: 'LLL',
            lastDay: '[waâHuâ] LT',
            lastWeek: 'LLL',
            sameElse: 'L',
        },
        relativeTime: {
            future: translateFuture,
            past: translatePast,
            s: 'puS lup',
            ss: translate,
            m: 'waâ tup',
            mm: translate,
            h: 'waâ rep',
            hh: translate,
            d: 'waâ jaj',
            dd: translate,
            M: 'waâ jar',
            MM: translate,
            y: 'waâ DIS',
            yy: translate,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return tlh;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tr.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/tr.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Turkish [tr]
//! authors : Erhan Gundogan : https://github.com/erhangundogan,
//!           Burak YiÄit Kaya: https://github.com/BYK

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var suffixes = {
        1: "'inci",
        5: "'inci",
        8: "'inci",
        70: "'inci",
        80: "'inci",
        2: "'nci",
        7: "'nci",
        20: "'nci",
        50: "'nci",
        3: "'Ã¼ncÃ¼",
        4: "'Ã¼ncÃ¼",
        100: "'Ã¼ncÃ¼",
        6: "'ncÄ±",
        9: "'uncu",
        10: "'uncu",
        30: "'uncu",
        60: "'Ä±ncÄ±",
        90: "'Ä±ncÄ±",
    };

    var tr = moment.defineLocale('tr', {
        months: 'Ocak_Åubat_Mart_Nisan_MayÄ±s_Haziran_Temmuz_AÄustos_EylÃ¼l_Ekim_KasÄ±m_AralÄ±k'.split(
            '_'
        ),
        monthsShort: 'Oca_Åub_Mar_Nis_May_Haz_Tem_AÄu_Eyl_Eki_Kas_Ara'.split('_'),
        weekdays: 'Pazar_Pazartesi_SalÄ±_ÃarÅamba_PerÅembe_Cuma_Cumartesi'.split(
            '_'
        ),
        weekdaysShort: 'Paz_Pzt_Sal_Ãar_Per_Cum_Cmt'.split('_'),
        weekdaysMin: 'Pz_Pt_Sa_Ãa_Pe_Cu_Ct'.split('_'),
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'Ã¶Ã¶' : 'ÃÃ';
            } else {
                return isLower ? 'Ã¶s' : 'ÃS';
            }
        },
        meridiemParse: /Ã¶Ã¶|ÃÃ|Ã¶s|ÃS/,
        isPM: function (input) {
            return input === 'Ã¶s' || input === 'ÃS';
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[bugÃ¼n saat] LT',
            nextDay: '[yarÄ±n saat] LT',
            nextWeek: '[gelecek] dddd [saat] LT',
            lastDay: '[dÃ¼n] LT',
            lastWeek: '[geÃ§en] dddd [saat] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s sonra',
            past: '%s Ã¶nce',
            s: 'birkaÃ§ saniye',
            ss: '%d saniye',
            m: 'bir dakika',
            mm: '%d dakika',
            h: 'bir saat',
            hh: '%d saat',
            d: 'bir gÃ¼n',
            dd: '%d gÃ¼n',
            w: 'bir hafta',
            ww: '%d hafta',
            M: 'bir ay',
            MM: '%d ay',
            y: 'bir yÄ±l',
            yy: '%d yÄ±l',
        },
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'Do':
                case 'DD':
                    return number;
                default:
                    if (number === 0) {
                        // special case for zero
                        return number + "'Ä±ncÄ±";
                    }
                    var a = number % 10,
                        b = (number % 100) - a,
                        c = number >= 100 ? 100 : null;
                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return tr;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tzl.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tzl.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Talossan [tzl]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v
//! author : IustÃ¬ Canun

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
    // This is currently too difficult (maybe even impossible) to add.
    var tzl = moment.defineLocale('tzl', {
        months: 'Januar_Fevraglh_MarÃ§_AvrÃ¯u_Mai_GÃ¼n_Julia_Guscht_Setemvar_ListopÃ¤ts_Noemvar_Zecemvar'.split(
            '_'
        ),
        monthsShort: 'Jan_Fev_Mar_Avr_Mai_GÃ¼n_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
        weekdays: 'SÃºladi_LÃºneÃ§i_Maitzi_MÃ¡rcuri_XhÃºadi_ViÃ©nerÃ§i_SÃ¡turi'.split('_'),
        weekdaysShort: 'SÃºl_LÃºn_Mai_MÃ¡r_XhÃº_ViÃ©_SÃ¡t'.split('_'),
        weekdaysMin: 'SÃº_LÃº_Ma_MÃ¡_Xh_Vi_SÃ¡'.split('_'),
        longDateFormat: {
            LT: 'HH.mm',
            LTS: 'HH.mm.ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM [dallas] YYYY',
            LLL: 'D. MMMM [dallas] YYYY HH.mm',
            LLLL: 'dddd, [li] D. MMMM [dallas] YYYY HH.mm',
        },
        meridiemParse: /d\'o|d\'a/i,
        isPM: function (input) {
            return "d'o" === input.toLowerCase();
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? "d'o" : "D'O";
            } else {
                return isLower ? "d'a" : "D'A";
            }
        },
        calendar: {
            sameDay: '[oxhi Ã ] LT',
            nextDay: '[demÃ  Ã ] LT',
            nextWeek: 'dddd [Ã ] LT',
            lastDay: '[ieiri Ã ] LT',
            lastWeek: '[sÃ¼r el] dddd [lasteu Ã ] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'osprei %s',
            past: 'ja%s',
            s: processRelativeTime,
            ss: processRelativeTime,
            m: processRelativeTime,
            mm: processRelativeTime,
            h: processRelativeTime,
            hh: processRelativeTime,
            d: processRelativeTime,
            dd: processRelativeTime,
            M: processRelativeTime,
            MM: processRelativeTime,
            y: processRelativeTime,
            yy: processRelativeTime,
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            s: ['viensas secunds', "'iensas secunds"],
            ss: [number + ' secunds', '' + number + ' secunds'],
            m: ["'n mÃ­ut", "'iens mÃ­ut"],
            mm: [number + ' mÃ­uts', '' + number + ' mÃ­uts'],
            h: ["'n Ã¾ora", "'iensa Ã¾ora"],
            hh: [number + ' Ã¾oras', '' + number + ' Ã¾oras'],
            d: ["'n ziua", "'iensa ziua"],
            dd: [number + ' ziuas', '' + number + ' ziuas'],
            M: ["'n mes", "'iens mes"],
            MM: [number + ' mesen', '' + number + ' mesen'],
            y: ["'n ar", "'iens ar"],
            yy: [number + ' ars', '' + number + ' ars'],
        };
        return isFuture
            ? format[key][0]
            : withoutSuffix
            ? format[key][0]
            : format[key][1];
    }

    return tzl;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tzm-latn.js":
/*!************************************************!*\
  !*** ./node_modules/moment/locale/tzm-latn.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight Latin [tzm-latn]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tzmLatn = moment.defineLocale('tzm-latn', {
        months: 'innayr_brË¤ayrË¤_marË¤sË¤_ibrir_mayyw_ywnyw_ywlywz_É£wÅ¡t_Å¡wtanbir_ktË¤wbrË¤_nwwanbir_dwjnbir'.split(
            '_'
        ),
        monthsShort:
            'innayr_brË¤ayrË¤_marË¤sË¤_ibrir_mayyw_ywnyw_ywlywz_É£wÅ¡t_Å¡wtanbir_ktË¤wbrË¤_nwwanbir_dwjnbir'.split(
                '_'
            ),
        weekdays: 'asamas_aynas_asinas_akras_akwas_asimwas_asiá¸yas'.split('_'),
        weekdaysShort: 'asamas_aynas_asinas_akras_akwas_asimwas_asiá¸yas'.split('_'),
        weekdaysMin: 'asamas_aynas_asinas_akras_akwas_asimwas_asiá¸yas'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[asdkh g] LT',
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'dadkh s yan %s',
            past: 'yan %s',
            s: 'imik',
            ss: '%d imik',
            m: 'minuá¸',
            mm: '%d minuá¸',
            h: 'saÉa',
            hh: '%d tassaÉin',
            d: 'ass',
            dd: '%d ossan',
            M: 'ayowr',
            MM: '%d iyyirn',
            y: 'asgas',
            yy: '%d isgasn',
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return tzmLatn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/tzm.js":
/*!*******************************************!*\
  !*** ./node_modules/moment/locale/tzm.js ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Central Atlas Tamazight [tzm]
//! author : Abdel Said : https://github.com/abdelsaid

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var tzm = moment.defineLocale('tzm', {
        months: 'âµâµâµâ´°âµ¢âµ_â´±âµâ´°âµ¢âµ_âµâ´°âµâµ_âµâ´±âµâµâµ_âµâ´°âµ¢âµ¢âµ_âµ¢âµâµâµ¢âµ_âµ¢âµâµâµ¢âµâµ£_âµâµâµâµ_âµâµâµâ´°âµâ´±âµâµ_â´½âµâµâ´±âµ_âµâµâµ¡â´°âµâ´±âµâµ_â´·âµâµâµâ´±âµâµ'.split(
            '_'
        ),
        monthsShort:
            'âµâµâµâ´°âµ¢âµ_â´±âµâ´°âµ¢âµ_âµâ´°âµâµ_âµâ´±âµâµâµ_âµâ´°âµ¢âµ¢âµ_âµ¢âµâµâµ¢âµ_âµ¢âµâµâµ¢âµâµ£_âµâµâµâµ_âµâµâµâ´°âµâ´±âµâµ_â´½âµâµâ´±âµ_âµâµâµ¡â´°âµâ´±âµâµ_â´·âµâµâµâ´±âµâµ'.split(
                '_'
            ),
        weekdays: 'â´°âµâ´°âµâ´°âµ_â´°âµ¢âµâ´°âµ_â´°âµâµâµâ´°âµ_â´°â´½âµâ´°âµ_â´°â´½âµ¡â´°âµ_â´°âµâµâµâµ¡â´°âµ_â´°âµâµâ´¹âµ¢â´°âµ'.split('_'),
        weekdaysShort: 'â´°âµâ´°âµâ´°âµ_â´°âµ¢âµâ´°âµ_â´°âµâµâµâ´°âµ_â´°â´½âµâ´°âµ_â´°â´½âµ¡â´°âµ_â´°âµâµâµâµ¡â´°âµ_â´°âµâµâ´¹âµ¢â´°âµ'.split('_'),
        weekdaysMin: 'â´°âµâ´°âµâ´°âµ_â´°âµ¢âµâ´°âµ_â´°âµâµâµâ´°âµ_â´°â´½âµâ´°âµ_â´°â´½âµ¡â´°âµ_â´°âµâµâµâµ¡â´°âµ_â´°âµâµâ´¹âµ¢â´°âµ'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[â´°âµâ´·âµ â´´] LT',
            nextDay: '[â´°âµâ´½â´° â´´] LT',
            nextWeek: 'dddd [â´´] LT',
            lastDay: '[â´°âµâ´°âµâµ â´´] LT',
            lastWeek: 'dddd [â´´] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'â´·â´°â´·âµ âµ âµ¢â´°âµ %s',
            past: 'âµ¢â´°âµ %s',
            s: 'âµâµâµâ´½',
            ss: '%d âµâµâµâ´½',
            m: 'âµâµâµâµâ´º',
            mm: '%d âµâµâµâµâ´º',
            h: 'âµâ´°âµâ´°',
            hh: '%d âµâ´°âµâµâ´°âµâµâµ',
            d: 'â´°âµâµ',
            dd: '%d oâµâµâ´°âµ',
            M: 'â´°âµ¢oâµâµ',
            MM: '%d âµâµ¢âµ¢âµâµâµ',
            y: 'â´°âµâ´³â´°âµ',
            yy: '%d âµâµâ´³â´°âµâµ',
        },
        week: {
            dow: 6, // Saturday is the first day of the week.
            doy: 12, // The week that contains Jan 12th is the first week of the year.
        },
    });

    return tzm;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ug-cn.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/ug-cn.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uyghur (China) [ug-cn]
//! author: boyaq : https://github.com/boyaq

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var ugCn = moment.defineLocale('ug-cn', {
        months: 'ÙØ§ÙÛØ§Ø±_ÙÛÛØ±Ø§Ù_ÙØ§Ø±Øª_Ø¦Ø§Ù¾Ø±ÛÙ_ÙØ§Ù_Ø¦ÙÙÛÙ_Ø¦ÙÙÛÙ_Ø¦Ø§ÛØºÛØ³Øª_Ø³ÛÙØªÛØ¨ÙØ±_Ø¦ÛÙØªÛØ¨ÙØ±_ÙÙÙØ§Ø¨ÙØ±_Ø¯ÛÙØ§Ø¨ÙØ±'.split(
            '_'
        ),
        monthsShort:
            'ÙØ§ÙÛØ§Ø±_ÙÛÛØ±Ø§Ù_ÙØ§Ø±Øª_Ø¦Ø§Ù¾Ø±ÛÙ_ÙØ§Ù_Ø¦ÙÙÛÙ_Ø¦ÙÙÛÙ_Ø¦Ø§ÛØºÛØ³Øª_Ø³ÛÙØªÛØ¨ÙØ±_Ø¦ÛÙØªÛØ¨ÙØ±_ÙÙÙØ§Ø¨ÙØ±_Ø¯ÛÙØ§Ø¨ÙØ±'.split(
                '_'
            ),
        weekdays: 'ÙÛÙØ´ÛÙØ¨Û_Ø¯ÛØ´ÛÙØ¨Û_Ø³ÛÙØ´ÛÙØ¨Û_ÚØ§Ø±Ø´ÛÙØ¨Û_Ù¾ÛÙØ´ÛÙØ¨Û_Ø¬ÛÙÛ_Ø´ÛÙØ¨Û'.split(
            '_'
        ),
        weekdaysShort: 'ÙÛ_Ø¯Û_Ø³Û_ÚØ§_Ù¾Û_Ø¬Û_Ø´Û'.split('_'),
        weekdaysMin: 'ÙÛ_Ø¯Û_Ø³Û_ÚØ§_Ù¾Û_Ø¬Û_Ø´Û'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY-ÙÙÙÙM-Ø¦Ø§ÙÙÙÚ­D-ÙÛÙÙ',
            LLL: 'YYYY-ÙÙÙÙM-Ø¦Ø§ÙÙÙÚ­D-ÙÛÙÙØ HH:mm',
            LLLL: 'ddddØ YYYY-ÙÙÙÙM-Ø¦Ø§ÙÙÙÚ­D-ÙÛÙÙØ HH:mm',
        },
        meridiemParse: /ÙÛØ±ÙÙ ÙÛÚÛ|Ø³ÛÚ¾ÛØ±|ÚÛØ´ØªÙÙ Ø¨ÛØ±ÛÙ|ÚÛØ´|ÚÛØ´ØªÙÙ ÙÛÙÙÙ|ÙÛÚ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                meridiem === 'ÙÛØ±ÙÙ ÙÛÚÛ' ||
                meridiem === 'Ø³ÛÚ¾ÛØ±' ||
                meridiem === 'ÚÛØ´ØªÙÙ Ø¨ÛØ±ÛÙ'
            ) {
                return hour;
            } else if (meridiem === 'ÚÛØ´ØªÙÙ ÙÛÙÙÙ' || meridiem === 'ÙÛÚ') {
                return hour + 12;
            } else {
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return 'ÙÛØ±ÙÙ ÙÛÚÛ';
            } else if (hm < 900) {
                return 'Ø³ÛÚ¾ÛØ±';
            } else if (hm < 1130) {
                return 'ÚÛØ´ØªÙÙ Ø¨ÛØ±ÛÙ';
            } else if (hm < 1230) {
                return 'ÚÛØ´';
            } else if (hm < 1800) {
                return 'ÚÛØ´ØªÙÙ ÙÛÙÙÙ';
            } else {
                return 'ÙÛÚ';
            }
        },
        calendar: {
            sameDay: '[Ø¨ÛÚ¯ÛÙ Ø³Ø§Ø¦ÛØª] LT',
            nextDay: '[Ø¦ÛØªÛ Ø³Ø§Ø¦ÛØª] LT',
            nextWeek: '[ÙÛÙÛØ±ÙÙ] dddd [Ø³Ø§Ø¦ÛØª] LT',
            lastDay: '[ØªÛÙÛÚ¯ÛÙ] LT',
            lastWeek: '[Ø¦Ø§ÙØ¯ÙÙÙÙ] dddd [Ø³Ø§Ø¦ÛØª] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s ÙÛÙÙÙ',
            past: '%s Ø¨ÛØ±ÛÙ',
            s: 'ÙÛÚÚÛ Ø³ÛÙÙÙØª',
            ss: '%d Ø³ÛÙÙÙØª',
            m: 'Ø¨ÙØ± ÙÙÙÛØª',
            mm: '%d ÙÙÙÛØª',
            h: 'Ø¨ÙØ± Ø³Ø§Ø¦ÛØª',
            hh: '%d Ø³Ø§Ø¦ÛØª',
            d: 'Ø¨ÙØ± ÙÛÙ',
            dd: '%d ÙÛÙ',
            M: 'Ø¨ÙØ± Ø¦Ø§Ù',
            MM: '%d Ø¦Ø§Ù',
            y: 'Ø¨ÙØ± ÙÙÙ',
            yy: '%d ÙÙÙ',
        },

        dayOfMonthOrdinalParse: /\d{1,2}(-ÙÛÙÙ|-Ø¦Ø§Ù|-Ú¾ÛÙ¾ØªÛ)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '-ÙÛÙÙ';
                case 'w':
                case 'W':
                    return number + '-Ú¾ÛÙ¾ØªÛ';
                default:
                    return number;
            }
        },
        preparse: function (string) {
            return string.replace(/Ø/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, 'Ø');
        },
        week: {
            // GB/T 7408-1994ãæ°æ®ååäº¤æ¢æ ¼å¼Â·ä¿¡æ¯äº¤æ¢Â·æ¥æåæ¶é´è¡¨ç¤ºæ³ãä¸ISO 8601:1988ç­æ
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 1st is the first week of the year.
        },
    });

    return ugCn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/uk.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/uk.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Ukrainian [uk]
//! author : zemlanin : https://github.com/zemlanin
//! Author : Menelion ElensÃºle : https://github.com/Oire

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11
            ? forms[0]
            : num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20)
            ? forms[1]
            : forms[2];
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            ss: withoutSuffix ? 'ÑÐµÐºÑÐ½Ð´Ð°_ÑÐµÐºÑÐ½Ð´Ð¸_ÑÐµÐºÑÐ½Ð´' : 'ÑÐµÐºÑÐ½Ð´Ñ_ÑÐµÐºÑÐ½Ð´Ð¸_ÑÐµÐºÑÐ½Ð´',
            mm: withoutSuffix ? 'ÑÐ²Ð¸Ð»Ð¸Ð½Ð°_ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸_ÑÐ²Ð¸Ð»Ð¸Ð½' : 'ÑÐ²Ð¸Ð»Ð¸Ð½Ñ_ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸_ÑÐ²Ð¸Ð»Ð¸Ð½',
            hh: withoutSuffix ? 'Ð³Ð¾Ð´Ð¸Ð½Ð°_Ð³Ð¾Ð´Ð¸Ð½Ð¸_Ð³Ð¾Ð´Ð¸Ð½' : 'Ð³Ð¾Ð´Ð¸Ð½Ñ_Ð³Ð¾Ð´Ð¸Ð½Ð¸_Ð³Ð¾Ð´Ð¸Ð½',
            dd: 'Ð´ÐµÐ½Ñ_Ð´Ð½Ñ_Ð´Ð½ÑÐ²',
            MM: 'Ð¼ÑÑÑÑÑ_Ð¼ÑÑÑÑÑ_Ð¼ÑÑÑÑÑÐ²',
            yy: 'ÑÑÐº_ÑÐ¾ÐºÐ¸_ÑÐ¾ÐºÑÐ²',
        };
        if (key === 'm') {
            return withoutSuffix ? 'ÑÐ²Ð¸Ð»Ð¸Ð½Ð°' : 'ÑÐ²Ð¸Ð»Ð¸Ð½Ñ';
        } else if (key === 'h') {
            return withoutSuffix ? 'Ð³Ð¾Ð´Ð¸Ð½Ð°' : 'Ð³Ð¾Ð´Ð¸Ð½Ñ';
        } else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    function weekdaysCaseReplace(m, format) {
        var weekdays = {
                nominative:
                    'Ð½ÐµÐ´ÑÐ»Ñ_Ð¿Ð¾Ð½ÐµÐ´ÑÐ»Ð¾Ðº_Ð²ÑÐ²ÑÐ¾ÑÐ¾Ðº_ÑÐµÑÐµÐ´Ð°_ÑÐµÑÐ²ÐµÑ_Ð¿âÑÑÐ½Ð¸ÑÑ_ÑÑÐ±Ð¾ÑÐ°'.split(
                        '_'
                    ),
                accusative:
                    'Ð½ÐµÐ´ÑÐ»Ñ_Ð¿Ð¾Ð½ÐµÐ´ÑÐ»Ð¾Ðº_Ð²ÑÐ²ÑÐ¾ÑÐ¾Ðº_ÑÐµÑÐµÐ´Ñ_ÑÐµÑÐ²ÐµÑ_Ð¿âÑÑÐ½Ð¸ÑÑ_ÑÑÐ±Ð¾ÑÑ'.split(
                        '_'
                    ),
                genitive:
                    'Ð½ÐµÐ´ÑÐ»Ñ_Ð¿Ð¾Ð½ÐµÐ´ÑÐ»ÐºÐ°_Ð²ÑÐ²ÑÐ¾ÑÐºÐ°_ÑÐµÑÐµÐ´Ð¸_ÑÐµÑÐ²ÐµÑÐ³Ð°_Ð¿âÑÑÐ½Ð¸ÑÑ_ÑÑÐ±Ð¾ÑÐ¸'.split(
                        '_'
                    ),
            },
            nounCase;

        if (m === true) {
            return weekdays['nominative']
                .slice(1, 7)
                .concat(weekdays['nominative'].slice(0, 1));
        }
        if (!m) {
            return weekdays['nominative'];
        }

        nounCase = /(\[[ÐÐ²Ð£Ñ]\]) ?dddd/.test(format)
            ? 'accusative'
            : /\[?(?:Ð¼Ð¸Ð½ÑÐ»Ð¾Ñ|Ð½Ð°ÑÑÑÐ¿Ð½Ð¾Ñ)? ?\] ?dddd/.test(format)
            ? 'genitive'
            : 'nominative';
        return weekdays[nounCase][m.day()];
    }
    function processHoursFunction(str) {
        return function () {
            return str + 'Ð¾' + (this.hours() === 11 ? 'Ð±' : '') + '] LT';
        };
    }

    var uk = moment.defineLocale('uk', {
        months: {
            format: 'ÑÑÑÐ½Ñ_Ð»ÑÑÐ¾Ð³Ð¾_Ð±ÐµÑÐµÐ·Ð½Ñ_ÐºÐ²ÑÑÐ½Ñ_ÑÑÐ°Ð²Ð½Ñ_ÑÐµÑÐ²Ð½Ñ_Ð»Ð¸Ð¿Ð½Ñ_ÑÐµÑÐ¿Ð½Ñ_Ð²ÐµÑÐµÑÐ½Ñ_Ð¶Ð¾Ð²ÑÐ½Ñ_Ð»Ð¸ÑÑÐ¾Ð¿Ð°Ð´Ð°_Ð³ÑÑÐ´Ð½Ñ'.split(
                '_'
            ),
            standalone:
                'ÑÑÑÐµÐ½Ñ_Ð»ÑÑÐ¸Ð¹_Ð±ÐµÑÐµÐ·ÐµÐ½Ñ_ÐºÐ²ÑÑÐµÐ½Ñ_ÑÑÐ°Ð²ÐµÐ½Ñ_ÑÐµÑÐ²ÐµÐ½Ñ_Ð»Ð¸Ð¿ÐµÐ½Ñ_ÑÐµÑÐ¿ÐµÐ½Ñ_Ð²ÐµÑÐµÑÐµÐ½Ñ_Ð¶Ð¾Ð²ÑÐµÐ½Ñ_Ð»Ð¸ÑÑÐ¾Ð¿Ð°Ð´_Ð³ÑÑÐ´ÐµÐ½Ñ'.split(
                    '_'
                ),
        },
        monthsShort: 'ÑÑÑ_Ð»ÑÑ_Ð±ÐµÑ_ÐºÐ²ÑÑ_ÑÑÐ°Ð²_ÑÐµÑÐ²_Ð»Ð¸Ð¿_ÑÐµÑÐ¿_Ð²ÐµÑ_Ð¶Ð¾Ð²Ñ_Ð»Ð¸ÑÑ_Ð³ÑÑÐ´'.split(
            '_'
        ),
        weekdays: weekdaysCaseReplace,
        weekdaysShort: 'Ð½Ð´_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±'.split('_'),
        weekdaysMin: 'Ð½Ð´_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D MMMM YYYY Ñ.',
            LLL: 'D MMMM YYYY Ñ., HH:mm',
            LLLL: 'dddd, D MMMM YYYY Ñ., HH:mm',
        },
        calendar: {
            sameDay: processHoursFunction('[Ð¡ÑÐ¾Ð³Ð¾Ð´Ð½Ñ '),
            nextDay: processHoursFunction('[ÐÐ°Ð²ÑÑÐ° '),
            lastDay: processHoursFunction('[ÐÑÐ¾ÑÐ° '),
            nextWeek: processHoursFunction('[Ð£] dddd ['),
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return processHoursFunction('[ÐÐ¸Ð½ÑÐ»Ð¾Ñ] dddd [').call(this);
                    case 1:
                    case 2:
                    case 4:
                        return processHoursFunction('[ÐÐ¸Ð½ÑÐ»Ð¾Ð³Ð¾] dddd [').call(this);
                }
            },
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Ð·Ð° %s',
            past: '%s ÑÐ¾Ð¼Ñ',
            s: 'Ð´ÐµÐºÑÐ»ÑÐºÐ° ÑÐµÐºÑÐ½Ð´',
            ss: relativeTimeWithPlural,
            m: relativeTimeWithPlural,
            mm: relativeTimeWithPlural,
            h: 'Ð³Ð¾Ð´Ð¸Ð½Ñ',
            hh: relativeTimeWithPlural,
            d: 'Ð´ÐµÐ½Ñ',
            dd: relativeTimeWithPlural,
            M: 'Ð¼ÑÑÑÑÑ',
            MM: relativeTimeWithPlural,
            y: 'ÑÑÐº',
            yy: relativeTimeWithPlural,
        },
        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
        meridiemParse: /Ð½Ð¾ÑÑ|ÑÐ°Ð½ÐºÑ|Ð´Ð½Ñ|Ð²ÐµÑÐ¾ÑÐ°/,
        isPM: function (input) {
            return /^(Ð´Ð½Ñ|Ð²ÐµÑÐ¾ÑÐ°)$/.test(input);
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'Ð½Ð¾ÑÑ';
            } else if (hour < 12) {
                return 'ÑÐ°Ð½ÐºÑ';
            } else if (hour < 17) {
                return 'Ð´Ð½Ñ';
            } else {
                return 'Ð²ÐµÑÐ¾ÑÐ°';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(Ð¹|Ð³Ð¾)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return number + '-Ð¹';
                case 'D':
                    return number + '-Ð³Ð¾';
                default:
                    return number;
            }
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return uk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/ur.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/ur.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Urdu [ur]
//! author : Sawood Alam : https://github.com/ibnesayeed
//! author : Zack : https://github.com/ZackVision

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var months = [
            'Ø¬ÙÙØ±Û',
            'ÙØ±ÙØ±Û',
            'ÙØ§Ø±Ú',
            'Ø§Ù¾Ø±ÛÙ',
            'ÙØ¦Û',
            'Ø¬ÙÙ',
            'Ø¬ÙÙØ§Ø¦Û',
            'Ø§Ú¯Ø³Øª',
            'Ø³ØªÙØ¨Ø±',
            'Ø§Ú©ØªÙØ¨Ø±',
            'ÙÙÙØ¨Ø±',
            'Ø¯Ø³ÙØ¨Ø±',
        ],
        days = ['Ø§ØªÙØ§Ø±', 'Ù¾ÛØ±', 'ÙÙÚ¯Ù', 'Ø¨Ø¯Ú¾', 'Ø¬ÙØ¹Ø±Ø§Øª', 'Ø¬ÙØ¹Û', 'ÛÙØªÛ'];

    var ur = moment.defineLocale('ur', {
        months: months,
        monthsShort: months,
        weekdays: days,
        weekdaysShort: days,
        weekdaysMin: days,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'ddddØ D MMMM YYYY HH:mm',
        },
        meridiemParse: /ØµØ¨Ø­|Ø´Ø§Ù/,
        isPM: function (input) {
            return 'Ø´Ø§Ù' === input;
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ØµØ¨Ø­';
            }
            return 'Ø´Ø§Ù';
        },
        calendar: {
            sameDay: '[Ø¢Ø¬ Ø¨ÙÙØª] LT',
            nextDay: '[Ú©Ù Ø¨ÙÙØª] LT',
            nextWeek: 'dddd [Ø¨ÙÙØª] LT',
            lastDay: '[Ú¯Ø°Ø´ØªÛ Ø±ÙØ² Ø¨ÙÙØª] LT',
            lastWeek: '[Ú¯Ø°Ø´ØªÛ] dddd [Ø¨ÙÙØª] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s Ø¨Ø¹Ø¯',
            past: '%s ÙØ¨Ù',
            s: 'ÚÙØ¯ Ø³ÛÚ©ÙÚ',
            ss: '%d Ø³ÛÚ©ÙÚ',
            m: 'Ø§ÛÚ© ÙÙÙ¹',
            mm: '%d ÙÙÙ¹',
            h: 'Ø§ÛÚ© Ú¯Ú¾ÙÙ¹Û',
            hh: '%d Ú¯Ú¾ÙÙ¹Û',
            d: 'Ø§ÛÚ© Ø¯Ù',
            dd: '%d Ø¯Ù',
            M: 'Ø§ÛÚ© ÙØ§Û',
            MM: '%d ÙØ§Û',
            y: 'Ø§ÛÚ© Ø³Ø§Ù',
            yy: '%d Ø³Ø§Ù',
        },
        preparse: function (string) {
            return string.replace(/Ø/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, 'Ø');
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return ur;

})));


/***/ }),

/***/ "./node_modules/moment/locale/uz-latn.js":
/*!***********************************************!*\
  !*** ./node_modules/moment/locale/uz-latn.js ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek Latin [uz-latn]
//! author : Rasulbek Mirzayev : github.com/Rasulbeeek

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var uzLatn = moment.defineLocale('uz-latn', {
        months: 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split(
            '_'
        ),
        monthsShort: 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
        weekdays:
            'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split(
                '_'
            ),
        weekdaysShort: 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
        weekdaysMin: 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm',
        },
        calendar: {
            sameDay: '[Bugun soat] LT [da]',
            nextDay: '[Ertaga] LT [da]',
            nextWeek: 'dddd [kuni soat] LT [da]',
            lastDay: '[Kecha soat] LT [da]',
            lastWeek: "[O'tgan] dddd [kuni soat] LT [da]",
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Yaqin %s ichida',
            past: 'Bir necha %s oldin',
            s: 'soniya',
            ss: '%d soniya',
            m: 'bir daqiqa',
            mm: '%d daqiqa',
            h: 'bir soat',
            hh: '%d soat',
            d: 'bir kun',
            dd: '%d kun',
            M: 'bir oy',
            MM: '%d oy',
            y: 'bir yil',
            yy: '%d yil',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 7th is the first week of the year.
        },
    });

    return uzLatn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/uz.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/uz.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Uzbek [uz]
//! author : Sardor Muminov : https://github.com/muminoff

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var uz = moment.defineLocale('uz', {
        months: 'ÑÐ½Ð²Ð°Ñ_ÑÐµÐ²ÑÐ°Ð»_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐµÐ»_Ð¼Ð°Ð¹_Ð¸ÑÐ½_Ð¸ÑÐ»_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ½ÑÑÐ±Ñ_Ð¾ÐºÑÑÐ±Ñ_Ð½Ð¾ÑÐ±Ñ_Ð´ÐµÐºÐ°Ð±Ñ'.split(
            '_'
        ),
        monthsShort: 'ÑÐ½Ð²_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½_Ð¸ÑÐ»_Ð°Ð²Ð³_ÑÐµÐ½_Ð¾ÐºÑ_Ð½Ð¾Ñ_Ð´ÐµÐº'.split('_'),
        weekdays: 'Ð¯ÐºÑÐ°Ð½Ð±Ð°_ÐÑÑÐ°Ð½Ð±Ð°_Ð¡ÐµÑÐ°Ð½Ð±Ð°_Ð§Ð¾ÑÑÐ°Ð½Ð±Ð°_ÐÐ°Ð¹ÑÐ°Ð½Ð±Ð°_ÐÑÐ¼Ð°_Ð¨Ð°Ð½Ð±Ð°'.split('_'),
        weekdaysShort: 'Ð¯ÐºÑ_ÐÑÑ_Ð¡ÐµÑ_Ð§Ð¾Ñ_ÐÐ°Ð¹_ÐÑÐ¼_Ð¨Ð°Ð½'.split('_'),
        weekdaysMin: 'Ð¯Ðº_ÐÑ_Ð¡Ðµ_Ð§Ð¾_ÐÐ°_ÐÑ_Ð¨Ð°'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'D MMMM YYYY, dddd HH:mm',
        },
        calendar: {
            sameDay: '[ÐÑÐ³ÑÐ½ ÑÐ¾Ð°Ñ] LT [Ð´Ð°]',
            nextDay: '[Ð­ÑÑÐ°Ð³Ð°] LT [Ð´Ð°]',
            nextWeek: 'dddd [ÐºÑÐ½Ð¸ ÑÐ¾Ð°Ñ] LT [Ð´Ð°]',
            lastDay: '[ÐÐµÑÐ° ÑÐ¾Ð°Ñ] LT [Ð´Ð°]',
            lastWeek: '[Ð£ÑÐ³Ð°Ð½] dddd [ÐºÑÐ½Ð¸ ÑÐ¾Ð°Ñ] LT [Ð´Ð°]',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Ð¯ÐºÐ¸Ð½ %s Ð¸ÑÐ¸Ð´Ð°',
            past: 'ÐÐ¸Ñ Ð½ÐµÑÐ° %s Ð¾Ð»Ð´Ð¸Ð½',
            s: 'ÑÑÑÑÐ°Ñ',
            ss: '%d ÑÑÑÑÐ°Ñ',
            m: 'Ð±Ð¸Ñ Ð´Ð°ÐºÐ¸ÐºÐ°',
            mm: '%d Ð´Ð°ÐºÐ¸ÐºÐ°',
            h: 'Ð±Ð¸Ñ ÑÐ¾Ð°Ñ',
            hh: '%d ÑÐ¾Ð°Ñ',
            d: 'Ð±Ð¸Ñ ÐºÑÐ½',
            dd: '%d ÐºÑÐ½',
            M: 'Ð±Ð¸Ñ Ð¾Ð¹',
            MM: '%d Ð¾Ð¹',
            y: 'Ð±Ð¸Ñ Ð¹Ð¸Ð»',
            yy: '%d Ð¹Ð¸Ð»',
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 7, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return uz;

})));


/***/ }),

/***/ "./node_modules/moment/locale/vi.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/vi.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Vietnamese [vi]
//! author : Bang Nguyen : https://github.com/bangnk
//! author : Chien Kira : https://github.com/chienkira

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var vi = moment.defineLocale('vi', {
        months: 'thÃ¡ng 1_thÃ¡ng 2_thÃ¡ng 3_thÃ¡ng 4_thÃ¡ng 5_thÃ¡ng 6_thÃ¡ng 7_thÃ¡ng 8_thÃ¡ng 9_thÃ¡ng 10_thÃ¡ng 11_thÃ¡ng 12'.split(
            '_'
        ),
        monthsShort:
            'Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays: 'chá»§ nháº­t_thá»© hai_thá»© ba_thá»© tÆ°_thá»© nÄm_thá»© sÃ¡u_thá»© báº£y'.split(
            '_'
        ),
        weekdaysShort: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysMin: 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysParseExact: true,
        meridiemParse: /sa|ch/i,
        isPM: function (input) {
            return /^ch$/i.test(input);
        },
        meridiem: function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'sa' : 'SA';
            } else {
                return isLower ? 'ch' : 'CH';
            }
        },
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM [nÄm] YYYY',
            LLL: 'D MMMM [nÄm] YYYY HH:mm',
            LLLL: 'dddd, D MMMM [nÄm] YYYY HH:mm',
            l: 'DD/M/YYYY',
            ll: 'D MMM YYYY',
            lll: 'D MMM YYYY HH:mm',
            llll: 'ddd, D MMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[HÃ´m nay lÃºc] LT',
            nextDay: '[NgÃ y mai lÃºc] LT',
            nextWeek: 'dddd [tuáº§n tá»i lÃºc] LT',
            lastDay: '[HÃ´m qua lÃºc] LT',
            lastWeek: 'dddd [tuáº§n trÆ°á»c lÃºc] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: '%s tá»i',
            past: '%s trÆ°á»c',
            s: 'vÃ i giÃ¢y',
            ss: '%d giÃ¢y',
            m: 'má»t phÃºt',
            mm: '%d phÃºt',
            h: 'má»t giá»',
            hh: '%d giá»',
            d: 'má»t ngÃ y',
            dd: '%d ngÃ y',
            w: 'má»t tuáº§n',
            ww: '%d tuáº§n',
            M: 'má»t thÃ¡ng',
            MM: '%d thÃ¡ng',
            y: 'má»t nÄm',
            yy: '%d nÄm',
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal: function (number) {
            return number;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return vi;

})));


/***/ }),

/***/ "./node_modules/moment/locale/x-pseudo.js":
/*!************************************************!*\
  !*** ./node_modules/moment/locale/x-pseudo.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Pseudo [x-pseudo]
//! author : Andrew Hood : https://github.com/andrewhood125

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var xPseudo = moment.defineLocale('x-pseudo', {
        months: 'J~Ã¡Ã±ÃºÃ¡~rÃ½_F~Ã©brÃº~Ã¡rÃ½_~MÃ¡rc~h_Ãp~rÃ­l_~MÃ¡Ã½_~JÃºÃ±Ã©~_JÃºl~Ã½_ÃÃº~gÃºst~_SÃ©p~tÃ©mb~Ã©r_Ã~ctÃ³b~Ã©r_Ã~Ã³vÃ©m~bÃ©r_~DÃ©cÃ©~mbÃ©r'.split(
            '_'
        ),
        monthsShort:
            'J~Ã¡Ã±_~FÃ©b_~MÃ¡r_~Ãpr_~MÃ¡Ã½_~JÃºÃ±_~JÃºl_~ÃÃºg_~SÃ©p_~Ãct_~ÃÃ³v_~DÃ©c'.split(
                '_'
            ),
        monthsParseExact: true,
        weekdays:
            'S~ÃºÃ±dÃ¡~Ã½_MÃ³~Ã±dÃ¡Ã½~_TÃºÃ©~sdÃ¡Ã½~_WÃ©d~Ã±Ã©sd~Ã¡Ã½_T~hÃºrs~dÃ¡Ã½_~FrÃ­d~Ã¡Ã½_S~Ã¡tÃºr~dÃ¡Ã½'.split(
                '_'
            ),
        weekdaysShort: 'S~ÃºÃ±_~MÃ³Ã±_~TÃºÃ©_~WÃ©d_~ThÃº_~FrÃ­_~SÃ¡t'.split('_'),
        weekdaysMin: 'S~Ãº_MÃ³~_TÃº_~WÃ©_T~h_Fr~_SÃ¡'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm',
        },
        calendar: {
            sameDay: '[T~Ã³dÃ¡~Ã½ Ã¡t] LT',
            nextDay: '[T~Ã³mÃ³~rrÃ³~w Ã¡t] LT',
            nextWeek: 'dddd [Ã¡t] LT',
            lastDay: '[Ã~Ã©st~Ã©rdÃ¡~Ã½ Ã¡t] LT',
            lastWeek: '[L~Ã¡st] dddd [Ã¡t] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'Ã­~Ã± %s',
            past: '%s Ã¡~gÃ³',
            s: 'Ã¡ ~fÃ©w ~sÃ©cÃ³~Ã±ds',
            ss: '%d s~Ã©cÃ³Ã±~ds',
            m: 'Ã¡ ~mÃ­Ã±~ÃºtÃ©',
            mm: '%d m~Ã­Ã±Ãº~tÃ©s',
            h: 'Ã¡~Ã± hÃ³~Ãºr',
            hh: '%d h~Ã³Ãºrs',
            d: 'Ã¡ ~dÃ¡Ã½',
            dd: '%d d~Ã¡Ã½s',
            M: 'Ã¡ ~mÃ³Ã±~th',
            MM: '%d m~Ã³Ã±t~hs',
            y: 'Ã¡ ~Ã½Ã©Ã¡r',
            yy: '%d Ã½~Ã©Ã¡rs',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    ~~((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return xPseudo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/yo.js":
/*!******************************************!*\
  !*** ./node_modules/moment/locale/yo.js ***!
  \******************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Yoruba Nigeria [yo]
//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var yo = moment.defineLocale('yo', {
        months: 'Sáº¹Ìráº¹Ì_EÌreÌleÌ_áº¸ráº¹ÌnaÌ_IÌgbeÌ_EÌbibi_OÌkuÌdu_Agáº¹mo_OÌguÌn_Owewe_á»ÌwaÌraÌ_BeÌluÌ_á»Ìpáº¹ÌÌ'.split(
            '_'
        ),
        monthsShort: 'Sáº¹Ìr_EÌrl_áº¸rn_IÌgb_EÌbi_OÌkuÌ_Agáº¹_OÌguÌ_Owe_á»ÌwaÌ_BeÌl_á»Ìpáº¹ÌÌ'.split('_'),
        weekdays: 'AÌiÌkuÌ_AjeÌ_IÌsáº¹Ìgun_á»já»ÌruÌ_á»já»Ìbá»_áº¸tiÌ_AÌbaÌmáº¹Ìta'.split('_'),
        weekdaysShort: 'AÌiÌk_AjeÌ_IÌsáº¹Ì_á»jr_á»jb_áº¸tiÌ_AÌbaÌ'.split('_'),
        weekdaysMin: 'AÌiÌ_Aj_IÌs_á»r_á»b_áº¸t_AÌb'.split('_'),
        longDateFormat: {
            LT: 'h:mm A',
            LTS: 'h:mm:ss A',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY h:mm A',
            LLLL: 'dddd, D MMMM YYYY h:mm A',
        },
        calendar: {
            sameDay: '[OÌniÌ ni] LT',
            nextDay: '[á»Ìla ni] LT',
            nextWeek: "dddd [á»sáº¹Ì toÌn'bá»] [ni] LT",
            lastDay: '[AÌna ni] LT',
            lastWeek: 'dddd [á»sáº¹Ì toÌlá»Ì] [ni] LT',
            sameElse: 'L',
        },
        relativeTime: {
            future: 'niÌ %s',
            past: '%s ká»jaÌ',
            s: 'iÌsáº¹juÌ aayaÌ die',
            ss: 'aayaÌ %d',
            m: 'iÌsáº¹juÌ kan',
            mm: 'iÌsáº¹juÌ %d',
            h: 'waÌkati kan',
            hh: 'waÌkati %d',
            d: 'á»já»Ì kan',
            dd: 'á»já»Ì %d',
            M: 'osuÌ kan',
            MM: 'osuÌ %d',
            y: 'á»duÌn kan',
            yy: 'á»duÌn %d',
        },
        dayOfMonthOrdinalParse: /á»já»Ì\s\d{1,2}/,
        ordinal: 'á»já»Ì %d',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return yo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-cn.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-cn.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (China) [zh-cn]
//! author : suupic : https://github.com/suupic
//! author : Zeno Zeng : https://github.com/zenozeng
//! author : uu109 : https://github.com/uu109

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhCn = moment.defineLocale('zh-cn', {
        months: 'ä¸æ_äºæ_ä¸æ_åæ_äºæ_å­æ_ä¸æ_å«æ_ä¹æ_åæ_åä¸æ_åäºæ'.split(
            '_'
        ),
        monthsShort: '1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ'.split(
            '_'
        ),
        weekdays: 'æææ¥_ææä¸_ææäº_ææä¸_ææå_ææäº_ææå­'.split('_'),
        weekdaysShort: 'å¨æ¥_å¨ä¸_å¨äº_å¨ä¸_å¨å_å¨äº_å¨å­'.split('_'),
        weekdaysMin: 'æ¥_ä¸_äº_ä¸_å_äº_å­'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYYå¹´MæDæ¥',
            LLL: 'YYYYå¹´MæDæ¥Ahç¹mmå',
            LLLL: 'YYYYå¹´MæDæ¥ddddAhç¹mmå',
            l: 'YYYY/M/D',
            ll: 'YYYYå¹´MæDæ¥',
            lll: 'YYYYå¹´MæDæ¥ HH:mm',
            llll: 'YYYYå¹´MæDæ¥dddd HH:mm',
        },
        meridiemParse: /åæ¨|æ©ä¸|ä¸å|ä¸­å|ä¸å|æä¸/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'åæ¨' || meridiem === 'æ©ä¸' || meridiem === 'ä¸å') {
                return hour;
            } else if (meridiem === 'ä¸å' || meridiem === 'æä¸') {
                return hour + 12;
            } else {
                // 'ä¸­å'
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return 'åæ¨';
            } else if (hm < 900) {
                return 'æ©ä¸';
            } else if (hm < 1130) {
                return 'ä¸å';
            } else if (hm < 1230) {
                return 'ä¸­å';
            } else if (hm < 1800) {
                return 'ä¸å';
            } else {
                return 'æä¸';
            }
        },
        calendar: {
            sameDay: '[ä»å¤©]LT',
            nextDay: '[æå¤©]LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    return '[ä¸]dddLT';
                } else {
                    return '[æ¬]dddLT';
                }
            },
            lastDay: '[æ¨å¤©]LT',
            lastWeek: function (now) {
                if (this.week() !== now.week()) {
                    return '[ä¸]dddLT';
                } else {
                    return '[æ¬]dddLT';
                }
            },
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(æ¥|æ|å¨)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + 'æ¥';
                case 'M':
                    return number + 'æ';
                case 'w':
                case 'W':
                    return number + 'å¨';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%så',
            past: '%så',
            s: 'å ç§',
            ss: '%d ç§',
            m: '1 åé',
            mm: '%d åé',
            h: '1 å°æ¶',
            hh: '%d å°æ¶',
            d: '1 å¤©',
            dd: '%d å¤©',
            w: '1 å¨',
            ww: '%d å¨',
            M: '1 ä¸ªæ',
            MM: '%d ä¸ªæ',
            y: '1 å¹´',
            yy: '%d å¹´',
        },
        week: {
            // GB/T 7408-1994ãæ°æ®ååäº¤æ¢æ ¼å¼Â·ä¿¡æ¯äº¤æ¢Â·æ¥æåæ¶é´è¡¨ç¤ºæ³ãä¸ISO 8601:1988ç­æ
            dow: 1, // Monday is the first day of the week.
            doy: 4, // The week that contains Jan 4th is the first week of the year.
        },
    });

    return zhCn;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-hk.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-hk.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Hong Kong) [zh-hk]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris
//! author : Konstantin : https://github.com/skfd
//! author : Anthony : https://github.com/anthonylau

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhHk = moment.defineLocale('zh-hk', {
        months: 'ä¸æ_äºæ_ä¸æ_åæ_äºæ_å­æ_ä¸æ_å«æ_ä¹æ_åæ_åä¸æ_åäºæ'.split(
            '_'
        ),
        monthsShort: '1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ'.split(
            '_'
        ),
        weekdays: 'æææ¥_ææä¸_ææäº_ææä¸_ææå_ææäº_ææå­'.split('_'),
        weekdaysShort: 'é±æ¥_é±ä¸_é±äº_é±ä¸_é±å_é±äº_é±å­'.split('_'),
        weekdaysMin: 'æ¥_ä¸_äº_ä¸_å_äº_å­'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYYå¹´MæDæ¥',
            LLL: 'YYYYå¹´MæDæ¥ HH:mm',
            LLLL: 'YYYYå¹´MæDæ¥dddd HH:mm',
            l: 'YYYY/M/D',
            ll: 'YYYYå¹´MæDæ¥',
            lll: 'YYYYå¹´MæDæ¥ HH:mm',
            llll: 'YYYYå¹´MæDæ¥dddd HH:mm',
        },
        meridiemParse: /åæ¨|æ©ä¸|ä¸å|ä¸­å|ä¸å|æä¸/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'åæ¨' || meridiem === 'æ©ä¸' || meridiem === 'ä¸å') {
                return hour;
            } else if (meridiem === 'ä¸­å') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'ä¸å' || meridiem === 'æä¸') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return 'åæ¨';
            } else if (hm < 900) {
                return 'æ©ä¸';
            } else if (hm < 1200) {
                return 'ä¸å';
            } else if (hm === 1200) {
                return 'ä¸­å';
            } else if (hm < 1800) {
                return 'ä¸å';
            } else {
                return 'æä¸';
            }
        },
        calendar: {
            sameDay: '[ä»å¤©]LT',
            nextDay: '[æå¤©]LT',
            nextWeek: '[ä¸]ddddLT',
            lastDay: '[æ¨å¤©]LT',
            lastWeek: '[ä¸]ddddLT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(æ¥|æ|é±)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + 'æ¥';
                case 'M':
                    return number + 'æ';
                case 'w':
                case 'W':
                    return number + 'é±';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%så¾',
            past: '%så',
            s: 'å¹¾ç§',
            ss: '%d ç§',
            m: '1 åé',
            mm: '%d åé',
            h: '1 å°æ',
            hh: '%d å°æ',
            d: '1 å¤©',
            dd: '%d å¤©',
            M: '1 åæ',
            MM: '%d åæ',
            y: '1 å¹´',
            yy: '%d å¹´',
        },
    });

    return zhHk;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-mo.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-mo.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Macau) [zh-mo]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris
//! author : Tan Yuanhong : https://github.com/le0tan

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhMo = moment.defineLocale('zh-mo', {
        months: 'ä¸æ_äºæ_ä¸æ_åæ_äºæ_å­æ_ä¸æ_å«æ_ä¹æ_åæ_åä¸æ_åäºæ'.split(
            '_'
        ),
        monthsShort: '1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ'.split(
            '_'
        ),
        weekdays: 'æææ¥_ææä¸_ææäº_ææä¸_ææå_ææäº_ææå­'.split('_'),
        weekdaysShort: 'é±æ¥_é±ä¸_é±äº_é±ä¸_é±å_é±äº_é±å­'.split('_'),
        weekdaysMin: 'æ¥_ä¸_äº_ä¸_å_äº_å­'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'YYYYå¹´MæDæ¥',
            LLL: 'YYYYå¹´MæDæ¥ HH:mm',
            LLLL: 'YYYYå¹´MæDæ¥dddd HH:mm',
            l: 'D/M/YYYY',
            ll: 'YYYYå¹´MæDæ¥',
            lll: 'YYYYå¹´MæDæ¥ HH:mm',
            llll: 'YYYYå¹´MæDæ¥dddd HH:mm',
        },
        meridiemParse: /åæ¨|æ©ä¸|ä¸å|ä¸­å|ä¸å|æä¸/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'åæ¨' || meridiem === 'æ©ä¸' || meridiem === 'ä¸å') {
                return hour;
            } else if (meridiem === 'ä¸­å') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'ä¸å' || meridiem === 'æä¸') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return 'åæ¨';
            } else if (hm < 900) {
                return 'æ©ä¸';
            } else if (hm < 1130) {
                return 'ä¸å';
            } else if (hm < 1230) {
                return 'ä¸­å';
            } else if (hm < 1800) {
                return 'ä¸å';
            } else {
                return 'æä¸';
            }
        },
        calendar: {
            sameDay: '[ä»å¤©] LT',
            nextDay: '[æå¤©] LT',
            nextWeek: '[ä¸]dddd LT',
            lastDay: '[æ¨å¤©] LT',
            lastWeek: '[ä¸]dddd LT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(æ¥|æ|é±)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + 'æ¥';
                case 'M':
                    return number + 'æ';
                case 'w':
                case 'W':
                    return number + 'é±';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%så§',
            past: '%så',
            s: 'å¹¾ç§',
            ss: '%d ç§',
            m: '1 åé',
            mm: '%d åé',
            h: '1 å°æ',
            hh: '%d å°æ',
            d: '1 å¤©',
            dd: '%d å¤©',
            M: '1 åæ',
            MM: '%d åæ',
            y: '1 å¹´',
            yy: '%d å¹´',
        },
    });

    return zhMo;

})));


/***/ }),

/***/ "./node_modules/moment/locale/zh-tw.js":
/*!*********************************************!*\
  !*** ./node_modules/moment/locale/zh-tw.js ***!
  \*********************************************/
/***/ (function(__unused_webpack_module, __unused_webpack_exports, __webpack_require__) {

//! moment.js locale configuration
//! locale : Chinese (Taiwan) [zh-tw]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris

;(function (global, factory) {
    true ? factory(__webpack_require__(/*! ../moment */ "./node_modules/moment/moment.js")) :
   0
}(this, (function (moment) { 'use strict';

    //! moment.js locale configuration

    var zhTw = moment.defineLocale('zh-tw', {
        months: 'ä¸æ_äºæ_ä¸æ_åæ_äºæ_å­æ_ä¸æ_å«æ_ä¹æ_åæ_åä¸æ_åäºæ'.split(
            '_'
        ),
        monthsShort: '1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ'.split(
            '_'
        ),
        weekdays: 'æææ¥_ææä¸_ææäº_ææä¸_ææå_ææäº_ææå­'.split('_'),
        weekdaysShort: 'é±æ¥_é±ä¸_é±äº_é±ä¸_é±å_é±äº_é±å­'.split('_'),
        weekdaysMin: 'æ¥_ä¸_äº_ä¸_å_äº_å­'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY/MM/DD',
            LL: 'YYYYå¹´MæDæ¥',
            LLL: 'YYYYå¹´MæDæ¥ HH:mm',
            LLLL: 'YYYYå¹´MæDæ¥dddd HH:mm',
            l: 'YYYY/M/D',
            ll: 'YYYYå¹´MæDæ¥',
            lll: 'YYYYå¹´MæDæ¥ HH:mm',
            llll: 'YYYYå¹´MæDæ¥dddd HH:mm',
        },
        meridiemParse: /åæ¨|æ©ä¸|ä¸å|ä¸­å|ä¸å|æä¸/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'åæ¨' || meridiem === 'æ©ä¸' || meridiem === 'ä¸å') {
                return hour;
            } else if (meridiem === 'ä¸­å') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'ä¸å' || meridiem === 'æä¸') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return 'åæ¨';
            } else if (hm < 900) {
                return 'æ©ä¸';
            } else if (hm < 1130) {
                return 'ä¸å';
            } else if (hm < 1230) {
                return 'ä¸­å';
            } else if (hm < 1800) {
                return 'ä¸å';
            } else {
                return 'æä¸';
            }
        },
        calendar: {
            sameDay: '[ä»å¤©] LT',
            nextDay: '[æå¤©] LT',
            nextWeek: '[ä¸]dddd LT',
            lastDay: '[æ¨å¤©] LT',
            lastWeek: '[ä¸]dddd LT',
            sameElse: 'L',
        },
        dayOfMonthOrdinalParse: /\d{1,2}(æ¥|æ|é±)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + 'æ¥';
                case 'M':
                    return number + 'æ';
                case 'w':
                case 'W':
                    return number + 'é±';
                default:
                    return number;
            }
        },
        relativeTime: {
            future: '%så¾',
            past: '%så',
            s: 'å¹¾ç§',
            ss: '%d ç§',
            m: '1 åé',
            mm: '%d åé',
            h: '1 å°æ',
            hh: '%d å°æ',
            d: '1 å¤©',
            dd: '%d å¤©',
            M: '1 åæ',
            MM: '%d åæ',
            y: '1 å¹´',
            yy: '%d å¹´',
        },
    });

    return zhTw;

})));


/***/ }),

/***/ "./node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!***************************************************!*\
  !*** ./node_modules/moment/locale/ sync ^\.\/.*$ ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

var map = {
	"./af": "./node_modules/moment/locale/af.js",
	"./af.js": "./node_modules/moment/locale/af.js",
	"./ar": "./node_modules/moment/locale/ar.js",
	"./ar-dz": "./node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "./node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "./node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "./node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "./node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "./node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "./node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "./node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "./node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "./node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "./node_modules/moment/locale/ar-tn.js",
	"./ar.js": "./node_modules/moment/locale/ar.js",
	"./az": "./node_modules/moment/locale/az.js",
	"./az.js": "./node_modules/moment/locale/az.js",
	"./be": "./node_modules/moment/locale/be.js",
	"./be.js": "./node_modules/moment/locale/be.js",
	"./bg": "./node_modules/moment/locale/bg.js",
	"./bg.js": "./node_modules/moment/locale/bg.js",
	"./bm": "./node_modules/moment/locale/bm.js",
	"./bm.js": "./node_modules/moment/locale/bm.js",
	"./bn": "./node_modules/moment/locale/bn.js",
	"./bn-bd": "./node_modules/moment/locale/bn-bd.js",
	"./bn-bd.js": "./node_modules/moment/locale/bn-bd.js",
	"./bn.js": "./node_modules/moment/locale/bn.js",
	"./bo": "./node_modules/moment/locale/bo.js",
	"./bo.js": "./node_modules/moment/locale/bo.js",
	"./br": "./node_modules/moment/locale/br.js",
	"./br.js": "./node_modules/moment/locale/br.js",
	"./bs": "./node_modules/moment/locale/bs.js",
	"./bs.js": "./node_modules/moment/locale/bs.js",
	"./ca": "./node_modules/moment/locale/ca.js",
	"./ca.js": "./node_modules/moment/locale/ca.js",
	"./cs": "./node_modules/moment/locale/cs.js",
	"./cs.js": "./node_modules/moment/locale/cs.js",
	"./cv": "./node_modules/moment/locale/cv.js",
	"./cv.js": "./node_modules/moment/locale/cv.js",
	"./cy": "./node_modules/moment/locale/cy.js",
	"./cy.js": "./node_modules/moment/locale/cy.js",
	"./da": "./node_modules/moment/locale/da.js",
	"./da.js": "./node_modules/moment/locale/da.js",
	"./de": "./node_modules/moment/locale/de.js",
	"./de-at": "./node_modules/moment/locale/de-at.js",
	"./de-at.js": "./node_modules/moment/locale/de-at.js",
	"./de-ch": "./node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "./node_modules/moment/locale/de-ch.js",
	"./de.js": "./node_modules/moment/locale/de.js",
	"./dv": "./node_modules/moment/locale/dv.js",
	"./dv.js": "./node_modules/moment/locale/dv.js",
	"./el": "./node_modules/moment/locale/el.js",
	"./el.js": "./node_modules/moment/locale/el.js",
	"./en-au": "./node_modules/moment/locale/en-au.js",
	"./en-au.js": "./node_modules/moment/locale/en-au.js",
	"./en-ca": "./node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "./node_modules/moment/locale/en-ca.js",
	"./en-gb": "./node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "./node_modules/moment/locale/en-gb.js",
	"./en-ie": "./node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "./node_modules/moment/locale/en-ie.js",
	"./en-il": "./node_modules/moment/locale/en-il.js",
	"./en-il.js": "./node_modules/moment/locale/en-il.js",
	"./en-in": "./node_modules/moment/locale/en-in.js",
	"./en-in.js": "./node_modules/moment/locale/en-in.js",
	"./en-nz": "./node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "./node_modules/moment/locale/en-nz.js",
	"./en-sg": "./node_modules/moment/locale/en-sg.js",
	"./en-sg.js": "./node_modules/moment/locale/en-sg.js",
	"./eo": "./node_modules/moment/locale/eo.js",
	"./eo.js": "./node_modules/moment/locale/eo.js",
	"./es": "./node_modules/moment/locale/es.js",
	"./es-do": "./node_modules/moment/locale/es-do.js",
	"./es-do.js": "./node_modules/moment/locale/es-do.js",
	"./es-mx": "./node_modules/moment/locale/es-mx.js",
	"./es-mx.js": "./node_modules/moment/locale/es-mx.js",
	"./es-us": "./node_modules/moment/locale/es-us.js",
	"./es-us.js": "./node_modules/moment/locale/es-us.js",
	"./es.js": "./node_modules/moment/locale/es.js",
	"./et": "./node_modules/moment/locale/et.js",
	"./et.js": "./node_modules/moment/locale/et.js",
	"./eu": "./node_modules/moment/locale/eu.js",
	"./eu.js": "./node_modules/moment/locale/eu.js",
	"./fa": "./node_modules/moment/locale/fa.js",
	"./fa.js": "./node_modules/moment/locale/fa.js",
	"./fi": "./node_modules/moment/locale/fi.js",
	"./fi.js": "./node_modules/moment/locale/fi.js",
	"./fil": "./node_modules/moment/locale/fil.js",
	"./fil.js": "./node_modules/moment/locale/fil.js",
	"./fo": "./node_modules/moment/locale/fo.js",
	"./fo.js": "./node_modules/moment/locale/fo.js",
	"./fr": "./node_modules/moment/locale/fr.js",
	"./fr-ca": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "./node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "./node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "./node_modules/moment/locale/fr-ch.js",
	"./fr.js": "./node_modules/moment/locale/fr.js",
	"./fy": "./node_modules/moment/locale/fy.js",
	"./fy.js": "./node_modules/moment/locale/fy.js",
	"./ga": "./node_modules/moment/locale/ga.js",
	"./ga.js": "./node_modules/moment/locale/ga.js",
	"./gd": "./node_modules/moment/locale/gd.js",
	"./gd.js": "./node_modules/moment/locale/gd.js",
	"./gl": "./node_modules/moment/locale/gl.js",
	"./gl.js": "./node_modules/moment/locale/gl.js",
	"./gom-deva": "./node_modules/moment/locale/gom-deva.js",
	"./gom-deva.js": "./node_modules/moment/locale/gom-deva.js",
	"./gom-latn": "./node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "./node_modules/moment/locale/gom-latn.js",
	"./gu": "./node_modules/moment/locale/gu.js",
	"./gu.js": "./node_modules/moment/locale/gu.js",
	"./he": "./node_modules/moment/locale/he.js",
	"./he.js": "./node_modules/moment/locale/he.js",
	"./hi": "./node_modules/moment/locale/hi.js",
	"./hi.js": "./node_modules/moment/locale/hi.js",
	"./hr": "./node_modules/moment/locale/hr.js",
	"./hr.js": "./node_modules/moment/locale/hr.js",
	"./hu": "./node_modules/moment/locale/hu.js",
	"./hu.js": "./node_modules/moment/locale/hu.js",
	"./hy-am": "./node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "./node_modules/moment/locale/hy-am.js",
	"./id": "./node_modules/moment/locale/id.js",
	"./id.js": "./node_modules/moment/locale/id.js",
	"./is": "./node_modules/moment/locale/is.js",
	"./is.js": "./node_modules/moment/locale/is.js",
	"./it": "./node_modules/moment/locale/it.js",
	"./it-ch": "./node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "./node_modules/moment/locale/it-ch.js",
	"./it.js": "./node_modules/moment/locale/it.js",
	"./ja": "./node_modules/moment/locale/ja.js",
	"./ja.js": "./node_modules/moment/locale/ja.js",
	"./jv": "./node_modules/moment/locale/jv.js",
	"./jv.js": "./node_modules/moment/locale/jv.js",
	"./ka": "./node_modules/moment/locale/ka.js",
	"./ka.js": "./node_modules/moment/locale/ka.js",
	"./kk": "./node_modules/moment/locale/kk.js",
	"./kk.js": "./node_modules/moment/locale/kk.js",
	"./km": "./node_modules/moment/locale/km.js",
	"./km.js": "./node_modules/moment/locale/km.js",
	"./kn": "./node_modules/moment/locale/kn.js",
	"./kn.js": "./node_modules/moment/locale/kn.js",
	"./ko": "./node_modules/moment/locale/ko.js",
	"./ko.js": "./node_modules/moment/locale/ko.js",
	"./ku": "./node_modules/moment/locale/ku.js",
	"./ku.js": "./node_modules/moment/locale/ku.js",
	"./ky": "./node_modules/moment/locale/ky.js",
	"./ky.js": "./node_modules/moment/locale/ky.js",
	"./lb": "./node_modules/moment/locale/lb.js",
	"./lb.js": "./node_modules/moment/locale/lb.js",
	"./lo": "./node_modules/moment/locale/lo.js",
	"./lo.js": "./node_modules/moment/locale/lo.js",
	"./lt": "./node_modules/moment/locale/lt.js",
	"./lt.js": "./node_modules/moment/locale/lt.js",
	"./lv": "./node_modules/moment/locale/lv.js",
	"./lv.js": "./node_modules/moment/locale/lv.js",
	"./me": "./node_modules/moment/locale/me.js",
	"./me.js": "./node_modules/moment/locale/me.js",
	"./mi": "./node_modules/moment/locale/mi.js",
	"./mi.js": "./node_modules/moment/locale/mi.js",
	"./mk": "./node_modules/moment/locale/mk.js",
	"./mk.js": "./node_modules/moment/locale/mk.js",
	"./ml": "./node_modules/moment/locale/ml.js",
	"./ml.js": "./node_modules/moment/locale/ml.js",
	"./mn": "./node_modules/moment/locale/mn.js",
	"./mn.js": "./node_modules/moment/locale/mn.js",
	"./mr": "./node_modules/moment/locale/mr.js",
	"./mr.js": "./node_modules/moment/locale/mr.js",
	"./ms": "./node_modules/moment/locale/ms.js",
	"./ms-my": "./node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "./node_modules/moment/locale/ms-my.js",
	"./ms.js": "./node_modules/moment/locale/ms.js",
	"./mt": "./node_modules/moment/locale/mt.js",
	"./mt.js": "./node_modules/moment/locale/mt.js",
	"./my": "./node_modules/moment/locale/my.js",
	"./my.js": "./node_modules/moment/locale/my.js",
	"./nb": "./node_modules/moment/locale/nb.js",
	"./nb.js": "./node_modules/moment/locale/nb.js",
	"./ne": "./node_modules/moment/locale/ne.js",
	"./ne.js": "./node_modules/moment/locale/ne.js",
	"./nl": "./node_modules/moment/locale/nl.js",
	"./nl-be": "./node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "./node_modules/moment/locale/nl-be.js",
	"./nl.js": "./node_modules/moment/locale/nl.js",
	"./nn": "./node_modules/moment/locale/nn.js",
	"./nn.js": "./node_modules/moment/locale/nn.js",
	"./oc-lnc": "./node_modules/moment/locale/oc-lnc.js",
	"./oc-lnc.js": "./node_modules/moment/locale/oc-lnc.js",
	"./pa-in": "./node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "./node_modules/moment/locale/pa-in.js",
	"./pl": "./node_modules/moment/locale/pl.js",
	"./pl.js": "./node_modules/moment/locale/pl.js",
	"./pt": "./node_modules/moment/locale/pt.js",
	"./pt-br": "./node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "./node_modules/moment/locale/pt-br.js",
	"./pt.js": "./node_modules/moment/locale/pt.js",
	"./ro": "./node_modules/moment/locale/ro.js",
	"./ro.js": "./node_modules/moment/locale/ro.js",
	"./ru": "./node_modules/moment/locale/ru.js",
	"./ru.js": "./node_modules/moment/locale/ru.js",
	"./sd": "./node_modules/moment/locale/sd.js",
	"./sd.js": "./node_modules/moment/locale/sd.js",
	"./se": "./node_modules/moment/locale/se.js",
	"./se.js": "./node_modules/moment/locale/se.js",
	"./si": "./node_modules/moment/locale/si.js",
	"./si.js": "./node_modules/moment/locale/si.js",
	"./sk": "./node_modules/moment/locale/sk.js",
	"./sk.js": "./node_modules/moment/locale/sk.js",
	"./sl": "./node_modules/moment/locale/sl.js",
	"./sl.js": "./node_modules/moment/locale/sl.js",
	"./sq": "./node_modules/moment/locale/sq.js",
	"./sq.js": "./node_modules/moment/locale/sq.js",
	"./sr": "./node_modules/moment/locale/sr.js",
	"./sr-cyrl": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "./node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "./node_modules/moment/locale/sr.js",
	"./ss": "./node_modules/moment/locale/ss.js",
	"./ss.js": "./node_modules/moment/locale/ss.js",
	"./sv": "./node_modules/moment/locale/sv.js",
	"./sv.js": "./node_modules/moment/locale/sv.js",
	"./sw": "./node_modules/moment/locale/sw.js",
	"./sw.js": "./node_modules/moment/locale/sw.js",
	"./ta": "./node_modules/moment/locale/ta.js",
	"./ta.js": "./node_modules/moment/locale/ta.js",
	"./te": "./node_modules/moment/locale/te.js",
	"./te.js": "./node_modules/moment/locale/te.js",
	"./tet": "./node_modules/moment/locale/tet.js",
	"./tet.js": "./node_modules/moment/locale/tet.js",
	"./tg": "./node_modules/moment/locale/tg.js",
	"./tg.js": "./node_modules/moment/locale/tg.js",
	"./th": "./node_modules/moment/locale/th.js",
	"./th.js": "./node_modules/moment/locale/th.js",
	"./tk": "./node_modules/moment/locale/tk.js",
	"./tk.js": "./node_modules/moment/locale/tk.js",
	"./tl-ph": "./node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "./node_modules/moment/locale/tl-ph.js",
	"./tlh": "./node_modules/moment/locale/tlh.js",
	"./tlh.js": "./node_modules/moment/locale/tlh.js",
	"./tr": "./node_modules/moment/locale/tr.js",
	"./tr.js": "./node_modules/moment/locale/tr.js",
	"./tzl": "./node_modules/moment/locale/tzl.js",
	"./tzl.js": "./node_modules/moment/locale/tzl.js",
	"./tzm": "./node_modules/moment/locale/tzm.js",
	"./tzm-latn": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "./node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "./node_modules/moment/locale/tzm.js",
	"./ug-cn": "./node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "./node_modules/moment/locale/ug-cn.js",
	"./uk": "./node_modules/moment/locale/uk.js",
	"./uk.js": "./node_modules/moment/locale/uk.js",
	"./ur": "./node_modules/moment/locale/ur.js",
	"./ur.js": "./node_modules/moment/locale/ur.js",
	"./uz": "./node_modules/moment/locale/uz.js",
	"./uz-latn": "./node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "./node_modules/moment/locale/uz-latn.js",
	"./uz.js": "./node_modules/moment/locale/uz.js",
	"./vi": "./node_modules/moment/locale/vi.js",
	"./vi.js": "./node_modules/moment/locale/vi.js",
	"./x-pseudo": "./node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "./node_modules/moment/locale/x-pseudo.js",
	"./yo": "./node_modules/moment/locale/yo.js",
	"./yo.js": "./node_modules/moment/locale/yo.js",
	"./zh-cn": "./node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "./node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "./node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "./node_modules/moment/locale/zh-hk.js",
	"./zh-mo": "./node_modules/moment/locale/zh-mo.js",
	"./zh-mo.js": "./node_modules/moment/locale/zh-mo.js",
	"./zh-tw": "./node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "./node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "./node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "./node_modules/moment/moment.js":
/*!***************************************!*\
  !*** ./node_modules/moment/moment.js ***!
  \***************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* module decorator */ module = __webpack_require__.nmd(module);
//! moment.js
//! version : 2.29.4
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

;(function (global, factory) {
     true ? module.exports = factory() :
    0
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks() {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback(callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return (
            input instanceof Array ||
            Object.prototype.toString.call(input) === '[object Array]'
        );
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return (
            input != null &&
            Object.prototype.toString.call(input) === '[object Object]'
        );
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return Object.getOwnPropertyNames(obj).length === 0;
        } else {
            var k;
            for (k in obj) {
                if (hasOwnProp(obj, k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return (
            typeof input === 'number' ||
            Object.prototype.toString.call(input) === '[object Number]'
        );
    }

    function isDate(input) {
        return (
            input instanceof Date ||
            Object.prototype.toString.call(input) === '[object Date]'
        );
    }

    function map(arr, fn) {
        var res = [],
            i,
            arrLen = arr.length;
        for (i = 0; i < arrLen; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty: false,
            unusedTokens: [],
            unusedInput: [],
            overflow: -2,
            charsLeftOver: 0,
            nullInput: false,
            invalidEra: null,
            invalidMonth: null,
            invalidFormat: false,
            userInvalidated: false,
            iso: false,
            parsedDateParts: [],
            era: null,
            meridiem: null,
            rfc2822: false,
            weekdayMismatch: false,
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this),
                len = t.length >>> 0,
                i;

            for (i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m),
                parsedParts = some.call(flags.parsedDateParts, function (i) {
                    return i != null;
                }),
                isNowValid =
                    !isNaN(m._d.getTime()) &&
                    flags.overflow < 0 &&
                    !flags.empty &&
                    !flags.invalidEra &&
                    !flags.invalidMonth &&
                    !flags.invalidWeekday &&
                    !flags.weekdayMismatch &&
                    !flags.nullInput &&
                    !flags.invalidFormat &&
                    !flags.userInvalidated &&
                    (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid =
                    isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            } else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        } else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = (hooks.momentProperties = []),
        updateInProgress = false;

    function copyConfig(to, from) {
        var i,
            prop,
            val,
            momentPropertiesLen = momentProperties.length;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentPropertiesLen > 0) {
            for (i = 0; i < momentPropertiesLen; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment(obj) {
        return (
            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
        );
    }

    function warn(msg) {
        if (
            hooks.suppressDeprecationWarnings === false &&
            typeof console !== 'undefined' &&
            console.warn
        ) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [],
                    arg,
                    i,
                    key,
                    argLen = arguments.length;
                for (i = 0; i < argLen; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (key in arguments[0]) {
                            if (hasOwnProp(arguments[0], key)) {
                                arg += key + ': ' + arguments[0][key] + ', ';
                            }
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(
                    msg +
                        '\nArguments: ' +
                        Array.prototype.slice.call(args).join('') +
                        '\n' +
                        new Error().stack
                );
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return (
            (typeof Function !== 'undefined' && input instanceof Function) ||
            Object.prototype.toString.call(input) === '[object Function]'
        );
    }

    function set(config) {
        var prop, i;
        for (i in config) {
            if (hasOwnProp(config, i)) {
                prop = config[i];
                if (isFunction(prop)) {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' +
                /\d{1,2}/.source
        );
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig),
            prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (
                hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])
            ) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i,
                res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L',
    };

    function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (
            (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
            absNumber
        );
    }

    var formattingTokens =
            /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
        formatFunctions = {},
        formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(
                    func.apply(this, arguments),
                    token
                );
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens),
            i,
            length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '',
                i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i])
                    ? array[i].call(mom, format)
                    : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] =
            formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(
                localFormattingTokens,
                replaceLongDateFormatTokens
            );
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A',
    };

    function longDateFormat(key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper
            .match(formattingTokens)
            .map(function (tok) {
                if (
                    tok === 'MMMM' ||
                    tok === 'MM' ||
                    tok === 'DD' ||
                    tok === 'dddd'
                ) {
                    return tok.slice(1);
                }
                return tok;
            })
            .join('');

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate() {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d',
        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal(number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        ss: '%d seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        w: 'a week',
        ww: '%d weeks',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years',
    };

    function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output)
            ? output(number, withoutSuffix, string, isFuture)
            : output.replace(/%d/i, number);
    }

    function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string'
            ? aliases[units] || aliases[units.toLowerCase()]
            : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [],
            u;
        for (u in unitsObj) {
            if (hasOwnProp(unitsObj, u)) {
                units.push({ unit: u, priority: priorities[u] });
            }
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function absFloor(number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    function makeGetSet(unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get(mom, unit) {
        return mom.isValid()
            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
            : NaN;
    }

    function set$1(mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (
                unit === 'FullYear' &&
                isLeapYear(mom.year()) &&
                mom.month() === 1 &&
                mom.date() === 29
            ) {
                value = toInt(value);
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
                    value,
                    mom.month(),
                    daysInMonth(value, mom.month())
                );
            } else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }

    function stringSet(units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units),
                i,
                prioritizedLen = prioritized.length;
            for (i = 0; i < prioritizedLen; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    var match1 = /\d/, //       0 - 9
        match2 = /\d\d/, //      00 - 99
        match3 = /\d{3}/, //     000 - 999
        match4 = /\d{4}/, //    0000 - 9999
        match6 = /[+-]?\d{6}/, // -999999 - 999999
        match1to2 = /\d\d?/, //       0 - 99
        match3to4 = /\d\d\d\d?/, //     999 - 9999
        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
        match1to3 = /\d{1,3}/, //       0 - 999
        match1to4 = /\d{1,4}/, //       0 - 9999
        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
        matchUnsigned = /\d+/, //       0 - inf
        matchSigned = /[+-]?\d+/, //    -inf - inf
        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        // any word (or two) characters or numbers including two/three word month in arabic.
        // includes scottish gaelic two word and hyphenated months
        matchWord =
            /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
        regexes;

    regexes = {};

    function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex)
            ? regex
            : function (isStrict, localeData) {
                  return isStrict && strictRegex ? strictRegex : regex;
              };
    }

    function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(
            s
                .replace('\\', '')
                .replace(
                    /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
                    function (matched, p1, p2, p3, p4) {
                        return p1 || p2 || p3 || p4;
                    }
                )
        );
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken(token, callback) {
        var i,
            func = callback,
            tokenLen;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        tokenLen = token.length;
        for (i = 0; i < tokenLen; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,
        WEEK = 7,
        WEEKDAY = 8;

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1
            ? isLeapYear(year)
                ? 29
                : 28
            : 31 - ((modMonth % 7) % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M', match1to2);
    addRegexToken('MM', match1to2, match2);
    addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var defaultLocaleMonths =
            'January_February_March_April_May_June_July_August_September_October_November_December'.split(
                '_'
            ),
        defaultLocaleMonthsShort =
            'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
        defaultMonthsShortRegex = matchWord,
        defaultMonthsRegex = matchWord;

    function localeMonths(m, format) {
        if (!m) {
            return isArray(this._months)
                ? this._months
                : this._months['standalone'];
        }
        return isArray(this._months)
            ? this._months[m.month()]
            : this._months[
                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
                      ? 'format'
                      : 'standalone'
              ][m.month()];
    }

    function localeMonthsShort(m, format) {
        if (!m) {
            return isArray(this._monthsShort)
                ? this._monthsShort
                : this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort)
            ? this._monthsShort[m.month()]
            : this._monthsShort[
                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
              ][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i,
            ii,
            mom,
            llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp(
                    '^' + this.months(mom, '').replace('.', '') + '$',
                    'i'
                );
                this._shortMonthsParse[i] = new RegExp(
                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
                    'i'
                );
            }
            if (!strict && !this._monthsParse[i]) {
                regex =
                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'MMMM' &&
                this._longMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'MMM' &&
                this._shortMonthsParse[i].test(monthName)
            ) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth(mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth(value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
    }

    function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict
                ? this._monthsShortStrictRegex
                : this._monthsShortRegex;
        }
    }

    function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict
                ? this._monthsStrictRegex
                : this._monthsRegex;
        }
    }

    function computeMonthsParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._monthsShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY', 4], 0, 'year');
    addFormatToken(0, ['YYYYY', 5], 0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y', matchSigned);
    addRegexToken('YY', match1to2, match2);
    addRegexToken('YYYY', match1to4, match4);
    addRegexToken('YYYYY', match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] =
            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear() {
        return isLeapYear(this.year());
    }

    function createDate(y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date;
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            date = new Date(y + 400, m, d, h, M, s, ms);
            if (isFinite(date.getFullYear())) {
                date.setFullYear(y);
            }
        } else {
            date = new Date(y, m, d, h, M, s, ms);
        }

        return date;
    }

    function createUTCDate(y) {
        var date, args;
        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            args = Array.prototype.slice.call(arguments);
            // preserve leap years using a full 400 year cycle, then reset
            args[0] = y + 400;
            date = new Date(Date.UTC.apply(null, args));
            if (isFinite(date.getUTCFullYear())) {
                date.setUTCFullYear(y);
            }
        } else {
            date = new Date(Date.UTC.apply(null, arguments));
        }

        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear,
            resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear,
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek,
            resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear,
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w', match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W', match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(
        ['w', 'ww', 'W', 'WW'],
        function (input, week, config, token) {
            week[token.substr(0, 1)] = toInt(input);
        }
    );

    // HELPERS

    // LOCALES

    function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow: 0, // Sunday is the first day of the week.
        doy: 6, // The week that contains Jan 6th is the first week of the year.
    };

    function localeFirstDayOfWeek() {
        return this._week.dow;
    }

    function localeFirstDayOfYear() {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d', match1to2);
    addRegexToken('e', match1to2);
    addRegexToken('E', match1to2);
    addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES
    function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
    }

    var defaultLocaleWeekdays =
            'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        defaultWeekdaysRegex = matchWord,
        defaultWeekdaysShortRegex = matchWord,
        defaultWeekdaysMinRegex = matchWord;

    function localeWeekdays(m, format) {
        var weekdays = isArray(this._weekdays)
            ? this._weekdays
            : this._weekdays[
                  m && m !== true && this._weekdays.isFormat.test(format)
                      ? 'format'
                      : 'standalone'
              ];
        return m === true
            ? shiftWeekdays(weekdays, this._week.dow)
            : m
            ? weekdays[m.day()]
            : weekdays;
    }

    function localeWeekdaysShort(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
            : m
            ? this._weekdaysShort[m.day()]
            : this._weekdaysShort;
    }

    function localeWeekdaysMin(m) {
        return m === true
            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
            : m
            ? this._weekdaysMin[m.day()]
            : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i,
            ii,
            mom,
            llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(
                    mom,
                    ''
                ).toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._shortWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
                this._minWeekdaysParse[i] = new RegExp(
                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
                    'i'
                );
            }
            if (!this._weekdaysParse[i]) {
                regex =
                    '^' +
                    this.weekdays(mom, '') +
                    '|^' +
                    this.weekdaysShort(mom, '') +
                    '|^' +
                    this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (
                strict &&
                format === 'dddd' &&
                this._fullWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'ddd' &&
                this._shortWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (
                strict &&
                format === 'dd' &&
                this._minWeekdaysParse[i].test(weekdayName)
            ) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict
                ? this._weekdaysStrictRegex
                : this._weekdaysRegex;
        }
    }

    function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict
                ? this._weekdaysShortStrictRegex
                : this._weekdaysShortRegex;
        }
    }

    function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict
                ? this._weekdaysMinStrictRegex
                : this._weekdaysMinRegex;
        }
    }

    function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [],
            shortPieces = [],
            longPieces = [],
            mixedPieces = [],
            i,
            mom,
            minp,
            shortp,
            longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = regexEscape(this.weekdaysMin(mom, ''));
            shortp = regexEscape(this.weekdaysShort(mom, ''));
            longp = regexEscape(this.weekdays(mom, ''));
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp(
            '^(' + longPieces.join('|') + ')',
            'i'
        );
        this._weekdaysShortStrictRegex = new RegExp(
            '^(' + shortPieces.join('|') + ')',
            'i'
        );
        this._weekdaysMinStrictRegex = new RegExp(
            '^(' + minPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return (
            '' +
            hFormat.apply(this) +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return (
            '' +
            this.hours() +
            zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2)
        );
    });

    function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(
                this.hours(),
                this.minutes(),
                lowercase
            );
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a', matchMeridiem);
    addRegexToken('A', matchMeridiem);
    addRegexToken('H', match1to2);
    addRegexToken('h', match1to2);
    addRegexToken('k', match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4,
            pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p';
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
        // Setting the hour should keep the time, because the user explicitly
        // specified which hour they want. So trying to maintain the same hour (in
        // a new timezone) makes sense. Adding/subtracting hours does not follow
        // this rule.
        getSetHour = makeGetSet('Hours', true);

    function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse,
    };

    // internal storage for locale config files
    var locales = {},
        localeFamilies = {},
        globalLocale;

    function commonPrefix(arr1, arr2) {
        var i,
            minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
            if (arr1[i] !== arr2[i]) {
                return i;
            }
        }
        return minl;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0,
            j,
            next,
            locale,
            split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (
                    next &&
                    next.length >= j &&
                    commonPrefix(split, next) >= j - 1
                ) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function isLocaleNameSane(name) {
        // Prevent names that look like filesystem paths, i.e contain '/' or '\'
        return name.match('^[^/\\\\]*$') != null;
    }

    function loadLocale(name) {
        var oldLocale = null,
            aliasedRequire;
        // TODO: Find a better way to register and load all the locales in Node
        if (
            locales[name] === undefined &&
            "object" !== 'undefined' &&
            module &&
            module.exports &&
            isLocaleNameSane(name)
        ) {
            try {
                oldLocale = globalLocale._abbr;
                aliasedRequire = undefined;
                __webpack_require__("./node_modules/moment/locale sync recursive ^\\.\\/.*$")("./" + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {
                // mark as not found to avoid repeating expensive file require call causing high CPU
                // when trying to find en-US, en_US, en-us for every format call
                locales[name] = null; // null means not found
            }
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            } else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            } else {
                if (typeof console !== 'undefined' && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn(
                        'Locale ' + key + ' not found. Did you forget to load it?'
                    );
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale(name, config) {
        if (config !== null) {
            var locale,
                parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple(
                    'defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
                );
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config,
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale,
                tmpLocale,
                parentConfig = baseConfig;

            if (locales[name] != null && locales[name].parentLocale != null) {
                // Update existing child locale in-place to avoid memory-leaks
                locales[name].set(mergeConfigs(locales[name]._config, config));
            } else {
                // MERGE
                tmpLocale = loadLocale(name);
                if (tmpLocale != null) {
                    parentConfig = tmpLocale._config;
                }
                config = mergeConfigs(parentConfig, config);
                if (tmpLocale == null) {
                    // updateLocale is called for creating a new locale
                    // Set abbr so it will have a name (getters return
                    // undefined otherwise).
                    config.abbr = name;
                }
                locale = new Locale(config);
                locale.parentLocale = locales[name];
                locales[name] = locale;
            }

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                    if (name === getSetGlobalLocale()) {
                        getSetGlobalLocale(name);
                    }
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale(key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow(m) {
        var overflow,
            a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH] < 0 || a[MONTH] > 11
                    ? MONTH
                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
                    ? DATE
                    : a[HOUR] < 0 ||
                      a[HOUR] > 24 ||
                      (a[HOUR] === 24 &&
                          (a[MINUTE] !== 0 ||
                              a[SECOND] !== 0 ||
                              a[MILLISECOND] !== 0))
                    ? HOUR
                    : a[MINUTE] < 0 || a[MINUTE] > 59
                    ? MINUTE
                    : a[SECOND] < 0 || a[SECOND] > 59
                    ? SECOND
                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
                    ? MILLISECOND
                    : -1;

            if (
                getParsingFlags(m)._overflowDayOfYear &&
                (overflow < YEAR || overflow > DATE)
            ) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex =
            /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        basicIsoRegex =
            /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
            ['YYYY-DDD', /\d{4}-\d{3}/],
            ['YYYY-MM', /\d{4}-\d\d/, false],
            ['YYYYYYMMDD', /[+-]\d{10}/],
            ['YYYYMMDD', /\d{8}/],
            ['GGGG[W]WWE', /\d{4}W\d{3}/],
            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
            ['YYYYDDD', /\d{7}/],
            ['YYYYMM', /\d{6}/, false],
            ['YYYY', /\d{4}/, false],
        ],
        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
            ['HH:mm', /\d\d:\d\d/],
            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
            ['HHmmss', /\d\d\d\d\d\d/],
            ['HHmm', /\d\d\d\d/],
            ['HH', /\d\d/],
        ],
        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
        rfc2822 =
            /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
        obsOffsets = {
            UT: 0,
            GMT: 0,
            EDT: -4 * 60,
            EST: -5 * 60,
            CDT: -5 * 60,
            CST: -6 * 60,
            MDT: -6 * 60,
            MST: -7 * 60,
            PDT: -7 * 60,
            PST: -8 * 60,
        };

    // date from iso format
    function configFromISO(config) {
        var i,
            l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime,
            dateFormat,
            timeFormat,
            tzFormat,
            isoDatesLen = isoDates.length,
            isoTimesLen = isoTimes.length;

        if (match) {
            getParsingFlags(config).iso = true;
            for (i = 0, l = isoDatesLen; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimesLen; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    function extractFromRFC2822Strings(
        yearStr,
        monthStr,
        dayStr,
        hourStr,
        minuteStr,
        secondStr
    ) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10),
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s
            .replace(/\([^()]*\)|[\n\t]/g, ' ')
            .replace(/(\s\s+)/g, ' ')
            .replace(/^\s\s*/, '')
            .replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(
                    parsedInput[0],
                    parsedInput[1],
                    parsedInput[2]
                ).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10),
                m = hm % 100,
                h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)),
            parsedArray;
        if (match) {
            parsedArray = extractFromRFC2822Strings(
                match[4],
                match[3],
                match[2],
                match[5],
                match[6],
                match[7]
            );
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        if (config._strict) {
            config._isValid = false;
        } else {
            // Final attempt, use Input Fallback
            hooks.createFromInputFallback(config);
        }
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
            'discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [
                nowValue.getUTCFullYear(),
                nowValue.getUTCMonth(),
                nowValue.getUTCDate(),
            ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray(config) {
        var i,
            date,
            input = [],
            currentDate,
            expectedWeekday,
            yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (
                config._dayOfYear > daysInYear(yearToUse) ||
                config._dayOfYear === 0
            ) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] =
                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (
            config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0
        ) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(
            null,
            input
        );
        expectedWeekday = config._useUTC
            ? config._d.getUTCDay()
            : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (
            config._w &&
            typeof config._w.d !== 'undefined' &&
            config._w.d !== expectedWeekday
        ) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(
                w.GG,
                config._a[YEAR],
                weekOfYear(createLocal(), 1, 4).year
            );
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from beginning of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to beginning of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i,
            parsedInput,
            tokens,
            token,
            skipped,
            stringLength = string.length,
            totalParsedInputLength = 0,
            era,
            tokenLen;

        tokens =
            expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens.length;
        for (i = 0; i < tokenLen; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
                [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(
                    string.indexOf(parsedInput) + parsedInput.length
                );
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                } else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            } else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver =
            stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (
            config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0
        ) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(
            config._locale,
            config._a[HOUR],
            config._meridiem
        );

        // handle era
        era = getParsingFlags(config).era;
        if (era !== null) {
            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }

        configFromArray(config);
        checkOverflow(config);
    }

    function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,
            scoreToBeat,
            i,
            currentScore,
            validFormatFound,
            bestFormatIsValid = false,
            configfLen = config._f.length;

        if (configfLen === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < configfLen; i++) {
            currentScore = 0;
            validFormatFound = false;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (isValid(tempConfig)) {
                validFormatFound = true;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (!bestFormatIsValid) {
                if (
                    scoreToBeat == null ||
                    currentScore < scoreToBeat ||
                    validFormatFound
                ) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                    if (validFormatFound) {
                        bestFormatIsValid = true;
                    }
                }
            } else {
                if (currentScore < scoreToBeat) {
                    scoreToBeat = currentScore;
                    bestMoment = tempConfig;
                }
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i),
            dayOrDate = i.day === undefined ? i.date : i.day;
        config._a = map(
            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
            function (obj) {
                return obj && parseInt(obj, 10);
            }
        );

        configFromArray(config);
    }

    function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({ nullInput: true });
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        } else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};

        if (format === true || format === false) {
            strict = format;
            format = undefined;
        }

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if (
            (isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)
        ) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other < this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        ),
        prototypeMax = deprecate(
            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
            function () {
                var other = createLocal.apply(null, arguments);
                if (this.isValid() && other.isValid()) {
                    return other > this ? this : other;
                } else {
                    return createInvalid();
                }
            }
        );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max() {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +new Date();
    };

    var ordering = [
        'year',
        'quarter',
        'month',
        'week',
        'day',
        'hour',
        'minute',
        'second',
        'millisecond',
    ];

    function isDurationValid(m) {
        var key,
            unitHasDecimal = false,
            i,
            orderLen = ordering.length;
        for (key in m) {
            if (
                hasOwnProp(m, key) &&
                !(
                    indexOf.call(ordering, key) !== -1 &&
                    (m[key] == null || !isNaN(m[key]))
                )
            ) {
                return false;
            }
        }

        for (i = 0; i < orderLen; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds =
            +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration(obj) {
        return obj instanceof Duration;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (
                (dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
            ) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    // FORMATTING

    function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset(),
                sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return (
                sign +
                zeroFill(~~(offset / 60), 2) +
                separator +
                zeroFill(~~offset % 60, 2)
            );
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z', matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher),
            chunk,
            parts,
            minutes;

        if (matches === null) {
            return null;
        }

        chunk = matches[matches.length - 1] || [];
        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff =
                (isMoment(input) || isDate(input)
                    ? input.valueOf()
                    : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset());
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(
                        this,
                        createDuration(input - offset, 'm'),
                        1,
                        false
                    );
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone(input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset() {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            } else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime() {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {},
            other;

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted =
                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal() {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        // and further modified to allow for strings containing both week and day
        isoRegex =
            /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration(input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months,
            };
        } else if (isNumber(input) || !isNaN(+input)) {
            duration = {};
            if (key) {
                duration[key] = +input;
            } else {
                duration.milliseconds = +input;
            }
        } else if ((match = aspNetRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
            };
        } else if ((match = isoRegex.exec(input))) {
            sign = match[1] === '-' ? -1 : 1;
            duration = {
                y: parseIso(match[2], sign),
                M: parseIso(match[3], sign),
                w: parseIso(match[4], sign),
                d: parseIso(match[5], sign),
                h: parseIso(match[6], sign),
                m: parseIso(match[7], sign),
                s: parseIso(match[8], sign),
            };
        } else if (duration == null) {
            // checks for null or undefined
            duration = {};
        } else if (
            typeof duration === 'object' &&
            ('from' in duration || 'to' in duration)
        ) {
            diffRes = momentsDifference(
                createLocal(duration.from),
                createLocal(duration.to)
            );

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
            ret._isValid = input._isValid;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {};

        res.months =
            other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +base.clone().add(res.months, 'M');

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return { milliseconds: 0, months: 0 };
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(
                    name,
                    'moment().' +
                        name +
                        '(period, number) is deprecated. Please use moment().' +
                        name +
                        '(number, period). ' +
                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
                );
                tmp = val;
                val = period;
                period = tmp;
            }

            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add = createAdder(1, 'add'),
        subtract = createAdder(-1, 'subtract');

    function isString(input) {
        return typeof input === 'string' || input instanceof String;
    }

    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
    function isMomentInput(input) {
        return (
            isMoment(input) ||
            isDate(input) ||
            isString(input) ||
            isNumber(input) ||
            isNumberOrStringArray(input) ||
            isMomentInputObject(input) ||
            input === null ||
            input === undefined
        );
    }

    function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'years',
                'year',
                'y',
                'months',
                'month',
                'M',
                'days',
                'day',
                'd',
                'dates',
                'date',
                'D',
                'hours',
                'hour',
                'h',
                'minutes',
                'minute',
                'm',
                'seconds',
                'second',
                's',
                'milliseconds',
                'millisecond',
                'ms',
            ],
            i,
            property,
            propertyLen = properties.length;

        for (i = 0; i < propertyLen; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function isNumberOrStringArray(input) {
        var arrayTest = isArray(input),
            dataTypeTest = false;
        if (arrayTest) {
            dataTypeTest =
                input.filter(function (item) {
                    return !isNumber(item) && isString(input);
                }).length === 0;
        }
        return arrayTest && dataTypeTest;
    }

    function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input),
            propertyTest = false,
            properties = [
                'sameDay',
                'nextDay',
                'lastDay',
                'nextWeek',
                'lastWeek',
                'sameElse',
            ],
            i,
            property;

        for (i = 0; i < properties.length; i += 1) {
            property = properties[i];
            propertyTest = propertyTest || hasOwnProp(input, property);
        }

        return objectTest && propertyTest;
    }

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6
            ? 'sameElse'
            : diff < -1
            ? 'lastWeek'
            : diff < 0
            ? 'lastDay'
            : diff < 1
            ? 'sameDay'
            : diff < 2
            ? 'nextDay'
            : diff < 7
            ? 'nextWeek'
            : 'sameElse';
    }

    function calendar$1(time, formats) {
        // Support for single parameter, formats only overload to the calendar function
        if (arguments.length === 1) {
            if (!arguments[0]) {
                time = undefined;
                formats = undefined;
            } else if (isMomentInput(arguments[0])) {
                time = arguments[0];
                formats = undefined;
            } else if (isCalendarSpec(arguments[0])) {
                formats = arguments[0];
                time = undefined;
            }
        }
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse',
            output =
                formats &&
                (isFunction(formats[format])
                    ? formats[format].call(this, now)
                    : formats[format]);

        return this.format(
            output || this.localeData().calendar(format, this, createLocal(now))
        );
    }

    function clone() {
        return new Moment(this);
    }

    function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween(from, to, units, inclusivity) {
        var localFrom = isMoment(from) ? from : createLocal(from),
            localTo = isMoment(to) ? to : createLocal(to);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
            return false;
        }
        inclusivity = inclusivity || '()';
        return (
            (inclusivity[0] === '('
                ? this.isAfter(localFrom, units)
                : !this.isBefore(localFrom, units)) &&
            (inclusivity[1] === ')'
                ? this.isBefore(localTo, units)
                : !this.isAfter(localTo, units))
        );
    }

    function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units) || 'millisecond';
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return (
                this.clone().startOf(units).valueOf() <= inputMs &&
                inputMs <= this.clone().endOf(units).valueOf()
            );
        }
    }

    function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
    }

    function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
    }

    function diff(input, units, asFloat) {
        var that, zoneDelta, output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year':
                output = monthDiff(this, that) / 12;
                break;
            case 'month':
                output = monthDiff(this, that);
                break;
            case 'quarter':
                output = monthDiff(this, that) / 3;
                break;
            case 'second':
                output = (this - that) / 1e3;
                break; // 1000
            case 'minute':
                output = (this - that) / 6e4;
                break; // 1000 * 60
            case 'hour':
                output = (this - that) / 36e5;
                break; // 1000 * 60 * 60
            case 'day':
                output = (this - that - zoneDelta) / 864e5;
                break; // 1000 * 60 * 60 * 24, negate dst
            case 'week':
                output = (this - that - zoneDelta) / 6048e5;
                break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default:
                output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff(a, b) {
        if (a.date() < b.date()) {
            // end-of-month calculations work correct when the start month has more
            // days than the end month.
            return -monthDiff(b, a);
        }
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2,
            adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true,
            m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(
                m,
                utc
                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
            );
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
                    .toISOString()
                    .replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(
            m,
            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
        );
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect() {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment',
            zone = '',
            prefix,
            year,
            datetime,
            suffix;
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        prefix = '[' + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        datetime = '-MM-DD[T]HH:mm:ss.SSS';
        suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format(inputString) {
        if (!inputString) {
            inputString = this.isUtc()
                ? hooks.defaultFormatUtc
                : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ to: this, from: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to(time, withoutSuffix) {
        if (
            this.isValid() &&
            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
        ) {
            return createDuration({ from: this, to: time })
                .locale(this.locale())
                .humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale(key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData() {
        return this._locale;
    }

    var MS_PER_SECOND = 1000,
        MS_PER_MINUTE = 60 * MS_PER_SECOND,
        MS_PER_HOUR = 60 * MS_PER_MINUTE,
        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

    // actual modulo - handles negative numbers (for dates before 1970):
    function mod$1(dividend, divisor) {
        return ((dividend % divisor) + divisor) % divisor;
    }

    function localStartOfDate(y, m, d) {
        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return new Date(y, m, d).valueOf();
        }
    }

    function utcStartOfDate(y, m, d) {
        // Date.UTC remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0) {
            // preserve leap years using a full 400 year cycle, then reset
            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
            return Date.UTC(y, m, d);
        }
    }

    function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year(), 0, 1);
                break;
            case 'quarter':
                time = startOfDate(
                    this.year(),
                    this.month() - (this.month() % 3),
                    1
                );
                break;
            case 'month':
                time = startOfDate(this.year(), this.month(), 1);
                break;
            case 'week':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - this.weekday()
                );
                break;
            case 'isoWeek':
                time = startOfDate(
                    this.year(),
                    this.month(),
                    this.date() - (this.isoWeekday() - 1)
                );
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date());
                break;
            case 'hour':
                time = this._d.valueOf();
                time -= mod$1(
                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                    MS_PER_HOUR
                );
                break;
            case 'minute':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_MINUTE);
                break;
            case 'second':
                time = this._d.valueOf();
                time -= mod$1(time, MS_PER_SECOND);
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond' || !this.isValid()) {
            return this;
        }

        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

        switch (units) {
            case 'year':
                time = startOfDate(this.year() + 1, 0, 1) - 1;
                break;
            case 'quarter':
                time =
                    startOfDate(
                        this.year(),
                        this.month() - (this.month() % 3) + 3,
                        1
                    ) - 1;
                break;
            case 'month':
                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                break;
            case 'week':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - this.weekday() + 7
                    ) - 1;
                break;
            case 'isoWeek':
                time =
                    startOfDate(
                        this.year(),
                        this.month(),
                        this.date() - (this.isoWeekday() - 1) + 7
                    ) - 1;
                break;
            case 'day':
            case 'date':
                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                break;
            case 'hour':
                time = this._d.valueOf();
                time +=
                    MS_PER_HOUR -
                    mod$1(
                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
                        MS_PER_HOUR
                    ) -
                    1;
                break;
            case 'minute':
                time = this._d.valueOf();
                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                break;
            case 'second':
                time = this._d.valueOf();
                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                break;
        }

        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
    }

    function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000;
    }

    function unix() {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate() {
        return new Date(this.valueOf());
    }

    function toArray() {
        var m = this;
        return [
            m.year(),
            m.month(),
            m.date(),
            m.hour(),
            m.minute(),
            m.second(),
            m.millisecond(),
        ];
    }

    function toObject() {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds(),
        };
    }

    function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2() {
        return isValid(this);
    }

    function parsingFlags() {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt() {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict,
        };
    }

    addFormatToken('N', 0, 0, 'eraAbbr');
    addFormatToken('NN', 0, 0, 'eraAbbr');
    addFormatToken('NNN', 0, 0, 'eraAbbr');
    addFormatToken('NNNN', 0, 0, 'eraName');
    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
    addFormatToken('y', ['yy', 2], 0, 'eraYear');
    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

    addRegexToken('N', matchEraAbbr);
    addRegexToken('NN', matchEraAbbr);
    addRegexToken('NNN', matchEraAbbr);
    addRegexToken('NNNN', matchEraName);
    addRegexToken('NNNNN', matchEraNarrow);

    addParseToken(
        ['N', 'NN', 'NNN', 'NNNN', 'NNNNN'],
        function (input, array, config, token) {
            var era = config._locale.erasParse(input, token, config._strict);
            if (era) {
                getParsingFlags(config).era = era;
            } else {
                getParsingFlags(config).invalidEra = input;
            }
        }
    );

    addRegexToken('y', matchUnsigned);
    addRegexToken('yy', matchUnsigned);
    addRegexToken('yyy', matchUnsigned);
    addRegexToken('yyyy', matchUnsigned);
    addRegexToken('yo', matchEraYearOrdinal);

    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
    addParseToken(['yo'], function (input, array, config, token) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
            match = input.match(config._locale._eraYearOrdinalRegex);
        }

        if (config._locale.eraYearOrdinalParse) {
            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
            array[YEAR] = parseInt(input, 10);
        }
    });

    function localeEras(m, format) {
        var i,
            l,
            date,
            eras = this._eras || getLocale('en')._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
            switch (typeof eras[i].since) {
                case 'string':
                    // truncate time
                    date = hooks(eras[i].since).startOf('day');
                    eras[i].since = date.valueOf();
                    break;
            }

            switch (typeof eras[i].until) {
                case 'undefined':
                    eras[i].until = +Infinity;
                    break;
                case 'string':
                    // truncate time
                    date = hooks(eras[i].until).startOf('day').valueOf();
                    eras[i].until = date.valueOf();
                    break;
            }
        }
        return eras;
    }

    function localeErasParse(eraName, format, strict) {
        var i,
            l,
            eras = this.eras(),
            name,
            abbr,
            narrow;
        eraName = eraName.toUpperCase();

        for (i = 0, l = eras.length; i < l; ++i) {
            name = eras[i].name.toUpperCase();
            abbr = eras[i].abbr.toUpperCase();
            narrow = eras[i].narrow.toUpperCase();

            if (strict) {
                switch (format) {
                    case 'N':
                    case 'NN':
                    case 'NNN':
                        if (abbr === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNN':
                        if (name === eraName) {
                            return eras[i];
                        }
                        break;

                    case 'NNNNN':
                        if (narrow === eraName) {
                            return eras[i];
                        }
                        break;
                }
            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
                return eras[i];
            }
        }
    }

    function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? +1 : -1;
        if (year === undefined) {
            return hooks(era.since).year();
        } else {
            return hooks(era.since).year() + (year - era.offset) * dir;
        }
    }

    function getEraName() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].name;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].name;
            }
        }

        return '';
    }

    function getEraNarrow() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].narrow;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].narrow;
            }
        }

        return '';
    }

    function getEraAbbr() {
        var i,
            l,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (eras[i].since <= val && val <= eras[i].until) {
                return eras[i].abbr;
            }
            if (eras[i].until <= val && val <= eras[i].since) {
                return eras[i].abbr;
            }
        }

        return '';
    }

    function getEraYear() {
        var i,
            l,
            dir,
            val,
            eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
            dir = eras[i].since <= eras[i].until ? +1 : -1;

            // truncate time
            val = this.clone().startOf('day').valueOf();

            if (
                (eras[i].since <= val && val <= eras[i].until) ||
                (eras[i].until <= val && val <= eras[i].since)
            ) {
                return (
                    (this.year() - hooks(eras[i].since).year()) * dir +
                    eras[i].offset
                );
            }
        }

        return this.year();
    }

    function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNameRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
    }

    function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, '_erasAbbrRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
    }

    function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, '_erasNarrowRegex')) {
            computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
    }

    function matchEraAbbr(isStrict, locale) {
        return locale.erasAbbrRegex(isStrict);
    }

    function matchEraName(isStrict, locale) {
        return locale.erasNameRegex(isStrict);
    }

    function matchEraNarrow(isStrict, locale) {
        return locale.erasNarrowRegex(isStrict);
    }

    function matchEraYearOrdinal(isStrict, locale) {
        return locale._eraYearOrdinalRegex || matchUnsigned;
    }

    function computeErasParse() {
        var abbrPieces = [],
            namePieces = [],
            narrowPieces = [],
            mixedPieces = [],
            i,
            l,
            eras = this.eras();

        for (i = 0, l = eras.length; i < l; ++i) {
            namePieces.push(regexEscape(eras[i].name));
            abbrPieces.push(regexEscape(eras[i].abbr));
            narrowPieces.push(regexEscape(eras[i].narrow));

            mixedPieces.push(regexEscape(eras[i].name));
            mixedPieces.push(regexEscape(eras[i].abbr));
            mixedPieces.push(regexEscape(eras[i].narrow));
        }

        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
        this._erasNarrowRegex = new RegExp(
            '^(' + narrowPieces.join('|') + ')',
            'i'
        );
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg', 'weekYear');
    addWeekYearFormatToken('ggggg', 'weekYear');
    addWeekYearFormatToken('GGGG', 'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);

    // PARSING

    addRegexToken('G', matchSigned);
    addRegexToken('g', matchSigned);
    addRegexToken('GG', match1to2, match2);
    addRegexToken('gg', match1to2, match2);
    addRegexToken('GGGG', match1to4, match4);
    addRegexToken('gggg', match1to4, match4);
    addRegexToken('GGGGG', match1to6, match6);
    addRegexToken('ggggg', match1to6, match6);

    addWeekParseToken(
        ['gggg', 'ggggg', 'GGGG', 'GGGGG'],
        function (input, week, config, token) {
            week[token.substr(0, 2)] = toInt(input);
        }
    );

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy
        );
    }

    function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
            this,
            input,
            this.isoWeek(),
            this.isoWeekday(),
            1,
            4
        );
    }

    function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
    }

    function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
    }

    function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter(input) {
        return input == null
            ? Math.ceil((this.month() + 1) / 3)
            : this.month((input - 1) * 3 + (this.month() % 3));
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D', match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict
            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
            : locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD', match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear(input) {
        var dayOfYear =
            Math.round(
                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
            ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m', match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s', match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });

    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S', match1to3, match1);
    addRegexToken('SS', match1to3, match2);
    addRegexToken('SSS', match1to3, match3);

    var token, getSetMillisecond;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }

    getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z', 0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr() {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add = add;
    proto.calendar = calendar$1;
    proto.clone = clone;
    proto.diff = diff;
    proto.endOf = endOf;
    proto.format = format;
    proto.from = from;
    proto.fromNow = fromNow;
    proto.to = to;
    proto.toNow = toNow;
    proto.get = stringGet;
    proto.invalidAt = invalidAt;
    proto.isAfter = isAfter;
    proto.isBefore = isBefore;
    proto.isBetween = isBetween;
    proto.isSame = isSame;
    proto.isSameOrAfter = isSameOrAfter;
    proto.isSameOrBefore = isSameOrBefore;
    proto.isValid = isValid$2;
    proto.lang = lang;
    proto.locale = locale;
    proto.localeData = localeData;
    proto.max = prototypeMax;
    proto.min = prototypeMin;
    proto.parsingFlags = parsingFlags;
    proto.set = stringSet;
    proto.startOf = startOf;
    proto.subtract = subtract;
    proto.toArray = toArray;
    proto.toObject = toObject;
    proto.toDate = toDate;
    proto.toISOString = toISOString;
    proto.inspect = inspect;
    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
            return 'Moment<' + this.format() + '>';
        };
    }
    proto.toJSON = toJSON;
    proto.toString = toString;
    proto.unix = unix;
    proto.valueOf = valueOf;
    proto.creationData = creationData;
    proto.eraName = getEraName;
    proto.eraNarrow = getEraNarrow;
    proto.eraAbbr = getEraAbbr;
    proto.eraYear = getEraYear;
    proto.year = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week = proto.weeks = getSetWeek;
    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
    proto.weeksInYear = getWeeksInYear;
    proto.weeksInWeekYear = getWeeksInWeekYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
    proto.date = getSetDayOfMonth;
    proto.day = proto.days = getSetDayOfWeek;
    proto.weekday = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset = getSetOffset;
    proto.utc = setOffsetToUTC;
    proto.local = setOffsetToLocal;
    proto.parseZone = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST = isDaylightSavingTime;
    proto.isLocal = isLocal;
    proto.isUtcOffset = isUtcOffset;
    proto.isUtc = isUtc;
    proto.isUTC = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates = deprecate(
        'dates accessor is deprecated. Use date instead.',
        getSetDayOfMonth
    );
    proto.months = deprecate(
        'months accessor is deprecated. Use month instead',
        getSetMonth
    );
    proto.years = deprecate(
        'years accessor is deprecated. Use year instead',
        getSetYear
    );
    proto.zone = deprecate(
        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
        getSetZone
    );
    proto.isDSTShifted = deprecate(
        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
        isDaylightSavingTimeShifted
    );

    function createUnix(input) {
        return createLocal(input * 1000);
    }

    function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat(string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar = calendar;
    proto$1.longDateFormat = longDateFormat;
    proto$1.invalidDate = invalidDate;
    proto$1.ordinal = ordinal;
    proto$1.preparse = preParsePostFormat;
    proto$1.postformat = preParsePostFormat;
    proto$1.relativeTime = relativeTime;
    proto$1.pastFuture = pastFuture;
    proto$1.set = set;
    proto$1.eras = localeEras;
    proto$1.erasParse = localeErasParse;
    proto$1.erasConvertYear = localeErasConvertYear;
    proto$1.erasAbbrRegex = erasAbbrRegex;
    proto$1.erasNameRegex = erasNameRegex;
    proto$1.erasNarrowRegex = erasNarrowRegex;

    proto$1.months = localeMonths;
    proto$1.monthsShort = localeMonthsShort;
    proto$1.monthsParse = localeMonthsParse;
    proto$1.monthsRegex = monthsRegex;
    proto$1.monthsShortRegex = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays = localeWeekdays;
    proto$1.weekdaysMin = localeWeekdaysMin;
    proto$1.weekdaysShort = localeWeekdaysShort;
    proto$1.weekdaysParse = localeWeekdaysParse;

    proto$1.weekdaysRegex = weekdaysRegex;
    proto$1.weekdaysShortRegex = weekdaysShortRegex;
    proto$1.weekdaysMinRegex = weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1(format, index, field, setter) {
        var locale = getLocale(),
            utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i,
            out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0,
            i,
            out = [];

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        eras: [
            {
                since: '0001-01-01',
                until: +Infinity,
                offset: 1,
                name: 'Anno Domini',
                narrow: 'AD',
                abbr: 'AD',
            },
            {
                since: '0000-12-31',
                until: -Infinity,
                offset: 1,
                name: 'Before Christ',
                narrow: 'BC',
                abbr: 'BC',
            },
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
            var b = number % 10,
                output =
                    toInt((number % 100) / 10) === 1
                        ? 'th'
                        : b === 1
                        ? 'st'
                        : b === 2
                        ? 'nd'
                        : b === 3
                        ? 'rd'
                        : 'th';
            return number + output;
        },
    });

    // Side effect imports

    hooks.lang = deprecate(
        'moment.lang is deprecated. Use moment.locale instead.',
        getSetGlobalLocale
    );
    hooks.langData = deprecate(
        'moment.langData is deprecated. Use moment.localeData instead.',
        getLocale
    );

    var mathAbs = Math.abs;

    function abs() {
        var data = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);

        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);

        return this;
    }

    function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil(number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble() {
        var milliseconds = this._milliseconds,
            days = this._days,
            months = this._months,
            data = this._data,
            seconds,
            minutes,
            hours,
            years,
            monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (
            !(
                (milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0)
            )
        ) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;

        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;

        hours = absFloor(minutes / 60);
        data.hours = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days = days;
        data.months = months;
        data.years = years;

        return this;
    }

    function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return (days * 4800) / 146097;
    }

    function monthsToDays(months) {
        // the reverse of daysToMonths
        return (months * 146097) / 4800;
    }

    function as(units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days,
            months,
            milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'quarter' || units === 'year') {
            days = this._days + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            switch (units) {
                case 'month':
                    return months;
                case 'quarter':
                    return months / 3;
                case 'year':
                    return months / 12;
            }
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week':
                    return days / 7 + milliseconds / 6048e5;
                case 'day':
                    return days + milliseconds / 864e5;
                case 'hour':
                    return days * 24 + milliseconds / 36e5;
                case 'minute':
                    return days * 1440 + milliseconds / 6e4;
                case 'second':
                    return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond':
                    return Math.floor(days * 864e5) + milliseconds;
                default:
                    throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1() {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs(alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms'),
        asSeconds = makeAs('s'),
        asMinutes = makeAs('m'),
        asHours = makeAs('h'),
        asDays = makeAs('d'),
        asWeeks = makeAs('w'),
        asMonths = makeAs('M'),
        asQuarters = makeAs('Q'),
        asYears = makeAs('y');

    function clone$1() {
        return createDuration(this);
    }

    function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds'),
        seconds = makeGetter('seconds'),
        minutes = makeGetter('minutes'),
        hours = makeGetter('hours'),
        days = makeGetter('days'),
        months = makeGetter('months'),
        years = makeGetter('years');

    function weeks() {
        return absFloor(this.days() / 7);
    }

    var round = Math.round,
        thresholds = {
            ss: 44, // a few seconds to seconds
            s: 45, // seconds to minute
            m: 45, // minutes to hour
            h: 22, // hours to day
            d: 26, // days to month/week
            w: null, // weeks to month
            M: 11, // months to year
        };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
        var duration = createDuration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            weeks = round(duration.as('w')),
            years = round(duration.as('y')),
            a =
                (seconds <= thresholds.ss && ['s', seconds]) ||
                (seconds < thresholds.s && ['ss', seconds]) ||
                (minutes <= 1 && ['m']) ||
                (minutes < thresholds.m && ['mm', minutes]) ||
                (hours <= 1 && ['h']) ||
                (hours < thresholds.h && ['hh', hours]) ||
                (days <= 1 && ['d']) ||
                (days < thresholds.d && ['dd', days]);

        if (thresholds.w != null) {
            a =
                a ||
                (weeks <= 1 && ['w']) ||
                (weeks < thresholds.w && ['ww', weeks]);
        }
        a = a ||
            (months <= 1 && ['M']) ||
            (months < thresholds.M && ['MM', months]) ||
            (years <= 1 && ['y']) || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof roundingFunction === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var withSuffix = false,
            th = thresholds,
            locale,
            output;

        if (typeof argWithSuffix === 'object') {
            argThresholds = argWithSuffix;
            argWithSuffix = false;
        }
        if (typeof argWithSuffix === 'boolean') {
            withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === 'object') {
            th = Object.assign({}, thresholds, argThresholds);
            if (argThresholds.s != null && argThresholds.ss == null) {
                th.ss = argThresholds.s - 1;
            }
        }

        locale = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return (x > 0) - (x < 0) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000,
            days = abs$1(this._days),
            months = abs$1(this._months),
            minutes,
            hours,
            years,
            s,
            total = this.asSeconds(),
            totalSign,
            ymSign,
            daysSign,
            hmsSign;

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

        totalSign = total < 0 ? '-' : '';
        ymSign = sign(this._months) !== sign(total) ? '-' : '';
        daysSign = sign(this._days) !== sign(total) ? '-' : '';
        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return (
            totalSign +
            'P' +
            (years ? ymSign + years + 'Y' : '') +
            (months ? ymSign + months + 'M' : '') +
            (days ? daysSign + days + 'D' : '') +
            (hours || minutes || seconds ? 'T' : '') +
            (hours ? hmsSign + hours + 'H' : '') +
            (minutes ? hmsSign + minutes + 'M' : '') +
            (seconds ? hmsSign + s + 'S' : '')
        );
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid = isValid$1;
    proto$2.abs = abs;
    proto$2.add = add$1;
    proto$2.subtract = subtract$1;
    proto$2.as = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds = asSeconds;
    proto$2.asMinutes = asMinutes;
    proto$2.asHours = asHours;
    proto$2.asDays = asDays;
    proto$2.asWeeks = asWeeks;
    proto$2.asMonths = asMonths;
    proto$2.asQuarters = asQuarters;
    proto$2.asYears = asYears;
    proto$2.valueOf = valueOf$1;
    proto$2._bubble = bubble;
    proto$2.clone = clone$1;
    proto$2.get = get$2;
    proto$2.milliseconds = milliseconds;
    proto$2.seconds = seconds;
    proto$2.minutes = minutes;
    proto$2.hours = hours;
    proto$2.days = days;
    proto$2.weeks = weeks;
    proto$2.months = months;
    proto$2.years = years;
    proto$2.humanize = humanize;
    proto$2.toISOString = toISOString$1;
    proto$2.toString = toISOString$1;
    proto$2.toJSON = toISOString$1;
    proto$2.locale = locale;
    proto$2.localeData = localeData;

    proto$2.toIsoString = deprecate(
        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
        toISOString$1
    );
    proto$2.lang = lang;

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    //! moment.js

    hooks.version = '2.29.4';

    setHookCallback(createLocal);

    hooks.fn = proto;
    hooks.min = min;
    hooks.max = max;
    hooks.now = now;
    hooks.utc = createUTC;
    hooks.unix = createUnix;
    hooks.months = listMonths;
    hooks.isDate = isDate;
    hooks.locale = getSetGlobalLocale;
    hooks.invalid = createInvalid;
    hooks.duration = createDuration;
    hooks.isMoment = isMoment;
    hooks.weekdays = listWeekdays;
    hooks.parseZone = createInZone;
    hooks.localeData = getLocale;
    hooks.isDuration = isDuration;
    hooks.monthsShort = listMonthsShort;
    hooks.weekdaysMin = listWeekdaysMin;
    hooks.defineLocale = defineLocale;
    hooks.updateLocale = updateLocale;
    hooks.locales = listLocales;
    hooks.weekdaysShort = listWeekdaysShort;
    hooks.normalizeUnits = normalizeUnits;
    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat = getCalendarFormat;
    hooks.prototype = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD', // <input type="date" />
        TIME: 'HH:mm', // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
        WEEK: 'GGGG-[W]WW', // <input type="week" />
        MONTH: 'YYYY-MM', // <input type="month" />
    };

    return hooks;

})));


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/node module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.nmd = (module) => {
/******/ 			module.paths = [];
/******/ 			if (!module.children) module.children = [];
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"/js/pages": 0,
/******/ 			"css/front-pages": 0,
/******/ 			"assets/css/custom": 0,
/******/ 			"assets/css/diagnosis-test-pdf": 0,
/******/ 			"assets/css/invoice-pdf": 0,
/******/ 			"assets/css/prescriptions-pdf": 0,
/******/ 			"assets/css/bill-pdf": 0,
/******/ 			"web_front/css/bootstrap": 0,
/******/ 			"assets/css/custom-auth": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunk"] = self["webpackChunk"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/turbo.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/custom/custom.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/custom/helpers.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/custom/custom-datatable.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/custom/new-edit-modal-form.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/custom/delete.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/sidebar_menu_search/sidebar_menu_search.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/custom/reset_models.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/custom/add-edit-profile-picture.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/appointments/appointments.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/appointments/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/brands/brands.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/category/category.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/category/medicines_list.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/nurses/nurses.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/nurses/nurses_data_listing.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/nurses/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/doctors/doctors.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/doctors/doctors_data_listing.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/doctors/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/lab_technicians/lab_technicians.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/lab_technicians/lab_technicians_data_listing.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/lab_technicians/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/receptionists/receptionists.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/receptionists/receptionists_data_listing.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/receptionists/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/pharmacists/pharmacists.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/pharmacists/pharmacists_data_listing.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/pharmacists/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/patients/patients.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/patients/patients_data_listing.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/patients/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/admins/admin.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/accountants/accountants.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/accountants/accountants_data_listing.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/accountants/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/custom/input_price_format.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/bills/bill.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/bills/new.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/bills/edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/blood_donors/blood_donors.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/blood_banks/blood_banks.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/bed_types/bed_types.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/bed_types/beds_view_list.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/beds/beds.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/beds/beds_assigns_view_list.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/beds/bulk_beds.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/beds/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/medicines/medicines.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/medicines/new.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/document_type/doc_type.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/document/document.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/document_type/user_documents.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/notice_boards/notice_boards.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/notice_boards/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/bed_assign/bed_assign.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/bed_assign/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/death_reports/death_reports.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/death_reports/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/user_profile/user_profile.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/birth_reports/birth_reports.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/birth_reports/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/operation_reports/operation_reports.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/operation_reports/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/employee_payrolls/employee_payrolls.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/employee_payrolls/payrolls.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/employee_payrolls/edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/patient_cases/patient_cases.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/patient_cases/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/employee/my_payrolls.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/employee/doctors.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/settings/setting.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/doctors_departments/doctors_departments.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/doctors_departments/doctor_departments_list.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/investigation_reports/investigation_reports.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/investigation_reports/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/accounts/accounts.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/accounts/payments_list.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/insurances/insurances.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/insurances/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/payments/payments.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/payment_reports/payments_reports.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/payments/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/hospital_schedule/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/invoices/invoice.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/invoices/new.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/schedules/schedules.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/schedules/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/services/services.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/services/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/packages/packages.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/packages/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/case_handlers/case_handlers.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/case_handlers/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/patient_cases_list/patient_cases_list.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/employee/notice_boards.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/advanced_payments/advanced_payments.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/advanced_payments/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/patient_admissions/patient_admission.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/patient_admissions/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/appointment_calendar/appointment_calendar.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/enquiry/enquiry.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ambulances/ambulances.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ambulances/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ambulance_call/ambulance_calls.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ambulance_call/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/prescriptions/prescriptions.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/patient_prescriptions/patient_prescriptions.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/patient_prescriptions/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/prescriptions/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/employee/patient_admission.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/employee/invoice.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/employee/bill.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/charge_categories/charge_categories.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/charge_categories/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/charges/charges.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/charges/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/radiology_categories/radiology_categories.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/pathology_categories/pathology_categories.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/radiology_tests/radiology_tests.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/radiology_tests/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/doctor_opd_charges/doctor_opd_charges.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/pathology_tests/pathology_tests.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/pathology_tests/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/expenses/expenses.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/incomes/incomes.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/web/plugin.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/sms/sms.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/custom/phone-number-country-code.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/dashboard/dashboard.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/mail/mail.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/patient_diagnosis_test/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/patient_diagnosis_test/patient_diagnosis_test.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/diagnosis_category/diagnosis_category.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/employee/patient_diagnosis_test.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/item_categories/item_categories.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/items/items.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/items/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/item_stocks/item_stocks.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/item_stocks/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/issued_items/issued_items.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/issued_items/create.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_patients/ipd_patients.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_patients/create.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_diagnosis/ipd_diagnosis.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_consultant_register/ipd_consultant_register.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_charges/ipd_charges.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_prescriptions/ipd_prescriptions.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_timelines/ipd_timelines.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_payments/ipd_payments.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_patients_list/ipd_patients.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_patients_list/ipd_diagnosis.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_patients_list/ipd_consultant_register.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_patients_list/ipd_charges.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_patients_list/ipd_prescriptions.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_patients_list/ipd_timelines.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_patients_list/ipd_payments.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_patients_list/ipd_stripe_payment.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/ipd_bills/ipd_bills.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/opd_patients/opd_patients.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/opd_patients/create.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/opd_patients/visits.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/opd_diagnosis/opd_diagnosis.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/opd_timelines/opd_timelines.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/opd_patients_list/opd_patients.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/opd_patients_list/visits.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/opd_patients_list/opd_diagnosis.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/opd_patients_list/opd_timelines.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/opd_tab_active/opd_tab_active.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/call_logs/call_log.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/call_logs/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/visitors/visitor.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/visitors/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/postals/postal.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/appointments/patient_appointment.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/testimonials/testimonial.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/blood_donations/blood_donations.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/blood_issues/blood_issues.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/live_consultations/live_consultations.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/live_consultations/live_meetings.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/vaccinations/vaccinations.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/vaccinated_patients/vaccinated_patients.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/vaccinated_patients/patient_vaccinated.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/users/user.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/users/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/front_settings/front_settings.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/accounts/accounts_details_edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/bed_types/bed_types_details_edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/beds/beds-details-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/document/document-details-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/document_type/doc_type-details-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/doctors_departments/doctors_departments-details-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/birth_reports/create-details-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/death_reports/death_reports-details-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/operation_reports/create-details-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/category/category-details-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/diagnosis_category/diagnosis_category-details-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/expenses/expenses-details-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/charge_categories/create-details-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/charges/create-details-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/notice_boards/create-details-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/incomes/incomes-details-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/front_settings/cms/create-edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/front_settings/front_services/front_services.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/employee_prescriptions/employee_prescriptions.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/js/currency_settings/create_edit.js")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/sass/bill-pdf.scss")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/sass/prescriptions-pdf.scss")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/sass/invoice-pdf.scss")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/sass/diagnosis-test-pdf.scss")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/sass/custom.scss")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/sass/custom-auth.scss")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/front/scss/bootstrap.scss")))
/******/ 	__webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/front/scss/main.scss")))
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, ["css/front-pages","assets/css/custom","assets/css/diagnosis-test-pdf","assets/css/invoice-pdf","assets/css/prescriptions-pdf","assets/css/bill-pdf","web_front/css/bootstrap","assets/css/custom-auth"], () => (__webpack_require__("./resources/assets/sass/front-main.scss")))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;